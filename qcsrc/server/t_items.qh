#ifndef T_ITEMS_H
#define T_ITEMS_H

// constants
const int IT_UNLIMITED_WEAPON_AMMO 		=       1; // when this bit is set, using a weapon does not reduce ammo. Checkpoints can give this powerup.
const int IT_UNLIMITED_SUPERWEAPONS		=       2; // when this bit is set, superweapons don't expire. Checkpoints can give this powerup.
const int IT_CTF_SHIELDED          		=       4; // set for the flag shield
const int IT_USING_JETPACK         		=       8; // confirmation that button is pressed
const int IT_JETPACK               		=      16; // actual item
const int IT_FUEL_REGEN            		=      32; // fuel regeneration trigger
// where is 64... ?
const int IT_FUEL       				=     128;
// -Wdouble-declaration
#define IT_SHELLS     				          256
// -Wdouble-declaration
#define IT_NAILS      				          512
// -Wdouble-declaration
#define IT_ROCKETS    				         1024
// -Wdouble-declaration
#define IT_CELLS      				         2048
const int IT_SUPERWEAPON				=    4096;
const int IT_STRENGTH   				=    8192;
const int IT_INVINCIBLE 				=   16384;
const int IT_HEALTH     				=   32768;
const int IT_PLASMA     				=   65536;

// shared value space (union):
	// for items:
	// -Wdouble-declaration
	#define IT_KEY1							131072
	// -Wdouble-declaration
	#define IT_KEY2							262144
// end

const int IT_5HP                       	=  524288;
const int IT_25HP                      	= 1048576;
const int IT_ARMOR_SHARD               	= 2097152;
const int IT_ARMOR                     	= 4194304;

// item masks
const int IT_AMMO                      	=    3968; // IT_FUEL | IT_SHELLS | IT_NAILS | IT_ROCKETS | IT_CELLS | IT_PLASMA;
const int IT_PICKUPMASK                	=      51; // IT_FUEL_REGEN | IT_JETPACK | IT_UNLIMITED_AMMO; // strength and invincible are handled separately
const int IT_UNLIMITED_AMMO            	=       3; // IT_UNLIMITED_SUPERWEAPONS | IT_UNLIMITED_WEAPON_AMMO;

const int AMMO_COUNT = 4; // amount of ammo types to show in the inventory panel

// item networking
const int ISF_LOCATION 			= 2;
const int ISF_MODEL				= 4;
const int ISF_STATUS 			= 8;
    const int ITS_STAYWEP 		= 1;
    const int ITS_ANIMATE1 		= 2;
    const int ITS_ANIMATE2 		= 4;
    const int ITS_AVAILABLE 	= 8;
    const int ITS_ALLOWFB 		= 16;
    const int ITS_ALLOWSI 		= 32;
    const int ITS_POWERUP 		= 64;
const int ISF_COLORMAP 			= 16;
const int ISF_DROP 				= 32;
const int ISF_ANGLES 			= 64;
const int ISF_SIZE 				= 128;

.int ItemStatus;

.float fade_start;
.float fade_end;

#ifdef CSQC

float  autocvar_cl_animate_items = 1;
float  autocvar_cl_ghost_items = 0.45;
vector autocvar_cl_ghost_items_color = '-1 -1 -1';
float  autocvar_cl_fullbright_items = 0;
vector autocvar_cl_weapon_stay_color = '2 0.5 0.5';
float  autocvar_cl_weapon_stay_alpha = 0.75;
float  autocvar_cl_simple_items = 0;
string autocvar_cl_simpleitems_postfix = "_simple";
.float  spawntime;
.float  gravity;
.vector colormod;
void ItemDraw();

void ItemDrawSimple();

void ItemRead(float _IsNew);

#endif
#ifdef SVQC
spawnfunc(item_strength);
spawnfunc(item_invincible);
spawnfunc(item_armor_small);
spawnfunc(item_shells);
spawnfunc(item_bullets);
spawnfunc(item_rockets);

float autocvar_sv_simple_items;
bool ItemSend(entity to, int sf);


float have_pickup_item(void);

const float ITEM_RESPAWN_TICKS = 10;

#define ITEM_RESPAWNTIME(i)         ((i).respawntime + crandom() * (i).respawntimejitter)
	// range: respawntime - respawntimejitter .. respawntime + respawntimejitter
#define ITEM_RESPAWNTIME_INITIAL(i) (ITEM_RESPAWN_TICKS + random() * ((i).respawntime + (i).respawntimejitter - ITEM_RESPAWN_TICKS))
	// range: 10 .. respawntime + respawntimejitter

.float max_armorvalue;
.float pickup_anyway;

void Item_Show (entity e, float mode);

void Item_Respawn (void);

void Item_RespawnCountdown (void);
void Item_ScheduleRespawnIn(entity e, float t);

void Item_ScheduleRespawn(entity e);

void Item_ScheduleInitialRespawn(entity e);
float ITEM_MODE_NONE = 0;
float ITEM_MODE_HEALTH = 1;
float ITEM_MODE_ARMOR = 2;
float ITEM_MODE_FUEL = 3;
float Item_GiveAmmoTo(entity item, entity player, .float ammotype, float ammomax, float mode);

float Item_GiveTo(entity item, entity player);

void Item_Touch (void);

void Item_Reset();

void Item_FindTeam();
// Savage: used for item garbage-collection
// TODO: perhaps nice special effect?

bool ItemSend(entity to, int sf);
void ItemUpdate(entity item);

// pickup evaluation functions
// these functions decide how desirable an item is to the bots

float generic_pickupevalfunc(entity player, entity item);// {return item.bot_pickupbasevalue;} // WEAPONTODO

float weapon_pickupevalfunc(entity player, entity item);

float commodity_pickupevalfunc(entity player, entity item);

.float is_item;
.entity itemdef;
void StartItem (string itemmodel, string pickupsound, float defaultrespawntime, float defaultrespawntimejitter, string itemname, float itemid, float weaponid, float itemflags, float(entity player, entity item) pickupevalfunc, float pickupbasevalue);


void target_items_use (void);

const float OP_SET = 0;
const float OP_MIN = 1;
const float OP_MAX = 2;
const float OP_PLUS = 3;
const float OP_MINUS = 4;

float GiveWeapon(entity e, float wpn, float op, float val);

float GiveBit(entity e, .float fld, float bit, float op, float val);

float GiveValue(entity e, .float fld, float op, float val);

void GiveSound(entity e, float v0, float v1, float t, string snd_incr, string snd_decr);

void GiveRot(entity e, float v0, float v1, .float rotfield, float rottime, .float regenfield, float regentime);

#define PREGIVE_WEAPONS(e) WepSet save_weapons; save_weapons = e.weapons
#define PREGIVE(e,f) float save_##f; save_##f = (e).f
#define POSTGIVE_WEAPON(e,b,snd_incr,snd_decr) GiveSound((e), !!(save_weapons & WepSet_FromWeapon(b)), !!(e.weapons & WepSet_FromWeapon(b)), 0, snd_incr, snd_decr)
#define POSTGIVE_BIT(e,f,b,snd_incr,snd_decr) GiveSound((e), save_##f & (b), (e).f & (b), 0, snd_incr, snd_decr)
#define POSTGIVE_VALUE(e,f,t,snd_incr,snd_decr) GiveSound((e), save_##f, (e).f, t, snd_incr, snd_decr)
#define POSTGIVE_VALUE_ROT(e,f,t,rotfield,rottime,regenfield,regentime,snd_incr,snd_decr) GiveRot((e), save_##f, (e).f, rotfield, rottime, regenfield, regentime); GiveSound((e), save_##f, (e).f, t, snd_incr, snd_decr)

float GiveItems(entity e, float beginarg, float endarg);
#endif
#endif
