#pragma once

#include <server/defs.qh>
#include <server/g_world.qh>

#include <common/t_items.qh>

#include <server/mutators/_mod.qh>

#include <common/constants.qh>
#include <common/mapinfo.qh>
#include <common/turrets/all.qh>

#ifdef RELEASE
#define cvar_string_normal builtin_cvar_string
#define cvar_normal builtin_cvar
#else
string cvar_string_normal(string n)
{
	if (!(cvar_type(n) & CVAR_TYPEFLAG_EXISTS))
		backtrace(strcat("Attempt to access undefined cvar: ", n));
	return builtin_cvar_string(n);
}

float cvar_normal(string n)
{
	return stof(cvar_string_normal(n));
}
#endif
#define cvar_set_normal builtin_cvar_set

.vector dropped_origin;

entity eliminatedPlayers;
void EliminatedPlayers_Init(float(entity) isEliminated_func);

void write_recordmarker(entity pl, float tstart, float dt);

void play2all(string samp);

void play2team(float t, string filename);

void GetCvars_handleFloat(entity this, entity store, string thisname, float f, .float field, string name);

float spamsound(entity e, float chan, Sound samp, float vol, float _atten);

void GetCvars_handleString(entity this, entity store, string thisname, float f, .string field, string name);

void precache_all_playermodels(string pattern);

void soundat(entity e, vector o, float chan, string samp, float vol, float _atten);

void InitializeEntitiesRun();

void stopsoundto(float _dest, entity e, float chan);
void soundtoat(float _dest, entity e, vector o, float chan, string samp, float vol, float _atten);

void droptofloor(entity this);

void attach_sameorigin(entity e, entity to, string tag);

void crosshair_trace(entity pl);

void crosshair_trace_plusvisibletriggers(entity pl);
void WarpZone_crosshair_trace_plusvisibletriggers(entity pl);
void crosshair_trace_plusvisibletriggers__is_wz(entity pl, bool is_wz);

void detach_sameorigin(entity e);

void follow_sameorigin(entity e, entity to);

string formatmessage(entity this, string msg);

/** print(), but only print if the server is not local */
void dedicated_print(string input);

void GameLogEcho(string s);

void GameLogInit();

void GameLogClose();

void GetCvars(entity this, entity store, int f);

string GetMapname();

float isPushable(entity e);

float LostMovetypeFollow(entity ent);

string uid2name(string myuid);

float MoveToRandomLocationWithinBounds(entity e, vector boundmin, vector boundmax, float goodcontents, float badcontents, float badsurfaceflags, float attempts, float maxaboveground, float minviewdistance);

float MoveToRandomMapLocation(entity e, float goodcontents, float badcontents, float badsurfaceflags, float attempts, float maxaboveground, float minviewdistance);

string NearestLocation(vector p);

string AmmoNameFromWeaponentity(Weapon wep);

void play2(entity e, string filename);

string playername(entity p, bool team_colorize);

void precache();

void remove_safely(entity e);

void remove_unsafely(entity e);

void SetMovetypeFollow(entity ent, entity e);

void soundto(float dest, entity e, float chan, string samp, float vol, float atten);

void stopsound(entity e, float chan);

float tracebox_hits_box(vector start, vector mi, vector ma, vector end, vector thmi, vector thma);

void traceline_antilag (entity source, vector v1, vector v2, float nomonst, entity forent, float lag);

void WarpZone_crosshair_trace(entity pl);

void WarpZone_traceline_antilag (entity source, vector v1, vector v2, float nomonst, entity forent, float lag);

#define IS_DEAD(s) ((s).deadflag != DEAD_NO)


#define ITEM_TOUCH_NEEDKILL() (((trace_dpstartcontents | trace_dphitcontents) & DPCONTENTS_NODROP) || (trace_dphitq3surfaceflags & Q3SURFACEFLAG_SKY))
#define ITEM_DAMAGE_NEEDKILL(dt) (((dt) == DEATH_HURTTRIGGER.m_id) || ((dt) == DEATH_SLIME.m_id) || ((dt) == DEATH_LAVA.m_id) || ((dt) == DEATH_SWAMP.m_id))

#define PROJECTILE_TOUCH(e,t) MACRO_BEGIN if (WarpZone_Projectile_Touch(e,t)) return; MACRO_END

#define CENTER_OR_VIEWOFS(ent) (ent.origin + (IS_PLAYER(ent) ? ent.view_ofs : ((ent.mins + ent.maxs) * 0.5)))

// copies a string to a tempstring (so one can strunzone it)
string strcat1(string s) = #115; // FRIK_FILE

float logfile_open;
float logfile;

/*
// NOTE: DO NOT USE THIS FUNCTION TOO OFTEN.
// IT WILL MOST PROBABLY DESTROY _ALL_ OTHER TEMP
// STRINGS AND TAKE QUITE LONG. haystack and needle MUST
// BE CONSTANT OR strzoneD!
float strstrofs(string haystack, string needle, float offset)
{
	float len, endpos;
	string found;
	len = strlen(needle);
	endpos = strlen(haystack) - len;
	while(offset <= endpos)
	{
		found = substring(haystack, offset, len);
		if(found == needle)
			return offset;
		offset = offset + 1;
	}
	return -1;
}
*/

const float NUM_NEAREST_ENTITIES = 4;
entity nearest_entity[NUM_NEAREST_ENTITIES];
float nearest_length[NUM_NEAREST_ENTITIES];


//#NO AUTOCVARS START

float g_pickup_shells_max;
float g_pickup_nails_max;
float g_pickup_rockets_max;
float g_pickup_cells_max;
float g_pickup_plasma_max;
float g_pickup_fuel_max;
float g_pickup_weapons_anyway;
float g_weaponarena;
WepSet g_weaponarena_weapons;
float g_weaponarena_random; // TODO
string g_weaponarena_list;
float g_weaponspeedfactor;
float g_weaponratefactor;
float g_weapondamagefactor;
float g_weaponforcefactor;
float g_weaponspreadfactor;

WepSet start_weapons;
WepSet start_weapons_default;
WepSet start_weapons_defaultmask;
int start_items;
float start_ammo_shells;
float start_ammo_nails;
float start_ammo_rockets;
float start_ammo_cells;
float start_ammo_plasma;
float start_ammo_fuel;
/// \brief Number of random start weapons to give to players.
int random_start_weapons_count;
/// \brief Holds a list of possible random start weapons.
string autocvar_g_random_start_weapons;
/// \brief Entity that contains amount of ammo to give with random start
/// weapons.
entity random_start_ammo;
float start_health;
float start_armorvalue;
WepSet warmup_start_weapons;
WepSet warmup_start_weapons_default;
WepSet warmup_start_weapons_defaultmask;
#define WARMUP_START_WEAPONS ((g_warmup_allguns == 1) ? (warmup_start_weapons & (weaponsInMap | start_weapons)) : warmup_start_weapons)
float warmup_start_ammo_shells;
float warmup_start_ammo_nails;
float warmup_start_ammo_rockets;
float warmup_start_ammo_cells;
float warmup_start_ammo_plasma;
float warmup_start_ammo_fuel;
float warmup_start_health;
float warmup_start_armorvalue;
float g_weapon_stay;

float want_weapon(entity weaponinfo, float allguns); // WEAPONTODO: what still needs done?
void readplayerstartcvars();

float sv_autotaunt;
float sv_taunt;

void readlevelcvars()
{
	if(cvar("sv_allow_fullbright"))
		serverflags |= SERVERFLAG_ALLOW_FULLBRIGHT;

	sv_clones = cvar("sv_clones");
	sv_foginterval = cvar("sv_foginterval");
	g_footsteps = cvar("g_footsteps");
	g_jetpack = cvar("g_jetpack");
	sv_maxidle = cvar("sv_maxidle");
	sv_maxidle_spectatorsareidle = cvar("sv_maxidle_spectatorsareidle");
	sv_maxidle_slots = cvar("sv_maxidle_slots");
	sv_maxidle_slots_countbots = cvar("sv_maxidle_slots_countbots");
	sv_autotaunt = cvar("sv_autotaunt");
	sv_taunt = cvar("sv_taunt");
	sv_ready_restart = cvar("sv_ready_restart");
	sv_ready_restart_after_countdown = cvar("sv_ready_restart_after_countdown");
	sv_ready_restart_repeatable = cvar("sv_ready_restart_repeatable");

	warmup_stage = cvar("g_warmup");
	warmup_limit = cvar("g_warmup_limit");
	g_warmup_allguns = cvar("g_warmup_allguns");
	g_warmup_allow_timeout = cvar("g_warmup_allow_timeout");

	if(cvar("g_campaign"))
		warmup_stage = 0; // no warmup during campaign

	g_pickup_respawntime_weapon = cvar("g_pickup_respawntime_weapon");
	g_pickup_respawntime_superweapon = cvar("g_pickup_respawntime_superweapon");
	g_pickup_respawntime_ammo = cvar("g_pickup_respawntime_ammo");
	g_pickup_respawntime_short = cvar("g_pickup_respawntime_short");
	g_pickup_respawntime_medium = cvar("g_pickup_respawntime_medium");
	g_pickup_respawntime_long = cvar("g_pickup_respawntime_long");
	g_pickup_respawntime_powerup = cvar("g_pickup_respawntime_powerup");
	g_pickup_respawntimejitter_weapon = cvar("g_pickup_respawntimejitter_weapon");
	g_pickup_respawntimejitter_superweapon = cvar("g_pickup_respawntimejitter_superweapon");
	g_pickup_respawntimejitter_ammo = cvar("g_pickup_respawntimejitter_ammo");
	g_pickup_respawntimejitter_short = cvar("g_pickup_respawntimejitter_short");
	g_pickup_respawntimejitter_medium = cvar("g_pickup_respawntimejitter_medium");
	g_pickup_respawntimejitter_long = cvar("g_pickup_respawntimejitter_long");
	g_pickup_respawntimejitter_powerup = cvar("g_pickup_respawntimejitter_powerup");

	g_weaponspeedfactor = cvar("g_weaponspeedfactor");
	g_weaponratefactor = cvar("g_weaponratefactor");
	g_weapondamagefactor = cvar("g_weapondamagefactor");
	g_weaponforcefactor = cvar("g_weaponforcefactor");
	g_weaponspreadfactor = cvar("g_weaponspreadfactor");

	g_pickup_shells = cvar("g_pickup_shells");
	g_pickup_shells_max = cvar("g_pickup_shells_max");
	g_pickup_nails = cvar("g_pickup_nails");
	g_pickup_nails_max = cvar("g_pickup_nails_max");
	g_pickup_rockets = cvar("g_pickup_rockets");
	g_pickup_rockets_max = cvar("g_pickup_rockets_max");
	g_pickup_cells = cvar("g_pickup_cells");
	g_pickup_cells_max = cvar("g_pickup_cells_max");
	g_pickup_plasma = cvar("g_pickup_plasma");
	g_pickup_plasma_max = cvar("g_pickup_plasma_max");
	g_pickup_fuel = cvar("g_pickup_fuel");
	g_pickup_fuel_jetpack = cvar("g_pickup_fuel_jetpack");
	g_pickup_fuel_max = cvar("g_pickup_fuel_max");
	g_pickup_armorsmall = cvar("g_pickup_armorsmall");
	g_pickup_armorsmall_max = cvar("g_pickup_armorsmall_max");
	g_pickup_armorsmall_anyway = cvar("g_pickup_armorsmall_anyway");
	g_pickup_armormedium = cvar("g_pickup_armormedium");
	g_pickup_armormedium_max = cvar("g_pickup_armormedium_max");
	g_pickup_armormedium_anyway = cvar("g_pickup_armormedium_anyway");
	g_pickup_armorbig = cvar("g_pickup_armorbig");
	g_pickup_armorbig_max = cvar("g_pickup_armorbig_max");
	g_pickup_armorbig_anyway = cvar("g_pickup_armorbig_anyway");
	g_pickup_armormega = cvar("g_pickup_armormega");
	g_pickup_armormega_max = cvar("g_pickup_armormega_max");
	g_pickup_armormega_anyway = cvar("g_pickup_armormega_anyway");
	g_pickup_healthsmall = cvar("g_pickup_healthsmall");
	g_pickup_healthsmall_max = cvar("g_pickup_healthsmall_max");
	g_pickup_healthsmall_anyway = cvar("g_pickup_healthsmall_anyway");
	g_pickup_healthmedium = cvar("g_pickup_healthmedium");
	g_pickup_healthmedium_max = cvar("g_pickup_healthmedium_max");
	g_pickup_healthmedium_anyway = cvar("g_pickup_healthmedium_anyway");
	g_pickup_healthbig = cvar("g_pickup_healthbig");
	g_pickup_healthbig_max = cvar("g_pickup_healthbig_max");
	g_pickup_healthbig_anyway = cvar("g_pickup_healthbig_anyway");
	g_pickup_healthmega = cvar("g_pickup_healthmega");
	g_pickup_healthmega_max = cvar("g_pickup_healthmega_max");
	g_pickup_healthmega_anyway = cvar("g_pickup_healthmega_anyway");

	g_pickup_ammo_anyway = cvar("g_pickup_ammo_anyway");
	g_pickup_weapons_anyway = cvar("g_pickup_weapons_anyway");

    g_weapon_stay = cvar(strcat("g_", GetGametype(), "_weapon_stay"));
    if(!g_weapon_stay)
        g_weapon_stay = cvar("g_weapon_stay");

    MUTATOR_CALLHOOK(ReadLevelCvars);

	if (!warmup_stage)
		game_starttime = time + cvar("g_start_delay");

	FOREACH(Weapons, it != WEP_Null, { it.wr_init(it); });

	readplayerstartcvars();
}

//#NO AUTOCVARS END

const int INITPRIO_FIRST 		= 0;
const int INITPRIO_GAMETYPE 		= 0;
const int INITPRIO_GAMETYPE_FALLBACK 	= 1;
const int INITPRIO_FINDTARGET 		= 10;
const int INITPRIO_DROPTOFLOOR 		= 20;
const int INITPRIO_SETLOCATION 		= 90;
const int INITPRIO_LINKDOORS 		= 91;
const int INITPRIO_LAST 		= 99;

.void(entity this) initialize_entity;
.int initialize_entity_order;
.entity initialize_entity_next;
entity initialize_entity_first;





bool sound_allowed(int dest, entity e);
void InitializeEntity(entity e, void(entity this) func, int order);

IntrusiveList g_ctrace_changed;
STATIC_INIT(g_ctrace_changed) { g_ctrace_changed = IL_NEW(); }
