#pragma once

#include <common/mutators/base.qh>

// register all possible hooks here

/** called when a player becomes observer, after shared setup */
#define EV_MakePlayerObserver(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(MakePlayerObserver, EV_MakePlayerObserver)

/** */
#define EV_PutClientInServer(i, o) \
	/** client wanting to spawn */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(PutClientInServer, EV_PutClientInServer);

/** called when a player spawns as player, after shared setup, before his weapon is chosen (so items may be changed in here) */
#define EV_PlayerSpawn(i, o) \
	/** player spawning */ i(entity, MUTATOR_ARGV_0_entity) \
    /** spot that was used, or NULL */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(PlayerSpawn, EV_PlayerSpawn);

/** called in reset_map */
#define EV_reset_map_global(i, o) \
    /**/
MUTATOR_HOOKABLE(reset_map_global, EV_reset_map_global);

/** called in reset_map */
#define EV_reset_map_players(i, o) \
    /**/
MUTATOR_HOOKABLE(reset_map_players, EV_reset_map_players);

/** returns 1 if clearing player score shall not be allowed */
#define EV_ForbidPlayerScore_Clear(i, o) \
    /**/
MUTATOR_HOOKABLE(ForbidPlayerScore_Clear, EV_ForbidPlayerScore_Clear);

/** called when a player disconnects */
#define EV_ClientDisconnect(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(ClientDisconnect, EV_ClientDisconnect);

/** called when a player dies to e.g. remove stuff he was carrying. */
#define EV_PlayerDies(i, o) \
	/** inflictor  		*/ i(entity, MUTATOR_ARGV_0_entity) \
    /** attacker    	*/ i(entity, MUTATOR_ARGV_1_entity) \
    /** target    		*/ i(entity, MUTATOR_ARGV_2_entity) \
    /** deathtype     	*/ i(float,  MUTATOR_ARGV_3_float) \
    /** damage          */ i(float,  MUTATOR_ARGV_4_float) \
    /** damage  		*/ o(float,  MUTATOR_ARGV_4_float) \
    /**/
MUTATOR_HOOKABLE(PlayerDies, EV_PlayerDies);

/** called when a player dies to e.g. remove stuff he was carrying */
#define EV_PlayHitsound(i, o) \
    /** victim */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(PlayHitsound, EV_PlayHitsound);

/** called when a weapon sound is about to be played, allows custom paths etc. */
#define EV_WeaponSound(i, o) \
    /** sound       */ i(string, MUTATOR_ARGV_0_string) \
    /** output      */ i(string, MUTATOR_ARGV_1_string) \
    /**/               o(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(WeaponSound, EV_WeaponSound);

/** called when an item model is about to be set, allows custom paths etc. */
#define EV_ItemModel(i, o) \
    /** model       */ i(string, MUTATOR_ARGV_0_string) \
    /** output      */ i(string, MUTATOR_ARGV_1_string) \
    /**/               o(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(ItemModel, EV_ItemModel);

/** called when someone was fragged by "self", and is expected to change frag_score to adjust scoring for the kill */
#define EV_GiveFragsForKill(i, o) \
    /** attacker   */ i(entity, MUTATOR_ARGV_0_entity) \
    /** target     */ i(entity, MUTATOR_ARGV_1_entity) \
    /** frag score */ i(float, MUTATOR_ARGV_2_float) \
    /**            */ o(float, MUTATOR_ARGV_2_float) \
    /**/
MUTATOR_HOOKABLE(GiveFragsForKill, EV_GiveFragsForKill);

/** called when the match ends */
MUTATOR_HOOKABLE(MatchEnd, EV_NO_ARGS);

/** should adjust number to contain the team count */
#define EV_GetTeamCount(i, o) \
    /** number of teams    */ i(float, MUTATOR_ARGV_0_float) \
    /**/                      o(float, MUTATOR_ARGV_0_float) \
    /** team entity name   */ i(string, MUTATOR_ARGV_1_string) \
    /**/                      o(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(GetTeamCount, EV_GetTeamCount);

/** copies variables for spectating "spectatee" to "this" */
#define EV_SpectateCopy(i, o) \
    /** spectatee   */ i(entity, MUTATOR_ARGV_0_entity) \
    /** client      */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(SpectateCopy, EV_SpectateCopy);

/** called when formatting a chat message to replace fancy functions */
#define EV_FormatMessage(i, o) \
    /** player        */ i(entity, MUTATOR_ARGV_0_entity) \
    /** escape        */ i(string, MUTATOR_ARGV_1_string) \
    /** replacement   */ i(string, MUTATOR_ARGV_2_string) \
    /**/                 o(string, MUTATOR_ARGV_2_string) \
    /** message       */ i(string, MUTATOR_ARGV_3_string) \
    /**/
MUTATOR_HOOKABLE(FormatMessage, EV_FormatMessage);

/** returns true if throwing the current weapon shall not be allowed */
#define EV_ForbidThrowCurrentWeapon(i, o) \
    /** player        */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(ForbidThrowCurrentWeapon, EV_ForbidThrowCurrentWeapon);

/** returns true if dropping the current weapon shall not be allowed at any time including death */
#define EV_ForbidDropCurrentWeapon(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(ForbidDropCurrentWeapon, EV_ForbidDropCurrentWeapon);

/**  */
MUTATOR_HOOKABLE(SetDefaultAlpha, EV_NO_ARGS);

/** allows changing attack rate */
#define EV_WeaponRateFactor(i, o) \
    /** weapon rate */  i(float, MUTATOR_ARGV_0_float) \
    /**/                o(float, MUTATOR_ARGV_0_float) \
    /** player */       i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(WeaponRateFactor, EV_WeaponRateFactor);

/** allows changing weapon speed (projectiles mostly) */
#define EV_WeaponSpeedFactor(i, o) \
    /** weapon speed */ i(float, MUTATOR_ARGV_0_float) \
    /**/                o(float, MUTATOR_ARGV_0_float) \
    /** player */       i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(WeaponSpeedFactor, EV_WeaponSpeedFactor);

/** adjusts {warmup_}start_{items,weapons,ammo_{cells,plasma,rockets,nails,shells,fuel}} */
MUTATOR_HOOKABLE(SetStartItems, EV_NO_ARGS);

/** called every frame. customizes the waypoint for spectators */
#define EV_CustomizeWaypoint(i, o) \
    /** waypoint                        */ i(entity, MUTATOR_ARGV_0_entity) \
    /** player; other.enemy = spectator */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(CustomizeWaypoint, EV_CustomizeWaypoint);

/**
 * checks if the current item may be spawned (.items and .weapons may be read and written to, as well as the ammo_ fields)
 * return error to request removal
 */
#define EV_FilterItem(i, o) \
    /** item        */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(FilterItem, EV_FilterItem);

/** return error to request removal */
#define EV_TurretSpawn(i, o) \
    /** turret        */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(TurretSpawn, EV_TurretSpawn);

/** return error to not attack */
#define EV_TurretFire(i, o) \
    /** turret        */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(TurretFire, EV_TurretFire);

/** return error to not attack */
#define EV_Turret_CheckFire(i, o) \
    /** turret                      */ i(entity, MUTATOR_ARGV_0_entity) \
    /** to fire or not to fire      */ o(bool, MUTATOR_ARGV_1_bool) \
    /**/
MUTATOR_HOOKABLE(Turret_CheckFire, EV_Turret_CheckFire);

/** return error to prevent entity spawn, or modify the entity */
#define EV_OnEntityPreSpawn(i, o) \
   /** entity  */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(OnEntityPreSpawn, EV_OnEntityPreSpawn);

/** runs in the event loop for players; is called for ALL player entities, also bots, also the dead, or spectators */
#define EV_PlayerPreThink(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(PlayerPreThink, EV_PlayerPreThink);

/** TODO change this into a general PlayerPostThink hook? */
#define EV_GetPressedKeys(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(GetPressedKeys, EV_GetPressedKeys);

/** is meant to call GetCvars_handle*(get_cvars_s, get_cvars_f, cvarfield, "cvarname") for cvars this mutator needs from the client */
#define EV_GetCvars(i, o) \
    /**/ i(float, get_cvars_f) \
    /**/ i(string, get_cvars_s) \
    /**/
float get_cvars_f;
string get_cvars_s;
MUTATOR_HOOKABLE(GetCvars, EV_NO_ARGS); // NOTE: Can't use EV_GetCvars because of `SZ_GetSpace: overflow`

/** can edit any "just fired" projectile */
#define EV_EditProjectile(i, o) \
    /** projectile owner */ i(entity, MUTATOR_ARGV_0_entity) \
    /** projectile */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(EditProjectile, EV_EditProjectile);

/** called when a monster spawns */
#define EV_MonsterSpawn(i, o) \
    /** monster */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(MonsterSpawn, EV_MonsterSpawn);

/** called when a monster dies */
#define EV_MonsterDies(i, o) \
    /** target       */ i(entity, MUTATOR_ARGV_0_entity) \
    /** attacker     */ i(entity, MUTATOR_ARGV_1_entity) \
    /** deathtype    */ i(float, MUTATOR_ARGV_2_float) \
    /**/
MUTATOR_HOOKABLE(MonsterDies, EV_MonsterDies);

/** called when a monster dies */
#define EV_MonsterRemove(i, o) \
    /** monster */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(MonsterRemove, EV_MonsterRemove);

/** called when a monster wants to respawn */
#define EV_MonsterRespawn(i, o) \
    /** monster */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(MonsterRespawn, EV_MonsterRespawn);

/** called when a monster is dropping loot */
#define EV_MonsterDropItem(i, o) \
    /* monster */                          i(entity, MUTATOR_ARGV_0_entity) \
    /* item (can be removed or changed) */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/                                   o(entity, MUTATOR_ARGV_1_entity) \
    /* attacker */                         i(entity, MUTATOR_ARGV_2_entity) \
    /**/
.void(entity this) monster_loot;
MUTATOR_HOOKABLE(MonsterDropItem, EV_MonsterDropItem);

/**
 * called when a monster moves
 * returning true makes the monster stop
 */
#define EV_MonsterMove(i, o) \
    /** monster */       i(entity, MUTATOR_ARGV_0_entity) \
    /** run speed */     i(float, MUTATOR_ARGV_1_float) \
    /**/                 o(float, MUTATOR_ARGV_1_float) \
    /** walk speed */    i(float, MUTATOR_ARGV_2_float) \
    /**/                 o(float, MUTATOR_ARGV_2_float) \
    /** move target */   i(entity, MUTATOR_ARGV_3_entity) \
    /**/
MUTATOR_HOOKABLE(MonsterMove, EV_MonsterMove);

/** called when a monster looks for another target */
MUTATOR_HOOKABLE(MonsterFindTarget, EV_NO_ARGS);

/** called to change a random monster to a miniboss */
#define EV_MonsterCheckBossFlag(i, o) \
    /** monster */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(MonsterCheckBossFlag, EV_MonsterCheckBossFlag);

/**
 * called when a player tries to spawn a monster
 * return 1 to prevent spawning
 * NOTE: requires reason if disallowed
 */
 #define EV_AllowMobSpawning(i, o) \
    /** caller */ i(entity, MUTATOR_ARGV_0_entity) \
    /** reason */ o(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(AllowMobSpawning, EV_AllowMobSpawning);

/** called when a player gets damaged to e.g. remove stuff he was carrying. */
#define EV_PlayerDamage_SplitHealthArmor(i, o) \
	/** inflictor  		*/ i(entity, MUTATOR_ARGV_0_entity) \
    /** attacker    	*/ i(entity, MUTATOR_ARGV_1_entity) \
    /** target    		*/ i(entity, MUTATOR_ARGV_2_entity) \
    /** force (no out)  */ i(vector, MUTATOR_ARGV_3_vector) \
    /** damage take     */ i(float,  MUTATOR_ARGV_4_float) \
    /** damage take  	*/ o(float,  MUTATOR_ARGV_4_float) \
    /** damage save     */ i(float,  MUTATOR_ARGV_5_float) \
    /** damage save 	*/ o(float,  MUTATOR_ARGV_5_float) \
    /** deathtype 		*/ i(float,  MUTATOR_ARGV_6_float) \
    /** damage 		    */ i(float,  MUTATOR_ARGV_7_float) \
    /**/
MUTATOR_HOOKABLE(PlayerDamage_SplitHealthArmor, EV_PlayerDamage_SplitHealthArmor);

/**
 * called to adjust damage and force values which are applied to the player, used for e.g. strength damage/force multiplier
 * i'm not sure if I should change this around slightly (Naming of the entities, and also how they're done in g_damage).
 */
#define EV_PlayerDamage_Calculate(i, o) \
    /** inflictor  		*/ i(entity, MUTATOR_ARGV_0_entity) \
    /** attacker    	*/ i(entity, MUTATOR_ARGV_1_entity) \
    /** target    		*/ i(entity, MUTATOR_ARGV_2_entity) \
    /** deathtype     	*/ i(float,  MUTATOR_ARGV_3_float) \
    /** damage          */ i(float,  MUTATOR_ARGV_4_float) \
    /** damage  		*/ o(float,  MUTATOR_ARGV_4_float) \
    /** mirrordamage    */ i(float,  MUTATOR_ARGV_5_float) \
    /** mirrordamage 	*/ o(float,  MUTATOR_ARGV_5_float) \
    /** force           */ i(vector, MUTATOR_ARGV_6_vector) \
    /** force 			*/ o(vector, MUTATOR_ARGV_6_vector) \
    /**/
MUTATOR_HOOKABLE(PlayerDamage_Calculate, EV_PlayerDamage_Calculate);

/**
 * Called when a player is damaged
 */
#define EV_PlayerDamaged(i, o) \
    /** attacker  */ i(entity, MUTATOR_ARGV_0_entity) \
    /** target    */ i(entity, MUTATOR_ARGV_1_entity) \
    /** health    */ i(int,    MUTATOR_ARGV_2_int) \
    /** armor     */ i(int,    MUTATOR_ARGV_3_int) \
    /** location  */ i(vector, MUTATOR_ARGV_4_vector) \
    /** deathtype */ i(int,    MUTATOR_ARGV_5_int) \
    /**/
MUTATOR_HOOKABLE(PlayerDamaged, EV_PlayerDamaged);

/**
 * Called by W_DecreaseAmmo
 */
#define EV_W_DecreaseAmmo(i, o) \
    /** actor */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(W_DecreaseAmmo, EV_W_DecreaseAmmo);

/**
 * Called by W_Reload
 */
#define EV_W_Reload(i, o) \
    /** actor */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(W_Reload, EV_W_Reload);

/** called at the end of player_powerups() in cl_client.qc, used for manipulating the values which are set by powerup items. */
#define EV_PlayerPowerups(i, o) \
    /** player */    i(entity, MUTATOR_ARGV_0_entity) \
    /** old items */ i(int, MUTATOR_ARGV_1_int) \
    /**/
MUTATOR_HOOKABLE(PlayerPowerups, EV_PlayerPowerups);

/**
 * called every player think frame
 * return 1 to disable regen
 */
 #define EV_PlayerRegen(i, o) \
    /** player */               i(entity, MUTATOR_ARGV_0_entity) \
    /** max_mod */              i(float, MUTATOR_ARGV_1_float) \
    /**/                        o(float, MUTATOR_ARGV_1_float) \
    /** regen_mod */            i(float, MUTATOR_ARGV_2_float) \
    /**/                        o(float, MUTATOR_ARGV_2_float) \
    /** rot_mod */              i(float, MUTATOR_ARGV_3_float) \
    /**/                        o(float, MUTATOR_ARGV_3_float) \
    /** limit_mod */            i(float, MUTATOR_ARGV_4_float) \
    /**/                        o(float, MUTATOR_ARGV_4_float) \
    /** health_regen */         i(float, MUTATOR_ARGV_5_float) \
    /**/                        o(float, MUTATOR_ARGV_5_float) \
    /** health_regenlinear */   i(float, MUTATOR_ARGV_6_float) \
    /**/                        o(float, MUTATOR_ARGV_6_float) \
    /** health_rot */           i(float, MUTATOR_ARGV_7_float) \
    /**/                        o(float, MUTATOR_ARGV_7_float) \
    /** health_rotlinear */     i(float, MUTATOR_ARGV_8_float) \
    /**/                        o(float, MUTATOR_ARGV_8_float) \
    /** health_stable */        i(float, MUTATOR_ARGV_9_float) \
    /**/                        o(float, MUTATOR_ARGV_9_float) \
    /** health_rotstable */     i(float, MUTATOR_ARGV_10_float) \
    /**/                        o(float, MUTATOR_ARGV_10_float) \
    /**/
MUTATOR_HOOKABLE(PlayerRegen, EV_PlayerRegen);

/**
 * called when the use key is pressed
 * if MUTATOR_RETURNVALUE is 1, don't do anything
 * return 1 if the use key actually did something
 */
 #define EV_PlayerUseKey(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(PlayerUseKey, EV_PlayerUseKey);

/**
 * called when a client command is parsed
 * NOTE: hooks MUST start with if (MUTATOR_RETURNVALUE) return false;
 * NOTE: return true if you handled the command, return false to continue handling
 * NOTE: THESE HOOKS MUST NEVER EVER CALL tokenize()
 * // example:
 * MUTATOR_HOOKFUNCTION(foo_SV_ParseClientCommand)
 * {
 *     if (MUTATOR_RETURNVALUE) // command was already handled?
 *         return false;
 *     if (cmd_name == "echocvar" && cmd_argc >= 2)
 *     {
 *         print(cvar_string(argv(1)), "\n");
 *         return true;
 *     }
 *     if (cmd_name == "echostring" && cmd_argc >= 2)
 *     {
 *         print(substring(cmd_string, argv_start_index(1), argv_end_index(-1) - argv_start_index(1)), "\n");
 *         return true;
 *     }
 *     return false;
 * }
 */
#define EV_SV_ParseClientCommand(i, o) \
 	/** client sending the command */       i(entity, MUTATOR_ARGV_0_entity) \
    /** command name */                     i(string, MUTATOR_ARGV_1_string) \
 	/** argc (also, argv() can be used) */  i(int, MUTATOR_ARGV_2_int) \
 	/** whole command, use only if you really have to */ i(string, MUTATOR_ARGV_3_string) \
    /**/
MUTATOR_HOOKABLE(SV_ParseClientCommand, EV_SV_ParseClientCommand);

/** please read EV_SV_ParseClientCommand description before using */
#define EV_SV_ParseServerCommand(i, o) \
   /** command name */ i(string, MUTATOR_ARGV_0_string) \
 	/** argc (also, argv() can be used) */ i(int, MUTATOR_ARGV_1_int) \
 	/** whole command, use only if you really have to */ i(string, MUTATOR_ARGV_2_string) \
    /**/
MUTATOR_HOOKABLE(SV_ParseServerCommand, EV_SV_ParseServerCommand);

/**
 * called when a spawnpoint is being evaluated
 * return 1 to make the spawnpoint unusable
 */
#define EV_Spawn_Score(i, o) \
    /** player wanting to spawn */ i(entity, MUTATOR_ARGV_0_entity) \
    /** spot to be evaluated */ i(entity, MUTATOR_ARGV_1_entity) \
    /** spot score, _x is priority, _y is "distance" */ i(vector, MUTATOR_ARGV_2_vector) \
    /**/ o(vector, MUTATOR_ARGV_2_vector) \
    /**/
MUTATOR_HOOKABLE(Spawn_Score, EV_Spawn_Score);

/** runs globally each server frame */
MUTATOR_HOOKABLE(SV_StartFrame, EV_NO_ARGS);

#define EV_SetModname(i, o) \
    /** name of the mutator/mod if it warrants showing as such in the server browser */ \
    /**/ o(string, MUTATOR_ARGV_0_string) \
    /**/
MUTATOR_HOOKABLE(SetModname, EV_SetModname);

/**
 * called for each item being spawned on a map, including dropped weapons
 * return 1 to remove an item
 */
#define EV_Item_Spawn(i, o) \
    /** item */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(Item_Spawn, EV_Item_Spawn);

#define EV_SetWeaponreplace(i, o) \
    /** map entity */  i(entity, MUTATOR_ARGV_0_entity) \
    /** weapon info */ i(entity, MUTATOR_ARGV_1_entity) \
    /** replacement */ i(string, MUTATOR_ARGV_2_string) \
    /**/               o(string, MUTATOR_ARGV_2_string) \
    /**/
MUTATOR_HOOKABLE(SetWeaponreplace, EV_SetWeaponreplace);

/** called when an item is about to respawn */
#define EV_Item_RespawnCountdown(i, o) \
    /** item name */   i(string, MUTATOR_ARGV_0_string) \
    /**/               o(string, MUTATOR_ARGV_0_string) \
    /** item colour */ i(vector, MUTATOR_ARGV_1_vector) \
    /**/               o(vector, MUTATOR_ARGV_1_vector) \
    /**/
MUTATOR_HOOKABLE(Item_RespawnCountdown, EV_Item_RespawnCountdown);

/** called when a bot checks a target to attack */
#define EV_BotShouldAttack(i, o) \
    /** bot */    i(entity, MUTATOR_ARGV_0_entity) \
    /** target */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(BotShouldAttack, EV_BotShouldAttack);

/**
 * called whenever a player goes through a portal gun teleport
 * allows you to strip a player of an item if they go through the teleporter to help prevent cheating
 */
#define EV_PortalTeleport(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(PortalTeleport, EV_PortalTeleport);

/**
 * called whenever a player uses impulse 33 (help me) in cl_impulse.qc
 * normally help me ping uses .waypointsprite_attachedforcarrier,
 * but if your mutator uses something different then you can handle it
 * in a special manner using this hook
 */
#define EV_HelpMePing(i, o) \
    /** the player who pressed impulse 33 */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(HelpMePing, EV_HelpMePing);

/**
 * called when a vehicle initializes
 * return true to remove the vehicle
 */
#define EV_VehicleSpawn(i, o) \
    /** vehicle */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(VehicleSpawn, EV_VehicleSpawn);

/**
 * called when a player enters a vehicle
 * allows mutators to set special settings in this event
 */
#define EV_VehicleEnter(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /** vehicle */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(VehicleEnter, EV_VehicleEnter);

/**
 * called when a player touches a vehicle
 * return true to stop player from entering the vehicle
 */
#define EV_VehicleTouch(i, o) \
    /** vehicle */ i(entity, MUTATOR_ARGV_0_entity) \
    /** player */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(VehicleTouch, EV_VehicleTouch);

/**
 * called when a player exits a vehicle
 * allows mutators to set special settings in this event
 */
#define EV_VehicleExit(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /** vehicle */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(VehicleExit, EV_VehicleExit);

/** called when a speedrun is aborted and the player is teleported back to start position */
#define EV_AbortSpeedrun(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(AbortSpeedrun, EV_AbortSpeedrun);

/** called at when a item is touched. Called early, can edit item properties. */
#define EV_ItemTouch(i, o) \
    /** item */    i(entity, MUTATOR_ARGV_0_entity) \
    /** toucher */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/           o(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(ItemTouch, EV_ItemTouch);

enum {
	MUT_ITEMTOUCH_CONTINUE, // return this flag to make the function continue as normal
	MUT_ITEMTOUCH_RETURN, // return this flag to make the function return (handled entirely by mutator)
	MUT_ITEMTOUCH_PICKUP // return this flag to have the item "picked up" and taken even after mutator handled it
};

/** called at when a player connect */
#define EV_ClientConnect(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(ClientConnect, EV_ClientConnect);

#define EV_HavocBot_ChooseRole(i, o) \
    /** bot */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(HavocBot_ChooseRole, EV_HavocBot_ChooseRole);

/** called when a target is checked for accuracy */
#define EV_AccuracyTargetValid(i, o) \
    /** attacker */ i(entity, MUTATOR_ARGV_0_entity) \
    /** target */ i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(AccuracyTargetValid, EV_AccuracyTargetValid);
enum {
	MUT_ACCADD_VALID, // return this flag to make the function continue if target is a client
	MUT_ACCADD_INVALID, // return this flag to make the function always continue
	MUT_ACCADD_INDIFFERENT // return this flag to make the function always return
};

/** Called when clearing the global parameters for a model */
MUTATOR_HOOKABLE(ClearModelParams, EV_NO_ARGS);

/** Called when getting the global parameters for a model */
#define EV_GetModelParams(i, o) \
    /** input */   i(string, MUTATOR_ARGV_0_string) \
    /** command */ i(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(GetModelParams, EV_GetModelParams);

/** called when a bullet has hit a target */
#define EV_FireBullet_Hit(i, o) \
    /** player */       i(entity, MUTATOR_ARGV_0_entity) \
    /** targ */         i(entity, MUTATOR_ARGV_1_entity) \
    /** start pos */    i(vector, MUTATOR_ARGV_2_vector) \
    /** end pos */      i(vector, MUTATOR_ARGV_3_vector) \
    /** damage */       i(float, MUTATOR_ARGV_4_float) \
    /**/                o(float, MUTATOR_ARGV_4_float) \
    /**/
MUTATOR_HOOKABLE(FireBullet_Hit, EV_FireBullet_Hit);

#define EV_FixPlayermodel(i, o) \
    /** model */    i(string, MUTATOR_ARGV_0_string) \
    /**/            o(string, MUTATOR_ARGV_0_string) \
    /** skin */     i(int, MUTATOR_ARGV_1_int) \
    /**/            o(int, MUTATOR_ARGV_1_int) \
    /** player */   i(entity, MUTATOR_ARGV_2_entity) \
    /**/
MUTATOR_HOOKABLE(FixPlayermodel, EV_FixPlayermodel);

/** Return error to play frag remaining announcements */
MUTATOR_HOOKABLE(Scores_CountFragsRemaining, EV_NO_ARGS);

#define EV_GrappleHookThink(i, o) \
    /** hook */                i(entity, MUTATOR_ARGV_0_entity) \
    /** tarzan */              i(int, MUTATOR_ARGV_1_int) \
    /**/                       o(int, MUTATOR_ARGV_1_int) \
    /** pulling entity */      i(entity, MUTATOR_ARGV_2_entity) \
    /**/                       o(entity, MUTATOR_ARGV_2_entity) \
    /** velocity multiplier */ i(float, MUTATOR_ARGV_3_float) \
    /**/                       o(float, MUTATOR_ARGV_3_float) \
    /**/
MUTATOR_HOOKABLE(GrappleHookThink, EV_GrappleHookThink);

#define EV_BuffModel_Customize(i, o) \
    /** buff */    i(entity, MUTATOR_ARGV_0_entity) \
    /** player */  i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(BuffModel_Customize, EV_BuffModel_Customize);

/** called at when a buff is touched. Called early, can edit buff properties. */
#define EV_BuffTouch(i, o) \
    /** buff */    i(entity, MUTATOR_ARGV_0_entity) \
    /** player */  i(entity, MUTATOR_ARGV_1_entity) \
    /**/           o(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(BuffTouch, EV_BuffTouch);

MUTATOR_HOOKABLE(SetNewParms, EV_NO_ARGS);

MUTATOR_HOOKABLE(SetChangeParms, EV_NO_ARGS);

MUTATOR_HOOKABLE(DecodeLevelParms, EV_NO_ARGS);

#define EV_GetRecords(i, o) \
    /** page */           i(int, MUTATOR_ARGV_1_int) \
    /** record list */    i(string, MUTATOR_ARGV_1_string) \
    /**/                  o(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(GetRecords, EV_GetRecords);

#define EV_Race_FinalCheckpoint(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(Race_FinalCheckpoint, EV_Race_FinalCheckpoint);

/** called when player triggered kill (or is changing teams), return error to not do anything */
#define EV_ClientKill(i, o) \
    /** player */        i(entity, MUTATOR_ARGV_0_entity) \
    /** kill delay */    i(float, MUTATOR_ARGV_1_float) \
    /**/                 o(float, MUTATOR_ARGV_1_float) \
    /**/
MUTATOR_HOOKABLE(ClientKill, EV_ClientKill);

#define EV_FixClientCvars(i, o) \
    /** player */        i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(FixClientCvars, EV_FixClientCvars);

#define EV_SpectateSet(i, o) \
    /** client */    i(entity, MUTATOR_ARGV_0_entity) \
    /** target */    i(entity, MUTATOR_ARGV_1_entity) \
    /**/             o(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(SpectateSet, EV_SpectateSet);

#define EV_SpectateNext(i, o) \
    /** client */    i(entity, MUTATOR_ARGV_0_entity) \
    /** target */    i(entity, MUTATOR_ARGV_1_entity) \
    /**/             o(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(SpectateNext, EV_SpectateNext);

#define EV_SpectatePrev(i, o) \
    /** client */    i(entity, MUTATOR_ARGV_0_entity) \
    /** target */    i(entity, MUTATOR_ARGV_1_entity) \
    /**/             o(entity, MUTATOR_ARGV_1_entity) \
	/** first */     i(entity, MUTATOR_ARGV_2_entity) \
    /**/
MUTATOR_HOOKABLE(SpectatePrev, EV_SpectatePrev);

enum {
    MUT_SPECPREV_CONTINUE, // return this flag to make the function continue as normal
    MUT_SPECPREV_RETURN, // return this flag to make the function return (handled entirely by mutator)
    MUT_SPECPREV_FOUND // return this flag to make the function continue without default functions (handled mostly by mutator)
};

/** called when player triggered kill (or is changing teams), return error to not do anything */
#define EV_Bot_FixCount(i, o) \
	/** active real players */  i(int, MUTATOR_ARGV_0_int) \
	/**/     					o(int, MUTATOR_ARGV_0_int) \
    /** real players */    		i(int, MUTATOR_ARGV_1_int) \
    /**/    					o(int, MUTATOR_ARGV_1_int) \
    /**/
MUTATOR_HOOKABLE(Bot_FixCount, EV_Bot_FixCount);

#define EV_ClientCommand_Spectate(i, o) \
    /** player */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(ClientCommand_Spectate, EV_ClientCommand_Spectate);

enum {
    MUT_SPECCMD_CONTINUE, // return this flag to make the function continue as normal
    MUT_SPECCMD_RETURN, // return this flag to make the function return (don't spectate)
    MUT_SPECCMD_FORCE // return this flag to force the player to spectate, even if they're not a player
};

#define EV_CheckRules_World(i, o) \
    /** status */    i(float, MUTATOR_ARGV_0_float) \
    /**/             o(float, MUTATOR_ARGV_0_float) \
    /* time limit */ i(float, MUTATOR_ARGV_1_float) \
    /* frag limit */ i(float, MUTATOR_ARGV_2_float) \
    /**/
MUTATOR_HOOKABLE(CheckRules_World, EV_CheckRules_World);

#define EV_WantWeapon(i, o) \
    /** weapon info entity */    i(entity, MUTATOR_ARGV_0_entity) \
    /** do want? */              i(float, MUTATOR_ARGV_1_float) \
    /**/                         o(float, MUTATOR_ARGV_1_float) \
    /** want all guns */         i(bool, MUTATOR_ARGV_2_bool) \
    /**/                         o(bool, MUTATOR_ARGV_2_bool) \
    /** want mutator blocked */  i(bool, MUTATOR_ARGV_3_bool) \
    /**/                         o(bool, MUTATOR_ARGV_3_bool) \
    /**/
MUTATOR_HOOKABLE(WantWeapon, EV_WantWeapon);

#define EV_AddPlayerScore(i, o) \
    /** score field */  i(int, MUTATOR_ARGV_0_int) \
    /** score */        i(float, MUTATOR_ARGV_1_float) \
    /**/                o(float, MUTATOR_ARGV_1_float) \
    /** player */       i(entity, MUTATOR_ARGV_2_entity) \
    /**/
MUTATOR_HOOKABLE(AddPlayerScore, EV_AddPlayerScore);

#define EV_GetPlayerStatus(i, o) \
    /** player */    i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(GetPlayerStatus, EV_GetPlayerStatus);

#define EV_SetWeaponArena(i, o) \
    /** arena */     i(string, MUTATOR_ARGV_0_string) \
    /**/             o(string, MUTATOR_ARGV_0_string) \
    /**/
MUTATOR_HOOKABLE(SetWeaponArena, EV_SetWeaponArena);

#define EV_DropSpecialItems(i, o) \
    /** target */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(DropSpecialItems, EV_DropSpecialItems);

/**
 * called when an admin tries to kill all monsters
 * return 1 to prevent spawning
 */
#define EV_AllowMobButcher(i, o) \
    /** reason */ o(string, MUTATOR_ARGV_0_string) \
    /**/
MUTATOR_HOOKABLE(AllowMobButcher, EV_AllowMobButcher);

MUTATOR_HOOKABLE(ReadLevelCvars, EV_NO_ARGS);

#define EV_SendWaypoint(i, o) \
	/** waypoint */     i(entity, MUTATOR_ARGV_0_entity) \
	/** to */     		i(entity, MUTATOR_ARGV_1_entity) \
	/** send flags */   i(int, MUTATOR_ARGV_2_int) \
	/**/   				o(int, MUTATOR_ARGV_2_int) \
	/** wp flag */      i(int, MUTATOR_ARGV_3_int) \
	/**/   				o(int, MUTATOR_ARGV_3_int) \
    /**/
MUTATOR_HOOKABLE(SendWaypoint, EV_SendWaypoint);

#define EV_TurretValidateTarget(i, o) \
    /** turret */          i(entity, MUTATOR_ARGV_0_entity) \
    /** target */          i(entity, MUTATOR_ARGV_1_entity) \
    /** validate flags */  i(int, MUTATOR_ARGV_2_int) \
    /** target score */    o(float, MUTATOR_ARGV_3_float) \
    /**/
MUTATOR_HOOKABLE(TurretValidateTarget, EV_TurretValidateTarget);

#define EV_TurretThink(i, o) \
    /** turret */ i(entity, MUTATOR_ARGV_0_entity) \
    /**/
MUTATOR_HOOKABLE(TurretThink, EV_TurretThink);

MUTATOR_HOOKABLE(Ent_Init, EV_NO_ARGS);

/** */
#define EV_PrepareExplosionByDamage(i, o) \
    /** projectile */ i(entity, MUTATOR_ARGV_0_entity) \
    /** attacker */   i(entity, MUTATOR_ARGV_1_entity) \
    /**/
MUTATOR_HOOKABLE(PrepareExplosionByDamage, EV_PrepareExplosionByDamage);

/** called when a monster model is about to be set, allows custom paths etc. */
#define EV_MonsterModel(i, o) \
	/** model */  i(string, MUTATOR_ARGV_0_string) \
	/** output */ i(string, MUTATOR_ARGV_1_string) \
	/**/ 		  o(string, MUTATOR_ARGV_1_string) \
    /**/
MUTATOR_HOOKABLE(MonsterModel, EV_MonsterModel);

/**/
#define EV_Player_ChangeTeam(i, o) \
    /** player */         i(entity, MUTATOR_ARGV_0_entity) \
	/** current team */   i(float, MUTATOR_ARGV_1_float) \
	/** new team */       i(float, MUTATOR_ARGV_2_float) \
    /**/
MUTATOR_HOOKABLE(Player_ChangeTeam, EV_Player_ChangeTeam);

/**/
#define EV_URI_GetCallback(i, o) \
	/** id */       i(float, MUTATOR_ARGV_0_float) \
	/** status */   i(float, MUTATOR_ARGV_1_float) \
	/** data */     i(string, MUTATOR_ARGV_2_string) \
    /**/
MUTATOR_HOOKABLE(URI_GetCallback, EV_URI_GetCallback);
