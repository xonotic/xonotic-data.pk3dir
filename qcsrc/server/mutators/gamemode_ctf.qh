#ifndef GAMEMODE_CTF_H
#define GAMEMODE_CTF_H
// these are needed since mutators are compiled last

#ifdef SVQC
// used in cheats.qc
void ctf_RespawnFlag(entity flag);

// score rule declarations
const int ST_CTF_CAPS = 1;
const int SP_CTF_CAPS = 4;
const int SP_CTF_CAPTIME = 5;
const int SP_CTF_PICKUPS = 6;
const int SP_CTF_DROPS = 7;
const int SP_CTF_FCKILLS = 8;
const int SP_CTF_RETURNS = 9;

// flag constants // for most of these, there is just one question to be asked: WHYYYYY?
#define FLAG_MIN (PL_MIN_CONST + '0 0 -13')
#define FLAG_MAX (PL_MAX_CONST + '0 0 -13')

const float FLAG_SCALE = 0.6;

const float FLAG_THINKRATE = 0.2;
const float FLAG_TOUCHRATE = 0.5;
const float WPFE_THINKRATE = 0.5;

const vector FLAG_DROP_OFFSET = ('0 0 32');
const vector FLAG_CARRY_OFFSET = ('-16 0 8');
#define FLAG_SPAWN_OFFSET ('0 0 1' * (PL_MAX_CONST.z - 13))
const vector FLAG_WAYPOINT_OFFSET = ('0 0 64');
const vector FLAG_FLOAT_OFFSET = ('0 0 32');
const vector FLAG_PASS_ARC_OFFSET = ('0 0 -10');

const vector VEHICLE_FLAG_OFFSET = ('0 0 96');
const float VEHICLE_FLAG_SCALE = 1.0;

// waypoint colors
#define WPCOLOR_ENEMYFC(t) ((t) ? colormapPaletteColor(t - 1, false) * 0.75 : '1 1 1')
#define WPCOLOR_FLAGCARRIER(t) (WP_FlagCarrier.m_color)
#define WPCOLOR_DROPPEDFLAG(t) ((t) ? ('0.25 0.25 0.25' + colormapPaletteColor(t - 1, false)) * 0.5 : '1 1 1')

// sounds
#define snd_flag_taken noise
#define snd_flag_returned noise1
#define snd_flag_capture noise2
#define snd_flag_respawn noise3
.string snd_flag_dropped;
.string snd_flag_touch;
.string snd_flag_pass;

// effects
.string toucheffect;
.string passeffect;
.string capeffect;

// list of flags on the map
entity ctf_worldflaglist;
.entity ctf_worldflagnext;
.entity ctf_staleflagnext;

// waypoint sprites
.entity bot_basewaypoint; // flag waypointsprite
.entity wps_helpme;
.entity wps_flagbase;
.entity wps_flagcarrier;
.entity wps_flagdropped;
.entity wps_enemyflagcarrier;
.float wps_helpme_time;
bool wpforenemy_announced;
float wpforenemy_nextthink;

// statuses
const int FLAG_BASE = 1;
const int FLAG_DROPPED = 2;
const int FLAG_CARRY = 3;
const int FLAG_PASSING = 4;

const int DROP_NORMAL = 1;
const int DROP_THROW = 2;
const int DROP_PASS = 3;
const int DROP_RESET = 4;

const int PICKUP_BASE = 1;
const int PICKUP_DROPPED = 2;

const int CAPTURE_NORMAL = 1;
const int CAPTURE_DROPPED = 2;

const int RETURN_TIMEOUT = 1;
const int RETURN_DROPPED = 2;
const int RETURN_DAMAGE = 3;
const int RETURN_SPEEDRUN = 4;
const int RETURN_NEEDKILL = 5;

void ctf_Handle_Throw(entity player, entity receiver, float droptype);

// flag properties
#define ctf_spawnorigin dropped_origin
bool ctf_stalemate; // indicates that a stalemate is active
float ctf_captimerecord; // record time for capturing the flag
.float ctf_pickuptime;
.float ctf_droptime;
.int ctf_status; // status of the flag (FLAG_BASE, FLAG_DROPPED, FLAG_CARRY declared globally)
.entity ctf_dropper; // don't allow spam of dropping the flag
.int max_flag_health;
.float next_take_time;
.bool ctf_flagdamaged;
int ctf_teams;

// passing/throwing properties
.float pass_distance;
.entity pass_sender;
.entity pass_target;
.float throw_antispam;
.float throw_prevtime;
.int throw_count;

// CaptureShield: If the player is too bad to be allowed to capture, shield them from taking the flag.
.bool ctf_captureshielded; // set to 1 if the player is too bad to be allowed to capture
float ctf_captureshield_min_negscore; // punish at -20 points
float ctf_captureshield_max_ratio; // punish at most 30% of each team
float ctf_captureshield_force; // push force of the shield

// 1 flag ctf
bool ctf_oneflag; // indicates whether or not a neutral flag has been found

// bot player logic
const int HAVOCBOT_CTF_ROLE_NONE = 0;
const int HAVOCBOT_CTF_ROLE_DEFENSE = 2;
const int HAVOCBOT_CTF_ROLE_MIDDLE = 4;
const int HAVOCBOT_CTF_ROLE_OFFENSE = 8;
const int HAVOCBOT_CTF_ROLE_CARRIER = 16;
const int HAVOCBOT_CTF_ROLE_RETRIEVER = 32;
const int HAVOCBOT_CTF_ROLE_ESCORT = 64;

.bool havocbot_cantfindflag;

vector havocbot_ctf_middlepoint;
float havocbot_ctf_middlepoint_radius;

void havocbot_role_ctf_setrole(entity bot, int role);

// team checking
#define CTF_SAMETEAM(a,b) ((autocvar_g_ctf_reverse || (ctf_oneflag && autocvar_g_ctf_oneflag_reverse)) ? DIFF_TEAM(a,b) : SAME_TEAM(a,b))
#define CTF_DIFFTEAM(a,b) ((autocvar_g_ctf_reverse || (ctf_oneflag && autocvar_g_ctf_oneflag_reverse)) ? SAME_TEAM(a,b) : DIFF_TEAM(a,b))

// networked flag statuses
.int ctf_flagstatus;
#endif

const int CTF_RED_FLAG_TAKEN			= 1;
const int CTF_RED_FLAG_LOST				= 2;
const int CTF_RED_FLAG_CARRYING			= 3;
const int CTF_BLUE_FLAG_TAKEN			= 4;
const int CTF_BLUE_FLAG_LOST			= 8;
const int CTF_BLUE_FLAG_CARRYING		= 12;
const int CTF_YELLOW_FLAG_TAKEN			= 16;
const int CTF_YELLOW_FLAG_LOST			= 32;
const int CTF_YELLOW_FLAG_CARRYING		= 48;
const int CTF_PINK_FLAG_TAKEN			= 64;
const int CTF_PINK_FLAG_LOST			= 128;
const int CTF_PINK_FLAG_CARRYING		= 192;
const int CTF_NEUTRAL_FLAG_TAKEN		= 256;
const int CTF_NEUTRAL_FLAG_LOST			= 512;
const int CTF_NEUTRAL_FLAG_CARRYING		= 768;
const int CTF_FLAG_NEUTRAL				= 2048;
const int CTF_SHIELDED					= 4096;

#endif
