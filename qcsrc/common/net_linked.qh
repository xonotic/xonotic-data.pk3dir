#pragma once

REGISTER_NET_TEMP(TE_CSQC_PICTURE)
REGISTER_NET_TEMP(TE_CSQC_RACE)
REGISTER_NET_TEMP(TE_CSQC_TEAMNAGGER)
REGISTER_NET_TEMP(TE_CSQC_PINGPLREPORT)
REGISTER_NET_TEMP(TE_CSQC_WEAPONCOMPLAIN)
REGISTER_NET_TEMP(TE_CSQC_SERVERWELCOME)
REGISTER_NET_TEMP(TE_CSQC_VEHICLESETUP)
REGISTER_NET_TEMP(TE_CSQC_WEAPONPICKUP)

REGISTER_NET_TEMP(TE_CSQC_TEAMNAMES)
REGISTER_NET_TEMP(TE_CSQC_CHATSOUND)
REGISTER_NET_TEMP(TE_CSQC_TOTALSHARDS) // for RJZ

const int RACE_NET_CHECKPOINT_HIT_QUALIFYING = 0; // byte checkpoint, short time, short recordtime, string recordholder
const int RACE_NET_CHECKPOINT_CLEAR = 1;
const int RACE_NET_CHECKPOINT_NEXT_QUALIFYING = 2; // byte nextcheckpoint, short recordtime, string recordholder
const int RACE_NET_CHECKPOINT_HIT_RACE = 3; // byte checkpoint, short delta, byte lapsdelta, string opponent
const int RACE_NET_CHECKPOINT_HIT_RACE_BY_OPPONENT = 4; // byte checkpoint, short delta, byte lapsdelta, string opponent
const int RACE_NET_CHECKPOINT_NEXT_SPEC_QUALIFYING = 5; // byte nextcheckpoint, float laptime, short recordtime, string recordholder
const int RACE_NET_PENALTY_RACE = 6; // byte penaltytime, string reason
const int RACE_NET_PENALTY_QUALIFYING = 7; // byte penaltytime, string reason
const int RACE_NET_SERVER_RECORD = 8; // server record, sent to client
const int RACE_NET_SPEED_AWARD = 9; // speed award, sent to client
const int RACE_NET_SPEED_AWARD_BEST = 10; // all time best speed award, sent to client
const int RACE_NET_SERVER_RANKINGS = 11;
const int RACE_NET_SERVER_STATUS = 12;
const int RACE_NET_CHECKPOINT_HIT_SELF_QUALIFYING = 13; // byte checkpoint, short time, short recordtime
const int RACE_NET_CHECKPOINT_NEXT_SELF_QUALIFYING = 14; // byte nextcheckpoint, short recordtime
const int RACE_NET_RANKINGS_CNT = 15;

REGISTER_NET_LINKED(_ENT_CLIENT_INIT)
#ifdef CSQC
NET_HANDLE(_ENT_CLIENT_INIT, bool isnew) { make_pure(this); return true; }
#endif
/** Sent as a temp entity from a persistent linked entity */
REGISTER_NET_TEMP(ENT_CLIENT_INIT)

REGISTER_NET_LINKED(ENT_CLIENT_SCORES_INFO)
REGISTER_NET_LINKED(ENT_CLIENT_SCORES)
REGISTER_NET_LINKED(ENT_CLIENT_TEAMSCORES)
REGISTER_NET_LINKED(ENT_CLIENT_NAGGER) // flags [votecalledvote]
REGISTER_NET_LINKED(ENT_CLIENT_RADARLINK) // flags [startorigin] [endorigin] [startcolor+16*endcolor]
REGISTER_NET_LINKED(ENT_CLIENT_PROJECTILE)
REGISTER_NET_LINKED(ENT_CLIENT_MAPVOTE)
REGISTER_NET_LINKED(ENT_CLIENT_CLIENTDATA)
REGISTER_NET_LINKED(ENT_CLIENT_RANDOMSEED)
REGISTER_NET_LINKED(ENT_CLIENT_ACCURACY)
REGISTER_NET_LINKED(ENT_CLIENT_ELIMINATEDPLAYERS)

REGISTER_NET_LINKED(ENT_CLIENT_WARPZONE)
REGISTER_NET_LINKED(ENT_CLIENT_WARPZONE_CAMERA)
REGISTER_NET_LINKED(ENT_CLIENT_WARPZONE_TELEPORTED)

REGISTER_NET_LINKED(ENT_CLIENT_ARC_BEAM)
REGISTER_NET_LINKED(ENT_CLIENT_HOOK)
REGISTER_NET_LINKED(ENT_CLIENT_TUBANOTE)

REGISTER_NET_LINKED(ENT_CLIENT_SPAWNPOINT)
REGISTER_NET_LINKED(ENT_CLIENT_SPAWNEVENT)
REGISTER_NET_LINKED(ENT_CLIENT_WALL)

#include <lib/csqcmodel/net.qh>

REGISTER_NET_C2S(fpsreport)
