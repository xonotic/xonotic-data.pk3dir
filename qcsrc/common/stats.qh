#pragma once

#ifdef SVQC
#include <server/autocvars.qh>
#include <server/client.qh>
#endif

// Full list of all stat constants, included in a single location for easy reference
// 255 is the current limit (MAX_CL_STATS - 1), engine will need to be modified if you wish to add more stats

const int MAX_CL_STATS = 256;

// const int STAT_HEALTH = 0;
// const int STAT_ARMOR = 4;
// const int STAT_SHELLS = 6;
// const int STAT_NAILS = 7;
// const int STAT_ROCKETS = 8;
// const int STAT_CELLS = 9;
// const int STAT_ACTIVEWEAPON = 10;
// const int STAT_ITEMS = 15; // .items | .items2 << 23 | serverflags << 28
// const int STAT_VIEWHEIGHT = 16;

#if defined(CSQC)
    #define g_stat_HEALTH getstati(STAT_HEALTH)
    #define g_stat_ARMOR getstat_int(STAT_ARMOR)
    #define g_stat_SHELLS getstat_int(STAT_SHELLS)
    #define g_stat_NAILS getstat_int(STAT_NAILS)
    #define g_stat_ROCKETS getstat_int(STAT_ROCKETS)
    #define g_stat_CELLS getstat_int(STAT_CELLS)
    #define g_stat_ACTIVEWEAPON getstat_int(STAT_ACTIVEWEAPON)
    #define g_stat_ITEMS getstat_int(STAT_ITEMS)
    #define g_stat_VIEWHEIGHT getstati(STAT_VIEWHEIGHT)
#elif defined(SVQC)
    #define stat_HEALTH health
    #define stat_ARMOR armorvalue
    #define stat_SHELLS ammo_shells
    #define stat_NAILS ammo_nails
    #define stat_ROCKETS ammo_rockets
    #define stat_CELLS ammo_cells
    #define stat_ACTIVEWEAPON weapon
    #define stat_ITEMS items
    #define stat_VIEWHEIGHT view_ofs_z
#endif

#ifdef SVQC
vector weaponsInMap;
#endif
REGISTER_STAT(WEAPONS, vectori)
REGISTER_STAT(WEAPONSINMAP, vectori, weaponsInMap)

REGISTER_STAT(PL_VIEW_OFS, vector)
REGISTER_STAT(PL_CROUCH_VIEW_OFS, vector)

REGISTER_STAT(PL_MIN, vector)
REGISTER_STAT(PL_CROUCH_MIN, vector)

REGISTER_STAT(PL_MAX, vector)
REGISTER_STAT(PL_CROUCH_MAX, vector)

REGISTER_STAT(KH_KEYS, int)

#ifdef SVQC
float W_WeaponRateFactor(entity this);
float game_stopped;
float game_starttime;
float round_starttime;
bool autocvar_g_allow_oldvortexbeam;
int autocvar_leadlimit;
#endif
REGISTER_STAT(WEAPONRATEFACTOR, float, W_WeaponRateFactor(this))
REGISTER_STAT(GAME_STOPPED, int, game_stopped)
REGISTER_STAT(GAMESTARTTIME, float, game_starttime)
REGISTER_STAT(STRENGTH_FINISHED, float)
REGISTER_STAT(INVINCIBLE_FINISHED, float)
/** arc heat in [0,1] */
REGISTER_STAT(PRESSED_KEYS, int)
/** this stat could later contain some other bits of info, like, more server-side particle config */
REGISTER_STAT(ALLOW_OLDVORTEXBEAM, bool, autocvar_g_allow_oldvortexbeam)
REGISTER_STAT(FUEL, int)
REGISTER_STAT(NB_METERSTART, float)
/** compressShotOrigin */
REGISTER_STAT(SHOTORG, int)
REGISTER_STAT(LEADLIMIT, float, autocvar_leadlimit)

REGISTER_STAT(LAST_PICKUP, float)
REGISTER_STAT(HUD, int)
REGISTER_STAT(HIT_TIME, float)
REGISTER_STAT(DAMAGE_DEALT_TOTAL, int)
REGISTER_STAT(TYPEHIT_TIME, float)
REGISTER_STAT(SUPERWEAPONS_FINISHED, float)
REGISTER_STAT(VEHICLESTAT_HEALTH, int)
REGISTER_STAT(VEHICLESTAT_SHIELD, int)
REGISTER_STAT(VEHICLESTAT_ENERGY, int)
REGISTER_STAT(VEHICLESTAT_AMMO1, int)
REGISTER_STAT(VEHICLESTAT_RELOAD1, int)
REGISTER_STAT(VEHICLESTAT_AMMO2, int)
REGISTER_STAT(VEHICLESTAT_RELOAD2, int)
REGISTER_STAT(VEHICLESTAT_W2MODE, int)
REGISTER_STAT(NADE_TIMER, float)
REGISTER_STAT(SECRETS_TOTAL, float)
REGISTER_STAT(SECRETS_FOUND, float)
REGISTER_STAT(RESPAWN_TIME, float)
REGISTER_STAT(ROUNDSTARTTIME, float, round_starttime)
REGISTER_STAT(MONSTERS_TOTAL, int)
REGISTER_STAT(MONSTERS_KILLED, int)
REGISTER_STAT(BUFFS, int)
REGISTER_STAT(NADE_BONUS, float)
REGISTER_STAT(NADE_BONUS_TYPE, int)
REGISTER_STAT(NADE_BONUS_SCORE, float)
REGISTER_STAT(HEALING_ORB, float)
REGISTER_STAT(HEALING_ORB_ALPHA, float)
REGISTER_STAT(PLASMA, int)
REGISTER_STAT(FROZEN, int)
REGISTER_STAT(REVIVE_PROGRESS, float)
REGISTER_STAT(ROUNDLOST, int)
REGISTER_STAT(BUFF_TIME, float)
REGISTER_STAT(CTF_FLAGSTATUS, int)
REGISTER_STAT(CAPTURE_PROGRESS, float)
REGISTER_STAT(ENTRAP_ORB, float)
REGISTER_STAT(ENTRAP_ORB_ALPHA, float)
REGISTER_STAT(ITEMSTIME, int, autocvar_sv_itemstime)
REGISTER_STAT(KILL_TIME, float)
REGISTER_STAT(VEIL_ORB, float)
REGISTER_STAT(VEIL_ORB_ALPHA, float)

#ifdef SVQC
float autocvar_sv_showfps = 5;
#endif
REGISTER_STAT(SHOWFPS, float, autocvar_sv_showfps)

#ifdef SVQC
bool autocvar_g_ctf_leaderboard;
#endif
REGISTER_STAT(CTF_SHOWLEADERBOARD, bool, autocvar_g_ctf_leaderboard)

#ifdef SVQC
int autocvar_g_multijump;
float autocvar_g_multijump_add;
float autocvar_g_multijump_speed;
float autocvar_g_multijump_maxspeed;
float autocvar_g_multijump_dodging = 1;
#endif
REGISTER_STAT(MULTIJUMP_DODGING, int, autocvar_g_multijump_dodging)
REGISTER_STAT(MULTIJUMP_MAXSPEED, float, autocvar_g_multijump_maxspeed)
REGISTER_STAT(MULTIJUMP_ADD, int, autocvar_g_multijump_add)
REGISTER_STAT(MULTIJUMP_SPEED, float, autocvar_g_multijump_speed)
.int multijump_count;
REGISTER_STAT(MULTIJUMP_COUNT, int, this.multijump_count)
REGISTER_STAT(MULTIJUMP, int, autocvar_g_multijump)
REGISTER_STAT(DOUBLEJUMP, int, autocvar_sv_doublejump)

#ifdef SVQC
bool g_bugrigs;
bool g_bugrigs_planar_movement;
bool g_bugrigs_planar_movement_car_jumping;
float g_bugrigs_reverse_spinning;
float g_bugrigs_reverse_speeding;
float g_bugrigs_reverse_stopping;
float g_bugrigs_air_steering;
float g_bugrigs_angle_smoothing;
float g_bugrigs_friction_floor;
float g_bugrigs_friction_brake;
float g_bugrigs_friction_air;
float g_bugrigs_accel;
float g_bugrigs_speed_ref;
float g_bugrigs_speed_pow;
float g_bugrigs_steer;
#endif
REGISTER_STAT(BUGRIGS, int, g_bugrigs)
REGISTER_STAT(BUGRIGS_ACCEL, float, g_bugrigs_accel)
REGISTER_STAT(BUGRIGS_AIR_STEERING, int, g_bugrigs_air_steering)
REGISTER_STAT(BUGRIGS_ANGLE_SMOOTHING, int, g_bugrigs_angle_smoothing)
REGISTER_STAT(BUGRIGS_CAR_JUMPING, int, g_bugrigs_planar_movement_car_jumping)
REGISTER_STAT(BUGRIGS_FRICTION_AIR, float, g_bugrigs_friction_air)
REGISTER_STAT(BUGRIGS_FRICTION_BRAKE, float, g_bugrigs_friction_brake)
REGISTER_STAT(BUGRIGS_FRICTION_FLOOR, float, g_bugrigs_friction_floor)
REGISTER_STAT(BUGRIGS_PLANAR_MOVEMENT, int, g_bugrigs_planar_movement)
REGISTER_STAT(BUGRIGS_REVERSE_SPEEDING, int, g_bugrigs_reverse_speeding)
REGISTER_STAT(BUGRIGS_REVERSE_SPINNING, int, g_bugrigs_reverse_spinning)
REGISTER_STAT(BUGRIGS_REVERSE_STOPPING, int, g_bugrigs_reverse_stopping)
REGISTER_STAT(BUGRIGS_SPEED_POW, float, g_bugrigs_speed_pow)
REGISTER_STAT(BUGRIGS_SPEED_REF, float, g_bugrigs_speed_ref)
REGISTER_STAT(BUGRIGS_STEER, float, g_bugrigs_steer)

#ifdef SVQC
int autocvar_sv_gameplayfix_downtracesupportsongroundflag;
int autocvar_sv_gameplayfix_easierwaterjump;
int autocvar_sv_gameplayfix_stepdown;
int autocvar_sv_gameplayfix_stepmultipletimes;
int autocvar_sv_gameplayfix_unstickplayers;
int autocvar_sv_gameplayfix_fixedcheckwatertransition;
#endif
REGISTER_STAT(GAMEPLAYFIX_DOWNTRACEONGROUND, int, autocvar_sv_gameplayfix_downtracesupportsongroundflag)
REGISTER_STAT(GAMEPLAYFIX_EASIERWATERJUMP, int, autocvar_sv_gameplayfix_easierwaterjump)
REGISTER_STAT(GAMEPLAYFIX_STEPDOWN, int, autocvar_sv_gameplayfix_stepdown)
REGISTER_STAT(GAMEPLAYFIX_STEPMULTIPLETIMES, int, autocvar_sv_gameplayfix_stepmultipletimes)
REGISTER_STAT(GAMEPLAYFIX_UNSTICKPLAYERS, int, autocvar_sv_gameplayfix_unstickplayers)
REGISTER_STAT(GAMEPLAYFIX_UPVELOCITYCLEARSONGROUND, int, autocvar_sv_gameplayfix_upwardvelocityclearsongroundflag)
REGISTER_STAT(GAMEPLAYFIX_WATERTRANSITION, int, autocvar_sv_gameplayfix_fixedcheckwatertransition)

REGISTER_STAT(MOVEVARS_JUMPSTEP, int, cvar("sv_jumpstep"))
REGISTER_STAT(NOSTEP, int, cvar("sv_nostep"))

REGISTER_STAT(MOVEVARS_FRICTION, float)
REGISTER_STAT(MOVEVARS_FRICTION_SLICK, float, autocvar_sv_friction_slick)
REGISTER_STAT(MOVEVARS_FRICTION_ONLAND, float, autocvar_sv_friction_on_land)

REGISTER_STAT(MOVEVARS_JUMPSPEEDCAP_DISABLE_ONRAMPS, int, autocvar_sv_jumpspeedcap_max_disable_on_ramps)
REGISTER_STAT(MOVEVARS_TRACK_CANJUMP, int)
/** cvar loopback */
REGISTER_STAT(MOVEVARS_CL_TRACK_CANJUMP, int)

#ifdef SVQC
int g_dodging;
float autocvar_sv_dodging_delay;
float autocvar_sv_dodging_wall_distance_threshold;
bool autocvar_sv_dodging_frozen;
bool autocvar_sv_dodging_frozen_doubletap;
float autocvar_sv_dodging_height_threshold;
float autocvar_sv_dodging_horiz_speed_min;
float autocvar_sv_dodging_horiz_speed_max;
float autocvar_sv_dodging_horiz_force_slowest;
float autocvar_sv_dodging_horiz_force_fastest;
float autocvar_sv_dodging_horiz_force_frozen;
float autocvar_sv_dodging_ramp_time;
float autocvar_sv_dodging_up_speed;
bool autocvar_sv_dodging_wall_dodging;
bool autocvar_sv_dodging_air_dodging;
float autocvar_sv_dodging_maxspeed;
float autocvar_sv_dodging_air_maxspeed;
#endif

#if 0
REGISTER_STAT(DODGING, int, g_dodging)
REGISTER_STAT(DODGING_DELAY, float, autocvar_sv_dodging_delay)
REGISTER_STAT(DODGING_DISTANCE_THRESHOLD, float, autocvar_sv_dodging_wall_distance_threshold)
REGISTER_STAT(DODGING_FROZEN_DOUBLETAP, int, autocvar_sv_dodging_frozen_doubletap)
REGISTER_STAT(DODGING_HEIGHT_THRESHOLD, float, autocvar_sv_dodging_height_threshold)
REGISTER_STAT(DODGING_HORIZ_SPEED_MIN, float, autocvar_sv_dodging_horiz_speed_min)
REGISTER_STAT(DODGING_HORIZ_SPEED_MAX, float, autocvar_sv_dodging_horiz_speed_max)
REGISTER_STAT(DODGING_HORIZ_FORCE_SLOWEST, float, autocvar_sv_dodging_horiz_force_slowest)
REGISTER_STAT(DODGING_HORIZ_FORCE_FASTEST, float, autocvar_sv_dodging_horiz_force_fastest)
REGISTER_STAT(DODGING_HORIZ_FORCE_FROZEN, float, autocvar_sv_dodging_horiz_force_frozen)
REGISTER_STAT(DODGING_RAMP_TIME, float, autocvar_sv_dodging_ramp_time)
REGISTER_STAT(DODGING_UP_SPEED, float, autocvar_sv_dodging_up_speed)
REGISTER_STAT(DODGING_WALL, bool, autocvar_sv_dodging_wall_dodging)
REGISTER_STAT(DODGING_AIR, bool, autocvar_sv_dodging_air_dodging)
REGISTER_STAT(DODGING_MAXSPEED, float, autocvar_sv_dodging_maxspeed)
REGISTER_STAT(DODGING_AIR_MAXSPEED, float, autocvar_sv_dodging_air_maxspeed)
#endif
/** cvar loopback */
REGISTER_STAT(DODGING_FROZEN, int, autocvar_sv_dodging_frozen)
REGISTER_STAT(DODGING_TIMEOUT, float)

REGISTER_STAT(JETPACK_ACCEL_SIDE, float, autocvar_g_jetpack_acceleration_side)
REGISTER_STAT(JETPACK_ACCEL_UP, float, autocvar_g_jetpack_acceleration_up)
REGISTER_STAT(JETPACK_ANTIGRAVITY, float, autocvar_g_jetpack_antigravity)
REGISTER_STAT(JETPACK_FUEL, float, autocvar_g_jetpack_fuel)
REGISTER_STAT(JETPACK_MAXSPEED_SIDE, float, autocvar_g_jetpack_maxspeed_side)
REGISTER_STAT(JETPACK_MAXSPEED_UP, float, autocvar_g_jetpack_maxspeed_up)
REGISTER_STAT(JETPACK_REVERSE_THRUST, float, autocvar_g_jetpack_reverse_thrust)

REGISTER_STAT(MOVEVARS_HIGHSPEED, float)

#ifdef SVQC
AUTOCVAR(g_walljump, bool, false, "Enable wall jumping mutator");
AUTOCVAR(g_walljump_delay, float, 1, "Minimum delay between wall jumps");
AUTOCVAR(g_walljump_force, float, 300, "How far to bounce/jump off the wall");
AUTOCVAR(g_walljump_velocity_xy_factor, float, 1.15, "How much to slow down along horizontal axis, higher value = higher deceleration, if factor is < 1, you accelerate by wall jumping");
AUTOCVAR(g_walljump_velocity_z_factor, float, 0.5, "Upwards velocity factor, multiplied by normal jump velocity");
#endif
REGISTER_STAT(WALLJUMP, int, autocvar_g_walljump)
REGISTER_STAT(WALLJUMP_VELOCITY_Z_FACTOR, float, autocvar_g_walljump_velocity_z_factor)
REGISTER_STAT(WALLJUMP_VELOCITY_XY_FACTOR, float, autocvar_g_walljump_velocity_xy_factor)
REGISTER_STAT(WALLJUMP_DELAY, float, autocvar_g_walljump_delay)
REGISTER_STAT(WALLJUMP_FORCE, float, autocvar_g_walljump_force)
REGISTER_STAT(LASTWJ, float)

// freeze tag, clan arena
REGISTER_STAT(REDALIVE, int)
REGISTER_STAT(BLUEALIVE, int)
REGISTER_STAT(YELLOWALIVE, int)
REGISTER_STAT(PINKALIVE, int)

// domination
REGISTER_STAT(DOM_TOTAL_PPS, float)
REGISTER_STAT(DOM_PPS_RED, float)
REGISTER_STAT(DOM_PPS_BLUE, float)
REGISTER_STAT(DOM_PPS_YELLOW, float)
REGISTER_STAT(DOM_PPS_PINK, float)

REGISTER_STAT(TELEPORT_MAXSPEED, float, autocvar_g_teleport_maxspeed)
REGISTER_STAT(TELEPORT_TELEFRAG_AVOID, int, autocvar_g_telefrags_avoid)

REGISTER_STAT(CAMERA_SPECTATOR, int)

REGISTER_STAT(SPECTATORSPEED, float)

#ifdef SVQC
bool autocvar_sv_slick_applygravity;
#endif
REGISTER_STAT(SLICK_APPLYGRAVITY, bool, autocvar_sv_slick_applygravity)

#ifdef SVQC
bool autocvar_sv_vq3compat;
#endif
REGISTER_STAT(VQ3COMPAT, bool, autocvar_sv_vq3compat)

#ifdef SVQC
#include "physics/movetypes/movetypes.qh"
float warmup_limit;
#endif

#ifdef SVQC
bool autocvar_g_shootfromcenter;
bool autocvar_g_shootfromeye;
#endif
REGISTER_STAT(SHOOTFROMEYE, bool, autocvar_g_shootfromeye)
REGISTER_STAT(SHOOTFROMCENTER, bool, autocvar_g_shootfromcenter)

REGISTER_STAT(MOVEVARS_AIRACCEL_QW_STRETCHFACTOR, float)
REGISTER_STAT(MOVEVARS_AIRCONTROL_PENALTY, float)
REGISTER_STAT(MOVEVARS_AIRSPEEDLIMIT_NONQW, float)
REGISTER_STAT(MOVEVARS_AIRSTRAFEACCEL_QW, float)
REGISTER_STAT(MOVEVARS_AIRCONTROL_POWER, float)
REGISTER_STAT(MOVEVARS_AIRCONTROL_BACKWARDS, bool)
REGISTER_STAT(MOVEVARS_AIRCONTROL_SIDEWARDS, bool)
noref bool autocvar_sv_gameplayfix_nogravityonground;
REGISTER_STAT(MOVEFLAGS, int, MOVEFLAG_VALID
                              | (autocvar_sv_gameplayfix_q2airaccelerate ? MOVEFLAG_Q2AIRACCELERATE : 0)
                              | (autocvar_sv_gameplayfix_nogravityonground ? MOVEFLAG_NOGRAVITYONGROUND : 0)
                              | (autocvar_sv_gameplayfix_gravityunaffectedbyticrate ? MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE : 0))

REGISTER_STAT(MOVEVARS_WARSOWBUNNY_AIRFORWARDACCEL, float)
REGISTER_STAT(MOVEVARS_WARSOWBUNNY_ACCEL, float)
REGISTER_STAT(MOVEVARS_WARSOWBUNNY_TOPSPEED, float)
REGISTER_STAT(MOVEVARS_WARSOWBUNNY_TURNACCEL, float)
REGISTER_STAT(MOVEVARS_WARSOWBUNNY_BACKTOSIDERATIO, float)

REGISTER_STAT(MOVEVARS_AIRSTOPACCELERATE, float)
REGISTER_STAT(MOVEVARS_AIRSTRAFEACCELERATE, float)
REGISTER_STAT(MOVEVARS_MAXAIRSTRAFESPEED, float)
REGISTER_STAT(MOVEVARS_AIRCONTROL, float)
REGISTER_STAT(FRAGLIMIT, float, autocvar_fraglimit)
REGISTER_STAT(TIMELIMIT, float, autocvar_timelimit)
REGISTER_STAT(WARMUP_TIMELIMIT, float, warmup_limit)
#ifdef SVQC
float autocvar_sv_wallfriction;
#endif
REGISTER_STAT(MOVEVARS_WALLFRICTION, int, autocvar_sv_wallfriction)
REGISTER_STAT(MOVEVARS_TICRATE, float, autocvar_sys_ticrate)
REGISTER_STAT(MOVEVARS_TIMESCALE, float, autocvar_slowmo)
REGISTER_STAT(MOVEVARS_GRAVITY, float, autocvar_sv_gravity)
REGISTER_STAT(MOVEVARS_STOPSPEED, float)
REGISTER_STAT(MOVEVARS_MAXSPEED, float)
REGISTER_STAT(MOVEVARS_ACCELERATE, float)
REGISTER_STAT(MOVEVARS_AIRACCELERATE, float)
.float gravity;
// FIXME: Was 0 on server, 1 on client. Still want that?
REGISTER_STAT(MOVEVARS_ENTGRAVITY, float, (this.gravity) ? this.gravity : 1)
REGISTER_STAT(MOVEVARS_JUMPVELOCITY, float)
REGISTER_STAT(MOVEVARS_JUMPVELOCITY_CROUCH, float)
REGISTER_STAT(MOVEVARS_MAXAIRSPEED, float)
REGISTER_STAT(MOVEVARS_STEPHEIGHT, float, autocvar_sv_stepheight)
REGISTER_STAT(MOVEVARS_AIRACCEL_QW, float)
REGISTER_STAT(MOVEVARS_AIRACCEL_SIDEWAYS_FRICTION, float)
REGISTER_STAT(MOVEVARS_SPECIALCOMMAND, bool)
#ifdef SVQC
int autocvar_sv_wallclip;
#endif
REGISTER_STAT(MOVEVARS_WALLCLIP, int, autocvar_sv_wallclip)


#ifdef CSQC
noref int autocvar_cl_gunalign;
#endif
#ifdef SVQC
.int cvar_cl_gunalign;
#endif

REGISTER_STAT(GUNALIGN, int)
#ifdef SVQC
SPECTATE_COPYFIELD(_STAT(GUNALIGN))
#endif
