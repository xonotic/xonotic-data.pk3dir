#ifndef GAMEMODE_ONSLAUGHT_H
#define GAMEMODE_ONSLAUGHT_H

float autocvar_g_onslaught_point_limit;
void ons_Initialize();

REGISTER_MUTATOR(ons, false)
{
	MUTATOR_ONADD
	{
		if (time > 1) // game loads at time 1
			error("This is a game type and it cannot be added at runtime.");
		ons_Initialize();

		ActivateTeamplay();
		SetLimits(autocvar_g_onslaught_point_limit, autocvar_leadlimit_override, autocvar_timelimit_override, -1);
		have_team_spawns = -1; // request team spawns
	}

	MUTATOR_ONROLLBACK_OR_REMOVE
	{
		// we actually cannot roll back ons_Initialize here
		// BUT: we don't need to! If this gets called, adding always
		// succeeds.
	}

	MUTATOR_ONREMOVE
	{
		LOG_INFO("This is a game type and it cannot be removed at runtime.");
		return -1;
	}

	return false;
}

#ifdef SVQC

.entity ons_toucher; // player who touched the control point

// control point / generator constants
const float ONS_CP_THINKRATE = 0.2;
const float GEN_THINKRATE = 1;
#define CPGEN_SPAWN_OFFSET ('0 0 1' * (PL_MAX_CONST.z - 13))
const vector CPGEN_WAYPOINT_OFFSET = ('0 0 128');
const vector CPICON_OFFSET = ('0 0 96');

// list of generators on the map
entity ons_worldgeneratorlist;
.entity ons_worldgeneratornext;
.entity ons_stalegeneratornext;

// list of control points on the map
entity ons_worldcplist;
.entity ons_worldcpnext;
.entity ons_stalecpnext;

// list of links on the map
entity ons_worldlinklist;
.entity ons_worldlinknext;
.entity ons_stalelinknext;

// definitions
.entity sprite;
.string target2;
.int iscaptured;
.int islinked;
.int isshielded;
.float lasthealth;
.int lastteam;
.int lastshielded;
.int lastcaptured;

.bool waslinked;

bool ons_stalemate;

.float teleport_antispam;

.bool ons_roundlost = _STAT(ROUNDLOST);

// waypoint sprites
.entity bot_basewaypoint; // generator waypointsprite

.bool isgenneighbor[17];
.bool iscpneighbor[17];
float ons_notification_time[17];

.float ons_overtime_damagedelay;

.vector ons_deathloc;

.entity ons_spawn_by;

// declarations for functions used outside gamemode_onslaught.qc
void ons_Generator_UpdateSprite(entity e);
void ons_ControlPoint_UpdateSprite(entity e);
bool ons_ControlPoint_Attackable(entity cp, int teamnumber);

// CaptureShield: Prevent capturing or destroying control point/generator if it is not available yet
float ons_captureshield_force; // push force of the shield

// bot player logic
const int HAVOCBOT_ONS_ROLE_NONE 		= 0;
const int HAVOCBOT_ONS_ROLE_DEFENSE 	= 2;
const int HAVOCBOT_ONS_ROLE_ASSISTANT 	= 4;
const int HAVOCBOT_ONS_ROLE_OFFENSE 	= 8;

.entity havocbot_ons_target;

.int havocbot_role_flags;
.float havocbot_attack_time;

void havocbot_role_ons_defense(entity this);
void havocbot_role_ons_offense(entity this);
void havocbot_role_ons_assistant(entity this);

void havocbot_ons_reset_role(entity this);
void havocbot_goalrating_items(entity this, float ratingscale, vector org, float sradius);
void havocbot_goalrating_enemyplayers(entity this, float ratingscale, vector org, float sradius);

// score rule declarations
const int ST_ONS_CAPS = 1;
const int SP_ONS_CAPS = 4;
const int SP_ONS_TAKES = 6;

#endif
#endif

#ifdef IMPLEMENTATION

#include "sv_controlpoint.qh"
#include "sv_generator.qh"

bool g_onslaught;

float autocvar_g_onslaught_teleport_wait;
bool autocvar_g_onslaught_spawn_at_controlpoints;
bool autocvar_g_onslaught_spawn_at_generator;
float autocvar_g_onslaught_cp_proxydecap;
float autocvar_g_onslaught_cp_proxydecap_distance = 512;
float autocvar_g_onslaught_cp_proxydecap_dps = 100;
float autocvar_g_onslaught_spawn_at_controlpoints_chance = 0.5;
float autocvar_g_onslaught_spawn_at_controlpoints_random;
float autocvar_g_onslaught_spawn_at_generator_chance;
float autocvar_g_onslaught_spawn_at_generator_random;
float autocvar_g_onslaught_cp_buildhealth;
float autocvar_g_onslaught_cp_buildtime;
float autocvar_g_onslaught_cp_health;
float autocvar_g_onslaught_cp_regen;
float autocvar_g_onslaught_gen_health;
float autocvar_g_onslaught_shield_force = 100;
float autocvar_g_onslaught_allow_vehicle_touch;
float autocvar_g_onslaught_round_timelimit;
float autocvar_g_onslaught_warmup;
float autocvar_g_onslaught_teleport_radius;
float autocvar_g_onslaught_spawn_choose;
float autocvar_g_onslaught_click_radius;

void FixSize(entity e);

// =======================
// CaptureShield Functions
// =======================

bool ons_CaptureShield_Customize()
{SELFPARAM();
	entity e = WaypointSprite_getviewentity(other);

	if(!self.enemy.isshielded && (ons_ControlPoint_Attackable(self.enemy, e.team) > 0 || self.enemy.classname != "onslaught_controlpoint")) { return false; }
	if(SAME_TEAM(self, e)) { return false; }

	return true;
}

void ons_CaptureShield_Touch()
{SELFPARAM();
	if(!self.enemy.isshielded && (ons_ControlPoint_Attackable(self.enemy, other.team) > 0 || self.enemy.classname != "onslaught_controlpoint")) { return; }
	if(!IS_PLAYER(other)) { return; }
	if(SAME_TEAM(other, self)) { return; }

	vector mymid = (self.absmin + self.absmax) * 0.5;
	vector othermid = (other.absmin + other.absmax) * 0.5;

	Damage(other, self, self, 0, DEATH_HURTTRIGGER.m_id, mymid, normalize(othermid - mymid) * ons_captureshield_force);

	if(IS_REAL_CLIENT(other))
	{
		play2(other, SND(ONS_DAMAGEBLOCKEDBYSHIELD));

		if(self.enemy.classname == "onslaught_generator")
			Send_Notification(NOTIF_ONE, other, MSG_CENTER, CENTER_ONS_GENERATOR_SHIELDED);
		else
			Send_Notification(NOTIF_ONE, other, MSG_CENTER, CENTER_ONS_CONTROLPOINT_SHIELDED);
	}
}

void ons_CaptureShield_Reset(entity this)
{
	this.colormap = this.enemy.colormap;
	this.team = this.enemy.team;
}

void ons_CaptureShield_Spawn(entity generator, bool is_generator)
{
	entity shield = new(ons_captureshield);

	shield.enemy = generator;
	shield.team = generator.team;
	shield.colormap = generator.colormap;
	shield.reset = ons_CaptureShield_Reset;
	shield.touch = ons_CaptureShield_Touch;
	shield.customizeentityforclient = ons_CaptureShield_Customize;
	shield.effects = EF_ADDITIVE;
	shield.movetype = MOVETYPE_NOCLIP;
	shield.solid = SOLID_TRIGGER;
	shield.avelocity = '7 0 11';
	shield.scale = 1;
	shield.model = ((is_generator) ? "models/onslaught/generator_shield.md3" : "models/onslaught/controlpoint_shield.md3");

	precache_model(shield.model);
	setorigin(shield, generator.origin);
	_setmodel(shield, shield.model);
	setsize(shield, shield.scale * shield.mins, shield.scale * shield.maxs);
}


// ==========
// Junk Pile
// ==========

void setmodel_fixsize(entity e, Model m)
{
	setmodel(e, m);
	FixSize(e);
}

void onslaught_updatelinks()
{
	entity l;
	// first check if the game has ended
	LOG_DEBUG("--- updatelinks ---\n");
	// mark generators as being shielded and networked
	for(l = ons_worldgeneratorlist; l; l = l.ons_worldgeneratornext)
	{
		if (l.iscaptured)
			LOG_DEBUG(strcat(etos(l), " (generator) belongs to team ", ftos(l.team), "\n"));
		else
			LOG_DEBUG(strcat(etos(l), " (generator) is destroyed\n"));
		l.islinked = l.iscaptured;
		l.isshielded = l.iscaptured;
		l.sprite.SendFlags |= 16;
	}
	// mark points as shielded and not networked
	for(l = ons_worldcplist; l; l = l.ons_worldcpnext)
	{
		l.islinked = false;
		l.isshielded = true;
		int i;
		for(i = 0; i < 17; ++i) { l.isgenneighbor[i] = false; l.iscpneighbor[i] = false; }
		LOG_DEBUG(strcat(etos(l), " (point) belongs to team ", ftos(l.team), "\n"));
		l.sprite.SendFlags |= 16;
	}
	// flow power outward from the generators through the network
	bool stop = false;
	while (!stop)
	{
		stop = true;
		for(l = ons_worldlinklist; l; l = l.ons_worldlinknext)
		{
			// if both points are captured by the same team, and only one of
			// them is powered, mark the other one as powered as well
			if (l.enemy.iscaptured && l.goalentity.iscaptured)
				if (l.enemy.islinked != l.goalentity.islinked)
					if(SAME_TEAM(l.enemy, l.goalentity))
					{
						if (!l.goalentity.islinked)
						{
							stop = false;
							l.goalentity.islinked = true;
							LOG_DEBUG(strcat(etos(l), " (link) is marking ", etos(l.goalentity), " (point) because its team matches ", etos(l.enemy), " (point)\n"));
						}
						else if (!l.enemy.islinked)
						{
							stop = false;
							l.enemy.islinked = true;
							LOG_DEBUG(strcat(etos(l), " (link) is marking ", etos(l.enemy), " (point) because its team matches ", etos(l.goalentity), " (point)\n"));
						}
					}
		}
	}
	// now that we know which points are powered we can mark their neighbors
	// as unshielded if team differs
	for(l = ons_worldlinklist; l; l = l.ons_worldlinknext)
	{
		if (l.goalentity.islinked)
		{
			if(DIFF_TEAM(l.goalentity, l.enemy))
			{
				LOG_DEBUG(strcat(etos(l), " (link) is unshielding ", etos(l.enemy), " (point) because its team does not match ", etos(l.goalentity), " (point)\n"));
				l.enemy.isshielded = false;
			}
			if(l.goalentity.classname == "onslaught_generator")
				l.enemy.isgenneighbor[l.goalentity.team] = true;
			else
				l.enemy.iscpneighbor[l.goalentity.team] = true;
		}
		if (l.enemy.islinked)
		{
			if(DIFF_TEAM(l.goalentity, l.enemy))
			{
				LOG_DEBUG(strcat(etos(l), " (link) is unshielding ", etos(l.goalentity), " (point) because its team does not match ", etos(l.enemy), " (point)\n"));
				l.goalentity.isshielded = false;
			}
			if(l.enemy.classname == "onslaught_generator")
				l.goalentity.isgenneighbor[l.enemy.team] = true;
			else
				l.goalentity.iscpneighbor[l.enemy.team] = true;
		}
	}
	// now update the generators
	for(l = ons_worldgeneratorlist; l; l = l.ons_worldgeneratornext)
	{
		if (l.isshielded)
		{
			LOG_DEBUG(strcat(etos(l), " (generator) is shielded\n"));
			l.takedamage = DAMAGE_NO;
			l.bot_attack = false;
		}
		else
		{
			LOG_DEBUG(strcat(etos(l), " (generator) is not shielded\n"));
			l.takedamage = DAMAGE_AIM;
			l.bot_attack = true;
		}

		ons_Generator_UpdateSprite(l);
	}
	// now update the takedamage and alpha variables on control point icons
	for(l = ons_worldcplist; l; l = l.ons_worldcpnext)
	{
		if (l.isshielded)
		{
			LOG_DEBUG(strcat(etos(l), " (point) is shielded\n"));
			if (l.goalentity)
			{
				l.goalentity.takedamage = DAMAGE_NO;
				l.goalentity.bot_attack = false;
			}
		}
		else
		{
			LOG_DEBUG(strcat(etos(l), " (point) is not shielded\n"));
			if (l.goalentity)
			{
				l.goalentity.takedamage = DAMAGE_AIM;
				l.goalentity.bot_attack = true;
			}
		}
		ons_ControlPoint_UpdateSprite(l);
	}
	l = findchain(classname, "ons_captureshield");
	while(l)
	{
		l.team = l.enemy.team;
		l.colormap = l.enemy.colormap;
		l = l.chain;
	}
}


// ===================
// Main Link Functions
// ===================

bool ons_Link_Send(entity this, entity to, int sendflags)
{
	WriteHeader(MSG_ENTITY, ENT_CLIENT_RADARLINK);
	WriteByte(MSG_ENTITY, sendflags);
	if(sendflags & 1)
	{
		WriteCoord(MSG_ENTITY, self.goalentity.origin_x);
		WriteCoord(MSG_ENTITY, self.goalentity.origin_y);
		WriteCoord(MSG_ENTITY, self.goalentity.origin_z);
	}
	if(sendflags & 2)
	{
		WriteCoord(MSG_ENTITY, self.enemy.origin_x);
		WriteCoord(MSG_ENTITY, self.enemy.origin_y);
		WriteCoord(MSG_ENTITY, self.enemy.origin_z);
	}
	if(sendflags & 4)
	{
		WriteByte(MSG_ENTITY, self.clientcolors); // which is goalentity's color + enemy's color * 16
	}
	return true;
}

void ons_Link_CheckUpdate()
{SELFPARAM();
	// TODO check if the two sides have moved (currently they won't move anyway)
	float cc = 0, cc1 = 0, cc2 = 0;

	if(self.goalentity.islinked || self.goalentity.iscaptured) { cc1 = (self.goalentity.team - 1) * 0x01; }
	if(self.enemy.islinked || self.enemy.iscaptured) { cc2 = (self.enemy.team - 1) * 0x10; }

	cc = cc1 + cc2;

	if(cc != self.clientcolors)
	{
		self.clientcolors = cc;
		self.SendFlags |= 4;
	}

	self.nextthink = time;
}

void ons_DelayedLinkSetup(entity this)
{
	self.goalentity = find(world, targetname, self.target);
	self.enemy = find(world, targetname, self.target2);
	if(!self.goalentity) { objerror("can not find target\n"); }
	if(!self.enemy) { objerror("can not find target2\n"); }

	LOG_DEBUG(strcat(etos(self.goalentity), " linked with ", etos(self.enemy), "\n"));
	self.SendFlags |= 3;
	self.think = ons_Link_CheckUpdate;
	self.nextthink = time;
}


// =============================
// Main Control Point Functions
// =============================

int ons_ControlPoint_CanBeLinked(entity cp, int teamnumber)
{
	if(cp.isgenneighbor[teamnumber]) { return 2; }
	if(cp.iscpneighbor[teamnumber]) { return 1; }

	return 0;
}

int ons_ControlPoint_Attackable(entity cp, int teamnumber)
	// -2: SAME TEAM, attackable by enemy!
	// -1: SAME TEAM!
	// 0: off limits
	// 1: attack it
	// 2: touch it
	// 3: attack it (HIGH PRIO)
	// 4: touch it (HIGH PRIO)
{
	int a;

	if(cp.isshielded)
	{
		return 0;
	}
	else if(cp.goalentity)
	{
		// if there's already an icon built, nothing happens
		if(cp.team == teamnumber)
		{
			a = ons_ControlPoint_CanBeLinked(cp, teamnumber);
			if(a) // attackable by enemy?
				return -2; // EMERGENCY!
			return -1;
		}
		// we know it can be linked, so no need to check
		// but...
		a = ons_ControlPoint_CanBeLinked(cp, teamnumber);
		if(a == 2) // near our generator?
			return 3; // EMERGENCY!
		return 1;
	}
	else
	{
		// free point
		if(ons_ControlPoint_CanBeLinked(cp, teamnumber))
		{
			a = ons_ControlPoint_CanBeLinked(cp, teamnumber); // why was this here NUM_TEAM_1 + NUM_TEAM_2 - t
			if(a == 2)
				return 4; // GET THIS ONE NOW!
			else
				return 2; // TOUCH ME
		}
	}
	return 0;
}

void ons_ControlPoint_Icon_Damage(entity this, entity inflictor, entity attacker, float damage, int deathtype, vector hitloc, vector force)
{
	if(damage <= 0) { return; }

	if (this.owner.isshielded)
	{
		// this is protected by a shield, so ignore the damage
		if (time > this.pain_finished)
			if (IS_PLAYER(attacker))
			{
				play2(attacker, SND(ONS_DAMAGEBLOCKEDBYSHIELD));
				this.pain_finished = time + 1;
				attacker.typehitsound += 1; // play both sounds (shield is way too quiet)
			}

		return;
	}

	if(IS_PLAYER(attacker))
	if(time - ons_notification_time[this.team] > 10)
	{
		play2team(this.team, SND(ONS_CONTROLPOINT_UNDERATTACK));
		ons_notification_time[this.team] = time;
	}

	this.health = this.health - damage;
	if(this.owner.iscaptured)
		WaypointSprite_UpdateHealth(this.owner.sprite, this.health);
	else
		WaypointSprite_UpdateBuildFinished(this.owner.sprite, time + (this.max_health - this.health) / (this.count / ONS_CP_THINKRATE));
	this.pain_finished = time + 1;
	// particles on every hit
	pointparticles(EFFECT_SPARKS, hitloc, force*-1, 1);
	//sound on every hit
	if (random() < 0.5)
		sound(this, CH_TRIGGER, SND_ONS_HIT1, VOL_BASE+0.3, ATTEN_NORM);
	else
		sound(this, CH_TRIGGER, SND_ONS_HIT2, VOL_BASE+0.3, ATTEN_NORM);

	if (this.health < 0)
	{
		sound(this, CH_TRIGGER, SND_GRENADE_IMPACT, VOL_BASE, ATTEN_NORM);
		pointparticles(EFFECT_ROCKET_EXPLODE, this.origin, '0 0 0', 1);
		Send_Notification(NOTIF_ALL, world, MSG_INFO, APP_TEAM_NUM(this.team, INFO_ONSLAUGHT_CPDESTROYED), this.owner.message, attacker.netname);

		PlayerScore_Add(attacker, SP_ONS_TAKES, 1);
		PlayerScore_Add(attacker, SP_SCORE, 10);

		this.owner.goalentity = world;
		this.owner.islinked = false;
		this.owner.iscaptured = false;
		this.owner.team = 0;
		this.owner.colormap = 1024;

		WaypointSprite_UpdateMaxHealth(this.owner.sprite, 0);

		onslaught_updatelinks();

		// Use targets now (somebody make sure this is in the right place..)
		SUB_UseTargets(this.owner, this, NULL);

		this.owner.waslinked = this.owner.islinked;
		if(this.owner.model != "models/onslaught/controlpoint_pad.md3")
			setmodel_fixsize(this.owner, MDL_ONS_CP_PAD1);
		//setsize(this, '-32 -32 0', '32 32 8');

		remove(this);
	}

	this.SendFlags |= CPSF_STATUS;
}

void ons_ControlPoint_Icon_Think()
{SELFPARAM();
	self.nextthink = time + ONS_CP_THINKRATE;

	if(autocvar_g_onslaught_cp_proxydecap)
	{
		int _enemy_count = 0;
		int _friendly_count = 0;

		FOREACH_CLIENT(IS_PLAYER(it) && !IS_DEAD(it), {
			if(vdist(it.origin - self.origin, <, autocvar_g_onslaught_cp_proxydecap_distance))
			{
				if(SAME_TEAM(it, self))
					++_friendly_count;
				else
					++_enemy_count;
			}
		});

		_friendly_count = _friendly_count * (autocvar_g_onslaught_cp_proxydecap_dps * ONS_CP_THINKRATE);
		_enemy_count = _enemy_count * (autocvar_g_onslaught_cp_proxydecap_dps * ONS_CP_THINKRATE);

		self.health = bound(0, self.health + (_friendly_count - _enemy_count), self.max_health);
		self.SendFlags |= CPSF_STATUS;
		if(self.health <= 0)
		{
			ons_ControlPoint_Icon_Damage(self, self, self, 1, 0, self.origin, '0 0 0');
			return;
		}
	}

	if (time > self.pain_finished + 5)
	{
		if(self.health < self.max_health)
		{
			self.health = self.health + self.count;
			if (self.health >= self.max_health)
				self.health = self.max_health;
			WaypointSprite_UpdateHealth(self.owner.sprite, self.health);
		}
	}

	if(self.owner.islinked != self.owner.waslinked)
	{
		// unteam the spawnpoint if needed
		int t = self.owner.team;
		if(!self.owner.islinked)
			self.owner.team = 0;

		SUB_UseTargets(self.owner, self, NULL);

		self.owner.team = t;

		self.owner.waslinked = self.owner.islinked;
	}

	// damaged fx
	if(random() < 0.6 - self.health / self.max_health)
	{
		Send_Effect(EFFECT_ELECTRIC_SPARKS, self.origin + randompos('-10 -10 -20', '10 10 20'), '0 0 0', 1);

		if(random() > 0.8)
			sound(self, CH_PAIN, SND_ONS_SPARK1, VOL_BASE, ATTEN_NORM);
		else if (random() > 0.5)
			sound(self, CH_PAIN, SND_ONS_SPARK2, VOL_BASE, ATTEN_NORM);
	}
}

void ons_ControlPoint_Icon_BuildThink()
{SELFPARAM();
	int a;

	self.nextthink = time + ONS_CP_THINKRATE;

	// only do this if there is power
	a = ons_ControlPoint_CanBeLinked(self.owner, self.owner.team);
	if(!a)
		return;

	self.health = self.health + self.count;

	self.SendFlags |= CPSF_STATUS;

	if (self.health >= self.max_health)
	{
		self.health = self.max_health;
		self.count = autocvar_g_onslaught_cp_regen * ONS_CP_THINKRATE; // slow repair rate from now on
		self.think = ons_ControlPoint_Icon_Think;
		sound(self, CH_TRIGGER, SND_ONS_CONTROLPOINT_BUILT, VOL_BASE, ATTEN_NORM);
		self.owner.iscaptured = true;
		self.solid = SOLID_BBOX;

		Send_Effect(EFFECT_CAP(self.owner.team), self.owner.origin, '0 0 0', 1);

		WaypointSprite_UpdateMaxHealth(self.owner.sprite, self.max_health);
		WaypointSprite_UpdateHealth(self.owner.sprite, self.health);

		if(IS_PLAYER(self.owner.ons_toucher))
		{
			Send_Notification(NOTIF_ALL, world, MSG_INFO, INFO_ONSLAUGHT_CAPTURE, self.owner.ons_toucher.netname, self.owner.message);
			Send_Notification(NOTIF_ALL_EXCEPT, self.owner.ons_toucher, MSG_CENTER, APP_TEAM_NUM(self.owner.ons_toucher.team, CENTER_ONS_CAPTURE), self.owner.message);
			Send_Notification(NOTIF_ONE, self.owner.ons_toucher, MSG_CENTER, CENTER_ONS_CAPTURE, self.owner.message);
			PlayerScore_Add(self.owner.ons_toucher, SP_ONS_CAPS, 1);
			PlayerTeamScore_AddScore(self.owner.ons_toucher, 10);
		}

		self.owner.ons_toucher = world;

		onslaught_updatelinks();

		// Use targets now (somebody make sure this is in the right place..)
		SUB_UseTargets(self.owner, self, NULL);

		self.SendFlags |= CPSF_SETUP;
	}
	if(self.owner.model != MDL_ONS_CP_PAD2.model_str())
		setmodel_fixsize(self.owner, MDL_ONS_CP_PAD2);

	if(random() < 0.9 - self.health / self.max_health)
		Send_Effect(EFFECT_RAGE, self.origin + 10 * randomvec(), '0 0 -1', 1);
}

void onslaught_controlpoint_icon_link(entity e, void() spawnproc);

void ons_ControlPoint_Icon_Spawn(entity cp, entity player)
{
	entity e = new(onslaught_controlpoint_icon);

	setsize(e, CPICON_MIN, CPICON_MAX);
	setorigin(e, cp.origin + CPICON_OFFSET);

	e.owner = cp;
	e.max_health = autocvar_g_onslaught_cp_health;
	e.health = autocvar_g_onslaught_cp_buildhealth;
	e.solid = SOLID_NOT;
	e.takedamage = DAMAGE_AIM;
	e.bot_attack = true;
	e.event_damage = ons_ControlPoint_Icon_Damage;
	e.team = player.team;
	e.colormap = 1024 + (e.team - 1) * 17;
	e.count = (e.max_health - e.health) * ONS_CP_THINKRATE / autocvar_g_onslaught_cp_buildtime; // how long it takes to build

	sound(e, CH_TRIGGER, SND_ONS_CONTROLPOINT_BUILD, VOL_BASE, ATTEN_NORM);

	cp.goalentity = e;
	cp.team = e.team;
	cp.colormap = e.colormap;

	Send_Effect(EFFECT_FLAG_TOUCH(player.team), e.origin, '0 0 0', 1);

	WaypointSprite_UpdateBuildFinished(cp.sprite, time + (e.max_health - e.health) / (e.count / ONS_CP_THINKRATE));
	WaypointSprite_UpdateRule(cp.sprite,cp.team,SPRITERULE_TEAMPLAY);
	cp.sprite.SendFlags |= 16;

	onslaught_controlpoint_icon_link(e, ons_ControlPoint_Icon_BuildThink);
}

entity ons_ControlPoint_Waypoint(entity e)
{
	if(e.team)
	{
		int a = ons_ControlPoint_Attackable(e, e.team);

		if(a == -2) { return WP_OnsCPDefend; } // defend now
		if(a == -1 || a == 1 || a == 2) { return WP_OnsCP; } // touch
		if(a == 3 || a == 4) { return WP_OnsCPAttack; } // attack
	}
	else
		return WP_OnsCP;

	return WP_Null;
}

void ons_ControlPoint_UpdateSprite(entity e)
{
	entity s1 = ons_ControlPoint_Waypoint(e);
	WaypointSprite_UpdateSprites(e.sprite, s1, s1, s1);

	bool sh;
	sh = !(ons_ControlPoint_CanBeLinked(e, NUM_TEAM_1) || ons_ControlPoint_CanBeLinked(e, NUM_TEAM_2) || ons_ControlPoint_CanBeLinked(e, NUM_TEAM_3) || ons_ControlPoint_CanBeLinked(e, NUM_TEAM_4));

	if(e.lastteam != e.team + 2 || e.lastshielded != sh || e.iscaptured != e.lastcaptured)
	{
		if(e.iscaptured) // don't mess up build bars!
		{
			if(sh)
			{
				WaypointSprite_UpdateMaxHealth(e.sprite, 0);
			}
			else
			{
				WaypointSprite_UpdateMaxHealth(e.sprite, e.goalentity.max_health);
				WaypointSprite_UpdateHealth(e.sprite, e.goalentity.health);
			}
		}
		if(e.lastshielded)
		{
			if(e.team)
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_CONTROLPOINT, 0.5 * colormapPaletteColor(e.team - 1, false));
			else
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_CONTROLPOINT, '0.5 0.5 0.5');
		}
		else
		{
			if(e.team)
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_CONTROLPOINT, colormapPaletteColor(e.team - 1, false));
			else
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_CONTROLPOINT, '0.75 0.75 0.75');
		}
		WaypointSprite_Ping(e.sprite);

		e.lastteam = e.team + 2;
		e.lastshielded = sh;
		e.lastcaptured = e.iscaptured;
	}
}

void ons_ControlPoint_Touch()
{SELFPARAM();
	entity toucher = other;
	int attackable;

	if(IS_VEHICLE(toucher) && toucher.owner)
	if(autocvar_g_onslaught_allow_vehicle_touch)
		toucher = toucher.owner;
	else
		return;

	if(!IS_PLAYER(toucher)) { return; }
	if(STAT(FROZEN, toucher)) { return; }
	if(IS_DEAD(toucher)) { return; }

	if ( SAME_TEAM(self,toucher) )
	if ( self.iscaptured )
	{
		if(time <= toucher.teleport_antispam)
			Send_Notification(NOTIF_ONE, toucher, MSG_CENTER, CENTER_ONS_TELEPORT_ANTISPAM, rint(toucher.teleport_antispam - time));
		else
			Send_Notification(NOTIF_ONE, toucher, MSG_CENTER, CENTER_ONS_TELEPORT);
	}

	attackable = ons_ControlPoint_Attackable(self, toucher.team);
	if(attackable != 2 && attackable != 4)
		return;
	// we've verified that this player has a legitimate claim to this point,
	// so start building the captured point icon (which only captures this
	// point if it successfully builds without being destroyed first)
	ons_ControlPoint_Icon_Spawn(self, toucher);

	self.ons_toucher = toucher;

	onslaught_updatelinks();
}

void ons_ControlPoint_Think()
{SELFPARAM();
	self.nextthink = time + ONS_CP_THINKRATE;
	CSQCMODEL_AUTOUPDATE(self);
}

void ons_ControlPoint_Reset(entity this)
{
	if(this.goalentity)
		remove(this.goalentity);

	this.goalentity = world;
	this.team = 0;
	this.colormap = 1024;
	this.iscaptured = false;
	this.islinked = false;
	this.isshielded = true;
	this.think = ons_ControlPoint_Think;
	this.ons_toucher = world;
	this.nextthink = time + ONS_CP_THINKRATE;
	setmodel_fixsize(this, MDL_ONS_CP_PAD1);

	WaypointSprite_UpdateMaxHealth(this.sprite, 0);
	WaypointSprite_UpdateRule(this.sprite,this.team,SPRITERULE_TEAMPLAY);

	onslaught_updatelinks();

	SUB_UseTargets(this, this, NULL); // to reset the structures, playerspawns etc.

	CSQCMODEL_AUTOUPDATE(this);
}

void ons_DelayedControlPoint_Setup(entity this)
{
	onslaught_updatelinks();

	// captureshield setup
	ons_CaptureShield_Spawn(self, false);

	CSQCMODEL_AUTOINIT(self);
}

void ons_ControlPoint_Setup(entity cp)
{SELFPARAM();
	// declarations
	setself(cp); // for later usage with droptofloor()

	// main setup
	cp.ons_worldcpnext = ons_worldcplist; // link control point into ons_worldcplist
	ons_worldcplist = cp;

	cp.netname = "Control point";
	cp.team = 0;
	cp.solid = SOLID_BBOX;
	cp.movetype = MOVETYPE_NONE;
	cp.touch = ons_ControlPoint_Touch;
	cp.think = ons_ControlPoint_Think;
	cp.nextthink = time + ONS_CP_THINKRATE;
	cp.reset = ons_ControlPoint_Reset;
	cp.colormap = 1024;
	cp.iscaptured = false;
	cp.islinked = false;
	cp.isshielded = true;

	if(cp.message == "") { cp.message = "a"; }

	// appearence
	setmodel_fixsize(cp, MDL_ONS_CP_PAD1);

	// control point placement
	if((cp.spawnflags & 1) || cp.noalign) // don't drop to floor, just stay at fixed location
	{
		cp.noalign = true;
		cp.movetype = MOVETYPE_NONE;
	}
	else // drop to floor, automatically find a platform and set that as spawn origin
	{
		setorigin(cp, cp.origin + '0 0 20');
		cp.noalign = false;
		setself(cp);
		droptofloor();
		cp.movetype = MOVETYPE_TOSS;
	}

	// waypointsprites
	WaypointSprite_SpawnFixed(WP_Null, self.origin + CPGEN_WAYPOINT_OFFSET, self, sprite, RADARICON_NONE);
	WaypointSprite_UpdateRule(self.sprite, self.team, SPRITERULE_TEAMPLAY);

	InitializeEntity(cp, ons_DelayedControlPoint_Setup, INITPRIO_SETLOCATION);
}


// =========================
// Main Generator Functions
// =========================

entity ons_Generator_Waypoint(entity e)
{
	if (e.isshielded)
		return WP_OnsGenShielded;
	return WP_OnsGen;
}

void ons_Generator_UpdateSprite(entity e)
{
	entity s1 = ons_Generator_Waypoint(e);
	WaypointSprite_UpdateSprites(e.sprite, s1, s1, s1);

	if(e.lastteam != e.team + 2 || e.lastshielded != e.isshielded)
	{
		e.lastteam = e.team + 2;
		e.lastshielded = e.isshielded;
		if(e.lastshielded)
		{
			if(e.team)
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_GENERATOR, 0.5 * colormapPaletteColor(e.team - 1, false));
			else
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_GENERATOR, '0.5 0.5 0.5');
		}
		else
		{
			if(e.team)
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_GENERATOR, colormapPaletteColor(e.team - 1, false));
			else
				WaypointSprite_UpdateTeamRadar(e.sprite, RADARICON_GENERATOR, '0.75 0.75 0.75');
		}
		WaypointSprite_Ping(e.sprite);
	}
}

void ons_GeneratorDamage(entity this, entity inflictor, entity attacker, float damage, int deathtype, vector hitloc, vector force)
{
	if(damage <= 0) { return; }
	if(warmup_stage || gameover) { return; }
	if(!round_handler_IsRoundStarted()) { return; }

	if (attacker != this)
	{
		if (this.isshielded)
		{
			// this is protected by a shield, so ignore the damage
			if (time > this.pain_finished)
				if (IS_PLAYER(attacker))
				{
					play2(attacker, SND(ONS_DAMAGEBLOCKEDBYSHIELD));
					attacker.typehitsound += 1;
					this.pain_finished = time + 1;
				}
			return;
		}
		if (time > this.pain_finished)
		{
			this.pain_finished = time + 10;
			FOREACH_CLIENT(IS_PLAYER(it) && IS_REAL_CLIENT(it) && SAME_TEAM(it, this), Send_Notification(NOTIF_ONE, it, MSG_CENTER, CENTER_GENERATOR_UNDERATTACK));
			play2team(this.team, SND(ONS_GENERATOR_UNDERATTACK));
		}
	}
	this.health = this.health - damage;
	WaypointSprite_UpdateHealth(this.sprite, this.health);
	// choose an animation frame based on health
	this.frame = 10 * bound(0, (1 - this.health / this.max_health), 1);
	// see if the generator is still functional, or dying
	if (this.health > 0)
	{
		this.lasthealth = this.health;
	}
	else
	{
		if (attacker == this)
			Send_Notification(NOTIF_ALL, world, MSG_INFO, APP_TEAM_NUM(this.team, INFO_ONSLAUGHT_GENDESTROYED_OVERTIME));
		else
		{
			Send_Notification(NOTIF_ALL, world, MSG_INFO, APP_TEAM_NUM(this.team, INFO_ONSLAUGHT_GENDESTROYED));
			PlayerScore_Add(attacker, SP_SCORE, 100);
		}
		this.iscaptured = false;
		this.islinked = false;
		this.isshielded = false;
		this.takedamage = DAMAGE_NO; // can't be hurt anymore
		this.event_damage = func_null; // won't do anything if hurt
		this.count = 0;	// reset counter
		this.think = func_null;
		this.nextthink = 0;
		//this.think(); // do the first explosion now

		WaypointSprite_UpdateMaxHealth(this.sprite, 0);
		WaypointSprite_Ping(this.sprite);
		//WaypointSprite_Kill(this.sprite); // can't do this yet, code too poor

		onslaught_updatelinks();
	}

	// Throw some flaming gibs on damage, more damage = more chance for gib
	if(random() < damage/220)
	{
		sound(this, CH_TRIGGER, SND_ROCKET_IMPACT, VOL_BASE, ATTEN_NORM);
	}
	else
	{
		// particles on every hit
		Send_Effect(EFFECT_SPARKS, hitloc, force * -1, 1);

		//sound on every hit
		if (random() < 0.5)
			sound(this, CH_TRIGGER, SND_ONS_HIT1, VOL_BASE, ATTEN_NORM);
		else
			sound(this, CH_TRIGGER, SND_ONS_HIT2, VOL_BASE, ATTEN_NORM);
	}

	this.SendFlags |= GSF_STATUS;
}

void ons_GeneratorThink()
{SELFPARAM();
	self.nextthink = time + GEN_THINKRATE;
	if (!gameover)
	{
		if(!self.isshielded && self.wait < time)
		{
			self.wait = time + 5;
			FOREACH_CLIENT(IS_PLAYER(it) && IS_REAL_CLIENT(it), {
				if(SAME_TEAM(it, self))
				{
					Send_Notification(NOTIF_ONE, it, MSG_CENTER, CENTER_ONS_NOTSHIELDED_TEAM);
					soundto(MSG_ONE, it, CHAN_AUTO, SND(KH_ALARM), VOL_BASE, ATTEN_NONE);    // FIXME: unique sound?
				}
				else
					Send_Notification(NOTIF_ONE, it, MSG_CENTER, APP_TEAM_NUM(self.team, CENTER_ONS_NOTSHIELDED));
			});
		}
	}
}

void ons_GeneratorReset(entity this)
{
	this.team = this.team_saved;
	this.lasthealth = this.max_health = this.health = autocvar_g_onslaught_gen_health;
	this.takedamage = DAMAGE_AIM;
	this.bot_attack = true;
	this.iscaptured = true;
	this.islinked = true;
	this.isshielded = true;
	this.event_damage = ons_GeneratorDamage;
	this.think = ons_GeneratorThink;
	this.nextthink = time + GEN_THINKRATE;

	Net_LinkEntity(this, false, 0, generator_send);

	this.SendFlags = GSF_SETUP; // just incase
	this.SendFlags |= GSF_STATUS;

	WaypointSprite_UpdateMaxHealth(this.sprite, this.max_health);
	WaypointSprite_UpdateHealth(this.sprite, this.health);
	WaypointSprite_UpdateRule(this.sprite,this.team,SPRITERULE_TEAMPLAY);

	onslaught_updatelinks();
}

void ons_DelayedGeneratorSetup(entity this)
{
	// bot waypoints
	waypoint_spawnforitem_force(self, self.origin);
	self.nearestwaypointtimeout = 0; // activate waypointing again
	self.bot_basewaypoint = self.nearestwaypoint;

	// captureshield setup
	ons_CaptureShield_Spawn(self, true);

	onslaught_updatelinks();

	Net_LinkEntity(self, false, 0, generator_send);
}


void onslaught_generator_touch()
{SELFPARAM();
	if ( IS_PLAYER(other) )
	if ( SAME_TEAM(self,other) )
	if ( self.iscaptured )
	{
		Send_Notification(NOTIF_ONE, other, MSG_CENTER, CENTER_ONS_TELEPORT);
	}
}

void ons_GeneratorSetup(entity gen) // called when spawning a generator entity on the map as a spawnfunc
{SELFPARAM();
	// declarations
	int teamnumber = gen.team;
	setself(gen); // for later usage with droptofloor()

	// main setup
	gen.ons_worldgeneratornext = ons_worldgeneratorlist; // link generator into ons_worldgeneratorlist
	ons_worldgeneratorlist = gen;

	gen.netname = sprintf("%s generator", Team_ColoredFullName(teamnumber));
	gen.classname = "onslaught_generator";
	gen.solid = SOLID_BBOX;
	gen.team_saved = teamnumber;
	gen.movetype = MOVETYPE_NONE;
	gen.lasthealth = gen.max_health = gen.health = autocvar_g_onslaught_gen_health;
	gen.takedamage = DAMAGE_AIM;
	gen.bot_attack = true;
	gen.event_damage = ons_GeneratorDamage;
	gen.reset = ons_GeneratorReset;
	gen.think = ons_GeneratorThink;
	gen.nextthink = time + GEN_THINKRATE;
	gen.iscaptured = true;
	gen.islinked = true;
	gen.isshielded = true;
	gen.touch = onslaught_generator_touch;

	// appearence
	// model handled by CSQC
	setsize(gen, GENERATOR_MIN, GENERATOR_MAX);
	setorigin(gen, (gen.origin + CPGEN_SPAWN_OFFSET));
	gen.colormap = 1024 + (teamnumber - 1) * 17;

	// generator placement
	setself(gen);
	droptofloor();

	// waypointsprites
	WaypointSprite_SpawnFixed(WP_Null, self.origin + CPGEN_WAYPOINT_OFFSET, self, sprite, RADARICON_NONE);
	WaypointSprite_UpdateRule(self.sprite, self.team, SPRITERULE_TEAMPLAY);
	WaypointSprite_UpdateMaxHealth(self.sprite, self.max_health);
	WaypointSprite_UpdateHealth(self.sprite, self.health);

	InitializeEntity(gen, ons_DelayedGeneratorSetup, INITPRIO_SETLOCATION);
}


// ===============
//  Round Handler
// ===============

int total_generators;
void Onslaught_count_generators()
{
	entity e;
	total_generators = redowned = blueowned = yellowowned = pinkowned = 0;
	for(e = ons_worldgeneratorlist; e; e = e.ons_worldgeneratornext)
	{
		++total_generators;
		redowned += (e.team == NUM_TEAM_1 && e.health > 0);
		blueowned += (e.team == NUM_TEAM_2 && e.health > 0);
		yellowowned += (e.team == NUM_TEAM_3 && e.health > 0);
		pinkowned += (e.team == NUM_TEAM_4 && e.health > 0);
	}
}

int Onslaught_GetWinnerTeam()
{
	int winner_team = 0;
	if(redowned > 0)
		winner_team = NUM_TEAM_1;
	if(blueowned > 0)
	{
		if(winner_team) return 0;
		winner_team = NUM_TEAM_2;
	}
	if(yellowowned > 0)
	{
		if(winner_team) return 0;
		winner_team = NUM_TEAM_3;
	}
	if(pinkowned > 0)
	{
		if(winner_team) return 0;
		winner_team = NUM_TEAM_4;
	}
	if(winner_team)
		return winner_team;
	return -1; // no generators left?
}

void nades_Clear(entity e);

#define ONS_OWNED_GENERATORS() ((redowned > 0) + (blueowned > 0) + (yellowowned > 0) + (pinkowned > 0))
#define ONS_OWNED_GENERATORS_OK() (ONS_OWNED_GENERATORS() > 1)
bool Onslaught_CheckWinner()
{
	if ((autocvar_timelimit && time > game_starttime + autocvar_timelimit * 60) || (round_handler_GetEndTime() > 0 && round_handler_GetEndTime() - time <= 0))
	{
		ons_stalemate = true;

		if (!wpforenemy_announced)
		{
			Send_Notification(NOTIF_ALL, world, MSG_CENTER, CENTER_OVERTIME_CONTROLPOINT);
			sound(world, CH_INFO, SND_ONS_GENERATOR_DECAY, VOL_BASE, ATTEN_NONE);

			wpforenemy_announced = true;
		}

		entity tmp_entity; // temporary entity
		float d;
		for(tmp_entity = ons_worldgeneratorlist; tmp_entity; tmp_entity = tmp_entity.ons_worldgeneratornext) if(time >= tmp_entity.ons_overtime_damagedelay)
		{
			// tmp_entity.max_health / 300 gives 5 minutes of overtime.
			// control points reduce the overtime duration.
			d = 1;
			entity e;
			for(e = ons_worldcplist; e; e = e.ons_worldcpnext)
			{
				if(DIFF_TEAM(e, tmp_entity))
				if(e.islinked)
					d = d + 1;
			}

			if(autocvar_g_campaign && autocvar__campaign_testrun)
				d = d * tmp_entity.max_health;
			else
				d = d * tmp_entity.max_health / max(30, 60 * autocvar_timelimit_suddendeath);

			Damage(tmp_entity, tmp_entity, tmp_entity, d, DEATH_HURTTRIGGER.m_id, tmp_entity.origin, '0 0 0');

			tmp_entity.sprite.SendFlags |= 16;

			tmp_entity.ons_overtime_damagedelay = time + 1;
		}
	}
	else { wpforenemy_announced = false; ons_stalemate = false; }

	Onslaught_count_generators();

	if(ONS_OWNED_GENERATORS_OK())
		return 0;

	int winner_team = Onslaught_GetWinnerTeam();

	if(winner_team > 0)
	{
		Send_Notification(NOTIF_ALL, world, MSG_CENTER, APP_TEAM_NUM(winner_team, CENTER_ROUND_TEAM_WIN));
		Send_Notification(NOTIF_ALL, world, MSG_INFO, APP_TEAM_NUM(winner_team, INFO_ROUND_TEAM_WIN));
		TeamScore_AddToTeam(winner_team, ST_ONS_CAPS, +1);
	}
	else if(winner_team == -1)
	{
		Send_Notification(NOTIF_ALL, world, MSG_CENTER, CENTER_ROUND_TIED);
		Send_Notification(NOTIF_ALL, world, MSG_INFO, INFO_ROUND_TIED);
	}

	ons_stalemate = false;

	play2all(SND(CTF_CAPTURE(winner_team)));

	round_handler_Init(7, autocvar_g_onslaught_warmup, autocvar_g_onslaught_round_timelimit);

	FOREACH_CLIENT(IS_PLAYER(it), {
		it.ons_roundlost = true;
		it.player_blocked = true;

		nades_Clear(it);
	});

	return 1;
}

bool Onslaught_CheckPlayers()
{
	return 1;
}

void Onslaught_RoundStart()
{
	entity tmp_entity;
	FOREACH_CLIENT(IS_PLAYER(it), it.player_blocked = false);

	for(tmp_entity = ons_worldcplist; tmp_entity; tmp_entity = tmp_entity.ons_worldcpnext)
		tmp_entity.sprite.SendFlags |= 16;

	for(tmp_entity = ons_worldgeneratorlist; tmp_entity; tmp_entity = tmp_entity.ons_worldgeneratornext)
		tmp_entity.sprite.SendFlags |= 16;
}


// ================
// Bot player logic
// ================

// NOTE: LEGACY CODE, needs to be re-written!

void havocbot_goalrating_ons_offenseitems(entity this, float ratingscale, vector org, float sradius)
{
	entity head;
	float t, c;
	bool needarmor = false, needweapons = false;

	// Needs armor/health?
	if(this.health<100)
		needarmor = true;

	// Needs weapons?
	c = 0;
	FOREACH(Weapons, it != WEP_Null, {
		if(this.weapons & (it.m_wepset))
		if(++c >= 4)
			break;
	});

	if(c<4)
		needweapons = true;

	if(!needweapons && !needarmor)
		return;

	LOG_DEBUG(strcat(this.netname, " needs weapons ", ftos(needweapons) , "\n"));
	LOG_DEBUG(strcat(this.netname, " needs armor ", ftos(needarmor) , "\n"));

	// See what is around
	head = findchainfloat(bot_pickup, true);
	while (head)
	{
		// gather health and armor only
		if (head.solid)
		if ( ((head.health || head.armorvalue) && needarmor) || (head.weapons && needweapons ) )
		if (vlen(head.origin - org) < sradius)
		{
			t = head.bot_pickupevalfunc(this, head);
			if (t > 0)
				navigation_routerating(this, head, t * ratingscale, 500);
		}
		head = head.chain;
	}
}

void havocbot_role_ons_setrole(entity this, int role)
{
	LOG_DEBUG(strcat(this.netname," switched to "));
	switch(role)
	{
		case HAVOCBOT_ONS_ROLE_DEFENSE:
			LOG_DEBUG("defense");
			this.havocbot_role = havocbot_role_ons_defense;
			this.havocbot_role_flags = HAVOCBOT_ONS_ROLE_DEFENSE;
			this.havocbot_role_timeout = 0;
			break;
		case HAVOCBOT_ONS_ROLE_ASSISTANT:
			LOG_DEBUG("assistant");
			this.havocbot_role = havocbot_role_ons_assistant;
			this.havocbot_role_flags = HAVOCBOT_ONS_ROLE_ASSISTANT;
			this.havocbot_role_timeout = 0;
			break;
		case HAVOCBOT_ONS_ROLE_OFFENSE:
			LOG_DEBUG("offense");
			this.havocbot_role = havocbot_role_ons_offense;
			this.havocbot_role_flags = HAVOCBOT_ONS_ROLE_OFFENSE;
			this.havocbot_role_timeout = 0;
			break;
	}
	LOG_DEBUG("\n");
}

void havocbot_goalrating_ons_controlpoints_attack(entity this, float ratingscale)
{
	entity cp, cp1, cp2, best, wp;
	float radius, bestvalue;
	int c;
	bool found;

	// Filter control points
	for(cp2 = ons_worldcplist; cp2; cp2 = cp2.ons_worldcpnext)
	{
		cp2.wpcost = c = 0;
		cp2.wpconsidered = false;

		if(cp2.isshielded)
			continue;

		// Ignore owned controlpoints
		if(!(cp2.isgenneighbor[this.team] || cp2.iscpneighbor[this.team]))
			continue;

		// Count team mates interested in this control point
		// (easier and cleaner than keeping counters per cp and teams)
		FOREACH_CLIENT(IS_PLAYER(it), {
			if(SAME_TEAM(it, this))
			if(it.havocbot_role_flags & HAVOCBOT_ONS_ROLE_OFFENSE)
			if(it.havocbot_ons_target == cp2)
				++c;
		});

		// NOTE: probably decrease the cost of attackable control points
		cp2.wpcost = c;
		cp2.wpconsidered = true;
	}

	// We'll consider only the best case
	bestvalue = 99999999999;
	cp = world;
	for(cp1 = ons_worldcplist; cp1; cp1 = cp1.ons_worldcpnext)
	{
		if (!cp1.wpconsidered)
			continue;

		if(cp1.wpcost<bestvalue)
		{
			bestvalue = cp1.wpcost;
			cp = cp1;
			this.havocbot_ons_target = cp1;
		}
	}

	if (!cp)
		return;

	LOG_DEBUG(strcat(this.netname, " chose cp ranked ", ftos(bestvalue), "\n"));

	if(cp.goalentity)
	{
		// Should be attacked
		// Rate waypoints near it
		found = false;
		best = world;
		bestvalue = 99999999999;
		for(radius=0; radius<1000 && !found; radius+=500)
		{
			for(wp=findradius(cp.origin,radius); wp; wp=wp.chain)
			{
				if(!(wp.wpflags & WAYPOINTFLAG_GENERATED))
				if(wp.classname=="waypoint")
				if(checkpvs(wp.origin,cp))
				{
					found = true;
					if(wp.cnt<bestvalue)
					{
						best = wp;
						bestvalue = wp.cnt;
					}
				}
			}
		}

		if(best)
		{
			navigation_routerating(this, best, ratingscale, 10000);
			best.cnt += 1;

			this.havocbot_attack_time = 0;
			if(checkpvs(this.view_ofs,cp))
			if(checkpvs(this.view_ofs,best))
				this.havocbot_attack_time = time + 2;
		}
		else
		{
			navigation_routerating(this, cp, ratingscale, 10000);
		}
		LOG_DEBUG(strcat(this.netname, " found an attackable controlpoint at ", vtos(cp.origin) ,"\n"));
	}
	else
	{
		// Should be touched
		LOG_DEBUG(strcat(this.netname, " found a touchable controlpoint at ", vtos(cp.origin) ,"\n"));
		found = false;

		// Look for auto generated waypoint
		if (!bot_waypoints_for_items)
		for (wp = findradius(cp.origin,100); wp; wp = wp.chain)
		{
			if(wp.classname=="waypoint")
			{
				navigation_routerating(this, wp, ratingscale, 10000);
				found = true;
			}
		}

		// Nothing found, rate the controlpoint itself
		if (!found)
			navigation_routerating(this, cp, ratingscale, 10000);
	}
}

bool havocbot_goalrating_ons_generator_attack(entity this, float ratingscale)
{
	entity g, wp, bestwp;
	bool found;
	int best;

	for(g = ons_worldgeneratorlist; g; g = g.ons_worldgeneratornext)
	{
		if(SAME_TEAM(g, this) || g.isshielded)
			continue;

		// Should be attacked
		// Rate waypoints near it
		found = false;
		bestwp = world;
		best = 99999999999;

		for(wp=findradius(g.origin,400); wp; wp=wp.chain)
		{
			if(wp.classname=="waypoint")
			if(checkpvs(wp.origin,g))
			{
				found = true;
				if(wp.cnt<best)
				{
					bestwp = wp;
					best = wp.cnt;
				}
			}
		}

		if(bestwp)
		{
			LOG_DEBUG("waypoints found around generator\n");
			navigation_routerating(this, bestwp, ratingscale, 10000);
			bestwp.cnt += 1;

			this.havocbot_attack_time = 0;
			if(checkpvs(this.view_ofs,g))
			if(checkpvs(this.view_ofs,bestwp))
				this.havocbot_attack_time = time + 5;

			return true;
		}
		else
		{
			LOG_DEBUG("generator found without waypoints around\n");
			// if there aren't waypoints near the generator go straight to it
			navigation_routerating(this, g, ratingscale, 10000);
			this.havocbot_attack_time = 0;
			return true;
		}
	}
	return false;
}

void havocbot_role_ons_offense(entity this)
{
	if(IS_DEAD(this))
	{
		this.havocbot_attack_time = 0;
		havocbot_ons_reset_role(this);
		return;
	}

	// Set the role timeout if necessary
	if (!this.havocbot_role_timeout)
		this.havocbot_role_timeout = time + 120;

	if (time > this.havocbot_role_timeout)
	{
		havocbot_ons_reset_role(this);
		return;
	}

	if(this.havocbot_attack_time>time)
		return;

	if (this.bot_strategytime < time)
	{
		navigation_goalrating_start(this);
		havocbot_goalrating_enemyplayers(this, 20000, this.origin, 650);
		if(!havocbot_goalrating_ons_generator_attack(this, 20000))
			havocbot_goalrating_ons_controlpoints_attack(this, 20000);
		havocbot_goalrating_ons_offenseitems(this, 10000, this.origin, 10000);
		navigation_goalrating_end(this);

		this.bot_strategytime = time + autocvar_bot_ai_strategyinterval;
	}
}

void havocbot_role_ons_assistant(entity this)
{
	havocbot_ons_reset_role(this);
}

void havocbot_role_ons_defense(entity this)
{
	havocbot_ons_reset_role(this);
}

void havocbot_ons_reset_role(entity this)
{
	if(IS_DEAD(this))
		return;

	this.havocbot_ons_target = world;

	// TODO: Defend control points or generator if necessary

	havocbot_role_ons_setrole(this, HAVOCBOT_ONS_ROLE_OFFENSE);
}


/*
 * Find control point or generator owned by the same team self which is nearest to pos
 * if max_dist is positive, only control points within this range will be considered
 */
entity ons_Nearest_ControlPoint(vector pos, float max_dist)
{SELFPARAM();
	entity tmp_entity, closest_target = world;
	tmp_entity = findchain(classname, "onslaught_controlpoint");
	while(tmp_entity)
	{
		if(SAME_TEAM(tmp_entity, self))
		if(tmp_entity.iscaptured)
		if(max_dist <= 0 || vdist(tmp_entity.origin - pos, <=, max_dist))
		if(vlen2(tmp_entity.origin - pos) <= vlen2(closest_target.origin - pos) || closest_target == world)
			closest_target = tmp_entity;
		tmp_entity = tmp_entity.chain;
	}
	tmp_entity = findchain(classname, "onslaught_generator");
	while(tmp_entity)
	{
		if(SAME_TEAM(tmp_entity, self))
		if(max_dist <= 0 || vdist(tmp_entity.origin - pos, <, max_dist))
		if(vlen2(tmp_entity.origin - pos) <= vlen2(closest_target.origin - pos) || closest_target == world)
			closest_target = tmp_entity;
		tmp_entity = tmp_entity.chain;
	}

	return closest_target;
}

/*
 * Find control point or generator owned by the same team self which is nearest to pos
 * if max_dist is positive, only control points within this range will be considered
 * This function only check distances on the XY plane, disregarding Z
 */
entity ons_Nearest_ControlPoint_2D(vector pos, float max_dist)
{SELFPARAM();
	entity tmp_entity, closest_target = world;
	vector delta;
	float smallest_distance = 0, distance;

	tmp_entity = findchain(classname, "onslaught_controlpoint");
	while(tmp_entity)
	{
		delta = tmp_entity.origin - pos;
		delta_z = 0;
		distance = vlen(delta);

		if(SAME_TEAM(tmp_entity, self))
		if(tmp_entity.iscaptured)
		if(max_dist <= 0 || distance <= max_dist)
		if(closest_target == world || distance <= smallest_distance )
		{
			closest_target = tmp_entity;
			smallest_distance = distance;
		}

		tmp_entity = tmp_entity.chain;
	}
	tmp_entity = findchain(classname, "onslaught_generator");
	while(tmp_entity)
	{
		delta = tmp_entity.origin - pos;
		delta_z = 0;
		distance = vlen(delta);

		if(SAME_TEAM(tmp_entity, self))
		if(max_dist <= 0 || distance <= max_dist)
		if(closest_target == world || distance <= smallest_distance )
		{
			closest_target = tmp_entity;
			smallest_distance = distance;
		}

		tmp_entity = tmp_entity.chain;
	}

	return closest_target;
}
/**
 * find the number of control points and generators in the same team as this
 */
int ons_Count_SelfControlPoints(entity this)
{
	entity tmp_entity;
	tmp_entity = findchain(classname, "onslaught_controlpoint");
	int n = 0;
	while(tmp_entity)
	{
		if(SAME_TEAM(tmp_entity, this))
		if(tmp_entity.iscaptured)
			n++;
		tmp_entity = tmp_entity.chain;
	}
	tmp_entity = findchain(classname, "onslaught_generator");
	while(tmp_entity)
	{
		if(SAME_TEAM(tmp_entity, this))
			n++;
		tmp_entity = tmp_entity.chain;
	}
	return n;
}

/**
 * Teleport player to a random position near tele_target
 * if tele_effects is true, teleport sound+particles are created
 * return false on failure
 */
bool ons_Teleport(entity player, entity tele_target, float range, bool tele_effects)
{
	if ( !tele_target )
		return false;

	int i;
	vector loc;
	float theta;
	// narrow the range for each iteration to increase chances that a spawnpoint
	// can be found even if there's little room around the control point
	float iteration_scale = 1;
	for(i = 0; i < 16; ++i)
	{
		iteration_scale -= i / 16;
		theta = random() * 2 * M_PI;
		loc_y = sin(theta);
		loc_x = cos(theta);
		loc_z = 0;
		loc *= random() * range * iteration_scale;

		loc += tele_target.origin + '0 0 128' * iteration_scale;

		tracebox(loc, STAT(PL_MIN, NULL), STAT(PL_MAX, NULL), loc, MOVE_NORMAL, player);
		if(trace_fraction == 1.0 && !trace_startsolid)
		{
			traceline(tele_target.origin, loc, MOVE_NOMONSTERS, tele_target); // double check to make sure we're not spawning outside the world
			if(trace_fraction == 1.0 && !trace_startsolid)
			{
				if ( tele_effects )
				{
					Send_Effect(EFFECT_TELEPORT, player.origin, '0 0 0', 1);
					sound (player, CH_TRIGGER, SND_TELEPORT, VOL_BASE, ATTEN_NORM);
				}
				setorigin(player, loc);
				player.angles = '0 1 0' * ( theta * RAD2DEG + 180 );
				makevectors(player.angles);
				player.fixangle = true;
				player.teleport_antispam = time + autocvar_g_onslaught_teleport_wait;

				if ( tele_effects )
					Send_Effect(EFFECT_TELEPORT, player.origin + v_forward * 32, '0 0 0', 1);
				return true;
			}
		}
	}

	return false;
}

// ==============
// Hook Functions
// ==============

MUTATOR_HOOKFUNCTION(ons, reset_map_global)
{SELFPARAM();
	FOREACH_CLIENT(IS_PLAYER(it), {
		it.ons_roundlost = false;
		it.ons_deathloc = '0 0 0';
		WITHSELF(it, PutClientInServer());
	});
	return false;
}

MUTATOR_HOOKFUNCTION(ons, ClientDisconnect)
{SELFPARAM();
	self.ons_deathloc = '0 0 0';
	return false;
}

MUTATOR_HOOKFUNCTION(ons, MakePlayerObserver)
{SELFPARAM();
	self.ons_deathloc = '0 0 0';
	return false;
}

MUTATOR_HOOKFUNCTION(ons, PlayerSpawn)
{SELFPARAM();
	if(!round_handler_IsRoundStarted())
	{
		self.player_blocked = true;
		return false;
	}

	entity l;
	for(l = ons_worldgeneratorlist; l; l = l.ons_worldgeneratornext)
	{
		l.sprite.SendFlags |= 16;
	}
	for(l = ons_worldcplist; l; l = l.ons_worldcpnext)
	{
		l.sprite.SendFlags |= 16;
	}

	if(ons_stalemate) { Send_Notification(NOTIF_ONE, self, MSG_CENTER, CENTER_OVERTIME_CONTROLPOINT); }

	if ( autocvar_g_onslaught_spawn_choose )
	if ( self.ons_spawn_by )
	if ( ons_Teleport(self,self.ons_spawn_by,autocvar_g_onslaught_teleport_radius,false) )
	{
		self.ons_spawn_by = world;
		return false;
	}

	if(autocvar_g_onslaught_spawn_at_controlpoints)
	if(random() <= autocvar_g_onslaught_spawn_at_controlpoints_chance)
	{
		float random_target = autocvar_g_onslaught_spawn_at_controlpoints_random;
		entity tmp_entity, closest_target = world;
		vector spawn_loc = self.ons_deathloc;

		// new joining player or round reset, don't bother checking
		if(spawn_loc == '0 0 0') { return false; }

		if(random_target) { RandomSelection_Init(); }

		for(tmp_entity = ons_worldcplist; tmp_entity; tmp_entity = tmp_entity.ons_worldcpnext)
		{
			if(SAME_TEAM(tmp_entity, self))
			if(random_target)
				RandomSelection_Add(tmp_entity, 0, string_null, 1, 1);
			else if(vlen(tmp_entity.origin - spawn_loc) <= vlen(closest_target.origin - spawn_loc) || closest_target == world)
				closest_target = tmp_entity;
		}

		if(random_target) { closest_target = RandomSelection_chosen_ent; }

		if(closest_target)
		{
			float i;
			vector loc;
			float iteration_scale = 1;
			for(i = 0; i < 10; ++i)
			{
				iteration_scale -= i / 10;
				loc = closest_target.origin + '0 0 96' * iteration_scale;
				loc += ('0 1 0' * random()) * 128 * iteration_scale;
				tracebox(loc, STAT(PL_MIN, NULL), STAT(PL_MAX, NULL), loc, MOVE_NORMAL, self);
				if(trace_fraction == 1.0 && !trace_startsolid)
				{
					traceline(closest_target.origin, loc, MOVE_NOMONSTERS, closest_target); // double check to make sure we're not spawning outside the world
					if(trace_fraction == 1.0 && !trace_startsolid)
					{
						setorigin(self, loc);
						self.angles = normalize(loc - closest_target.origin) * RAD2DEG;
						return false;
					}
				}
			}
		}
	}

	if(autocvar_g_onslaught_spawn_at_generator)
	if(random() <= autocvar_g_onslaught_spawn_at_generator_chance)
	{
		float random_target = autocvar_g_onslaught_spawn_at_generator_random;
		entity tmp_entity, closest_target = world;
		vector spawn_loc = self.ons_deathloc;

		// new joining player or round reset, don't bother checking
		if(spawn_loc == '0 0 0') { return false; }

		if(random_target) { RandomSelection_Init(); }

		for(tmp_entity = ons_worldgeneratorlist; tmp_entity; tmp_entity = tmp_entity.ons_worldgeneratornext)
		{
			if(random_target)
				RandomSelection_Add(tmp_entity, 0, string_null, 1, 1);
			else
			{
				if(SAME_TEAM(tmp_entity, self))
				if(vlen(tmp_entity.origin - spawn_loc) <= vlen(closest_target.origin - spawn_loc) || closest_target == world)
					closest_target = tmp_entity;
			}
		}

		if(random_target) { closest_target = RandomSelection_chosen_ent; }

		if(closest_target)
		{
			float i;
			vector loc;
			float iteration_scale = 1;
			for(i = 0; i < 10; ++i)
			{
				iteration_scale -= i / 10;
				loc = closest_target.origin + '0 0 128' * iteration_scale;
				loc += ('0 1 0' * random()) * 256 * iteration_scale;
				tracebox(loc, STAT(PL_MIN, NULL), STAT(PL_MAX, NULL), loc, MOVE_NORMAL, self);
				if(trace_fraction == 1.0 && !trace_startsolid)
				{
					traceline(closest_target.origin, loc, MOVE_NOMONSTERS, closest_target); // double check to make sure we're not spawning outside the world
					if(trace_fraction == 1.0 && !trace_startsolid)
					{
						setorigin(self, loc);
						self.angles = normalize(loc - closest_target.origin) * RAD2DEG;
						return false;
					}
				}
			}
		}
	}

	return false;
}

MUTATOR_HOOKFUNCTION(ons, PlayerDies)
{
	frag_target.ons_deathloc = frag_target.origin;
	entity l;
	for(l = ons_worldgeneratorlist; l; l = l.ons_worldgeneratornext)
	{
		l.sprite.SendFlags |= 16;
	}
	for(l = ons_worldcplist; l; l = l.ons_worldcpnext)
	{
		l.sprite.SendFlags |= 16;
	}

	if ( autocvar_g_onslaught_spawn_choose )
	if ( ons_Count_SelfControlPoints(frag_target) > 1 )
		stuffcmd(frag_target, "qc_cmd_cl hud clickradar\n");

	return false;
}

MUTATOR_HOOKFUNCTION(ons, MonsterMove)
{SELFPARAM();
	entity e = find(world, targetname, self.target);
	if (e != world)
		self.team = e.team;

	return false;
}

void ons_MonsterSpawn_Delayed(entity this)
{
	entity own = self.owner;

	if(!own) { remove(this); return; }

	if(own.targetname)
	{
		entity e = find(world, target, own.targetname);
		if(e != world)
		{
			own.team = e.team;

			own.use(own, e, NULL);
		}
	}

	remove(this);
}

MUTATOR_HOOKFUNCTION(ons, MonsterSpawn)
{SELFPARAM();
	entity e = spawn();
	e.owner = self;
	InitializeEntity(e, ons_MonsterSpawn_Delayed, INITPRIO_FINDTARGET);

	return false;
}

void ons_TurretSpawn_Delayed(entity this)
{
	entity own = self.owner;

	if(!own) { remove(self); return; }

	if(own.targetname)
	{
		entity e = find(world, target, own.targetname);
		if(e != world)
		{
			own.team = e.team;
			own.active = ACTIVE_NOT;

			own.use(own, e, NULL);
		}
	}

	remove(self);
}

MUTATOR_HOOKFUNCTION(ons, TurretSpawn)
{SELFPARAM();
	entity e = spawn();
	e.owner = self;
	InitializeEntity(e, ons_TurretSpawn_Delayed, INITPRIO_FINDTARGET);

	return false;
}

MUTATOR_HOOKFUNCTION(ons, HavocBot_ChooseRole)
{SELFPARAM();
	havocbot_ons_reset_role(self);
	return true;
}

MUTATOR_HOOKFUNCTION(ons, GetTeamCount)
{
	// onslaught is special
	for(entity tmp_entity = ons_worldgeneratorlist; tmp_entity; tmp_entity = tmp_entity.ons_worldgeneratornext)
	{
		switch(tmp_entity.team)
		{
			case NUM_TEAM_1: c1 = 0; break;
			case NUM_TEAM_2: c2 = 0; break;
			case NUM_TEAM_3: c3 = 0; break;
			case NUM_TEAM_4: c4 = 0; break;
		}
	}

	return true;
}

MUTATOR_HOOKFUNCTION(ons, SpectateCopy)
{SELFPARAM();
	self.ons_roundlost = other.ons_roundlost; // make spectators see it too
	return false;
}

MUTATOR_HOOKFUNCTION(ons, SV_ParseClientCommand)
{SELFPARAM();
	if(MUTATOR_RETURNVALUE) // command was already handled?
		return false;

	if ( cmd_name == "ons_spawn" )
	{
		vector pos = self.origin;
		if(cmd_argc > 1)
			pos_x = stof(argv(1));
		if(cmd_argc > 2)
			pos_y = stof(argv(2));
		if(cmd_argc > 3)
			pos_z = stof(argv(3));

		if ( IS_PLAYER(self) )
		{
			if ( !STAT(FROZEN, self) )
			{
				entity source_point = ons_Nearest_ControlPoint(self.origin, autocvar_g_onslaught_teleport_radius);

				if ( !source_point && self.health > 0 )
				{
					sprint(self, "\nYou need to be next to a control point\n");
					return 1;
				}


				entity closest_target = ons_Nearest_ControlPoint_2D(pos, autocvar_g_onslaught_click_radius);

				if ( closest_target == world )
				{
					sprint(self, "\nNo control point found\n");
					return 1;
				}

				if ( self.health <= 0 )
				{
					self.ons_spawn_by = closest_target;
					self.respawn_flags = self.respawn_flags | RESPAWN_FORCE;
				}
				else
				{
					if ( source_point == closest_target )
					{
						sprint(self, "\nTeleporting to the same point\n");
						return 1;
					}

					if ( !ons_Teleport(self,closest_target,autocvar_g_onslaught_teleport_radius,true) )
						sprint(self, "\nUnable to teleport there\n");
				}

				return 1;
			}

			sprint(self, "\nNo teleportation for you\n");
		}

		return 1;
	}
	return 0;
}

MUTATOR_HOOKFUNCTION(ons, PlayerUseKey)
{SELFPARAM();
	if(MUTATOR_RETURNVALUE || gameover) { return false; }

	if((time > self.teleport_antispam) && (!IS_DEAD(self)) && !self.vehicle)
	{
		entity source_point = ons_Nearest_ControlPoint(self.origin, autocvar_g_onslaught_teleport_radius);
		if ( source_point )
		{
			stuffcmd(self, "qc_cmd_cl hud clickradar\n");
			return true;
		}
	}

	return false;
}

MUTATOR_HOOKFUNCTION(ons, PlayHitsound)
{
	return (frag_victim.classname == "onslaught_generator" && !frag_victim.isshielded)
		|| (frag_victim.classname == "onslaught_controlpoint_icon" && !frag_victim.owner.isshielded);
}

MUTATOR_HOOKFUNCTION(ons, SendWaypoint)
{
    SELFPARAM();
	if(wp_sendflags & 16)
	{
		if(self.owner.classname == "onslaught_controlpoint")
		{
			entity wp_owner = self.owner;
			entity e = WaypointSprite_getviewentity(wp_sendto);
			if(SAME_TEAM(e, wp_owner) && wp_owner.goalentity.health >= wp_owner.goalentity.max_health) { wp_flag |= 2; }
			if(!ons_ControlPoint_Attackable(wp_owner, e.team)) { wp_flag |= 2; }
		}
		if(self.owner.classname == "onslaught_generator")
		{
			entity wp_owner = self.owner;
			if(wp_owner.isshielded && wp_owner.health >= wp_owner.max_health) { wp_flag |= 2; }
			if(wp_owner.health <= 0) { wp_flag |= 2; }
		}
	}

	return false;
}

MUTATOR_HOOKFUNCTION(ons, TurretValidateTarget)
{
	if(substring(turret_target.classname, 0, 10) == "onslaught_") // don't attack onslaught targets, that's the player's job!
	{
		ret_float = -3;
		return true;
	}

	return false;
}

MUTATOR_HOOKFUNCTION(ons, TurretThink)
{
    SELFPARAM();
	// ONS uses somewhat backwards linking.
	if(self.target)
	{
		entity e = find(world, targetname, self.target);
		if (e != world)
			self.team = e.team;
	}

	if(self.team != self.tur_head.team)
		turret_respawn();

	return false;
}


// ==========
// Spawnfuncs
// ==========

/*QUAKED spawnfunc_onslaught_link (0 .5 .8) (-16 -16 -16) (16 16 16)
  Link between control points.

  This entity targets two different spawnfunc_onslaught_controlpoint or spawnfunc_onslaught_generator entities, and suppresses shielding on both if they are owned by different teams.

keys:
"target" - first control point.
"target2" - second control point.
 */
spawnfunc(onslaught_link)
{
	if(!g_onslaught) { remove(self); return; }

	if (self.target == "" || self.target2 == "")
		objerror("target and target2 must be set\n");

	self.ons_worldlinknext = ons_worldlinklist; // link into ons_worldlinklist
	ons_worldlinklist = self;

	InitializeEntity(self, ons_DelayedLinkSetup, INITPRIO_FINDTARGET);
	Net_LinkEntity(self, false, 0, ons_Link_Send);
}

/*QUAKED spawnfunc_onslaught_controlpoint (0 .5 .8) (-32 -32 0) (32 32 128)
  Control point. Be sure to give this enough clearance so that the shootable part has room to exist

  This should link to an spawnfunc_onslaught_controlpoint entity or spawnfunc_onslaught_generator entity.

keys:
"targetname" - name that spawnfunc_onslaught_link entities will use to target this.
"target" - target any entities that are tied to this control point, such as vehicles and buildable structure entities.
"message" - name of this control point (should reflect the location in the map, such as "center bridge", "north tower", etc)
 */

spawnfunc(onslaught_controlpoint)
{
	if(!g_onslaught) { remove(self); return; }

	ons_ControlPoint_Setup(self);
}

/*QUAKED spawnfunc_onslaught_generator (0 .5 .8) (-32 -32 -24) (32 32 64)
  Base generator.

  spawnfunc_onslaught_link entities can target this.

keys:
"team" - team that owns this generator (5 = red, 14 = blue, etc), MUST BE SET.
"targetname" - name that spawnfunc_onslaught_link entities will use to target this.
 */
spawnfunc(onslaught_generator)
{
	if(!g_onslaught) { remove(self); return; }
	if(!self.team) { objerror("team must be set"); }

	ons_GeneratorSetup(self);
}

// scoreboard setup
void ons_ScoreRules()
{
	CheckAllowedTeams(world);
	ScoreRules_basics(((c4>=0) ? 4 : (c3>=0) ? 3 : 2), SFL_SORT_PRIO_PRIMARY, 0, true);
	ScoreInfo_SetLabel_TeamScore  (ST_ONS_CAPS,     "destroyed", SFL_SORT_PRIO_PRIMARY);
	ScoreInfo_SetLabel_PlayerScore(SP_ONS_CAPS,     "caps",      SFL_SORT_PRIO_SECONDARY);
	ScoreInfo_SetLabel_PlayerScore(SP_ONS_TAKES,	"takes",     0);
	ScoreRules_basics_end();
}

void ons_DelayedInit(entity this) // Do this check with a delay so we can wait for teams to be set up
{
	ons_ScoreRules();

	round_handler_Spawn(Onslaught_CheckPlayers, Onslaught_CheckWinner, Onslaught_RoundStart);
	round_handler_Init(5, autocvar_g_onslaught_warmup, autocvar_g_onslaught_round_timelimit);
}

void ons_Initialize()
{
	g_onslaught = true;
	ons_captureshield_force = autocvar_g_onslaught_shield_force;

	InitializeEntity(world, ons_DelayedInit, INITPRIO_GAMETYPE);
}

#endif
