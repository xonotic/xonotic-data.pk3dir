#pragma once

// water levels
const int WATERLEVEL_NONE = 0;
const int WATERLEVEL_WETFEET = 1;
const int WATERLEVEL_SWIMMING = 2;
const int WATERLEVEL_SUBMERGED = 3;

#define IS_ONGROUND(s)                      boolean((s).flags & FL_ONGROUND)
#define SET_ONGROUND(s)                     ((s).flags |= FL_ONGROUND)
#define UNSET_ONGROUND(s)                   ((s).flags &= ~FL_ONGROUND)
#define IS_ONSLICK(s)						boolean((s).flags & FL_ONSLICK)
#define SET_ONSLICK(s)						((s).flags |= FL_ONSLICK)
#define UNSET_ONSLICK(s)					((s).flags &= ~FL_ONSLICK)

#define GAMEPLAYFIX_DOWNTRACEONGROUND(s)    STAT(GAMEPLAYFIX_DOWNTRACEONGROUND)
#define GAMEPLAYFIX_EASIERWATERJUMP(s)      STAT(GAMEPLAYFIX_EASIERWATERJUMP)
#define GAMEPLAYFIX_STEPDOWN(s)             STAT(GAMEPLAYFIX_STEPDOWN)
#define GAMEPLAYFIX_STEPMULTIPLETIMES(s)    STAT(GAMEPLAYFIX_STEPMULTIPLETIMES)
#define GAMEPLAYFIX_UNSTICKPLAYERS(s)       STAT(GAMEPLAYFIX_UNSTICKPLAYERS)
#define GAMEPLAYFIX_WATERTRANSITION(s) 		STAT(GAMEPLAYFIX_WATERTRANSITION)
#define UPWARD_VELOCITY_CLEARS_ONGROUND(s)  STAT(GAMEPLAYFIX_UPVELOCITYCLEARSONGROUND)

#define PHYS_STEPHEIGHT(s)                  STAT(MOVEVARS_STEPHEIGHT)
#define PHYS_NOSTEP(s)                      STAT(NOSTEP)
#define PHYS_JUMPSTEP(s)                    STAT(MOVEVARS_JUMPSTEP)
#define PHYS_WALLFRICTION(s)                STAT(MOVEVARS_WALLFRICTION)

#define PHYS_WALLCLIP(s)					STAT(MOVEVARS_WALLCLIP)

#ifdef CSQC
.float bouncestop;
.float bouncefactor;

	#define GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE  (boolean(moveflags & MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE))
	#define GAMEPLAYFIX_NOGRAVITYONGROUND           (boolean(moveflags & MOVEFLAG_NOGRAVITYONGROUND))
	#define GAMEPLAYFIX_Q2AIRACCELERATE             (boolean(moveflags & MOVEFLAG_Q2AIRACCELERATE))

	#define PHYS_GRAVITY(s)                     STAT(MOVEVARS_GRAVITY, s)
	// FIXME: 0 doesn't mean zero gravity
	#define PHYS_ENTGRAVITY(s)                  STAT(MOVEVARS_ENTGRAVITY, s)

	#define TICRATE                             ticrate

#elif defined(SVQC)

	#define GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE  autocvar_sv_gameplayfix_gravityunaffectedbyticrate
	#define GAMEPLAYFIX_NOGRAVITYONGROUND           autocvar_sv_gameplayfix_nogravityonground
	#define GAMEPLAYFIX_Q2AIRACCELERATE             autocvar_sv_gameplayfix_q2airaccelerate

	#define PHYS_GRAVITY(s)                     autocvar_sv_gravity
	#define PHYS_ENTGRAVITY(s)                  ((s).gravity)

	#define TICRATE sys_frametime

#endif

void set_movetype(entity this, int mt);

.float pm_time;

.float move_movetype;
.float move_time;
//.vector move_origin;
//.vector move_angles;
//.vector move_velocity;
//.vector move_avelocity;
//.int move_flags;
//.int move_watertype;
//.int move_waterlevel;
.void(float, float)contentstransition;
//.float move_bounce_factor;
//.float move_bounce_stopspeed;
.float move_nomonsters;  // -1 for MOVE_NORMAL, otherwise a MOVE_ constant

.entity aiment;
.vector punchangle;

.entity groundentity;  // FIXME add move_groundnetworkentity?
.float move_suspendedinair;
.float move_didgravity;

// unsticking
const int UNSTICK_FINE = 0;
const int UNSTICK_FIXED = 1;
const int UNSTICK_STUCK = 2;

void _Movetype_WallFriction(entity this, vector stepnormal);
int _Movetype_FlyMove(entity this, float dt, bool applygravity, vector stepnormal, float stepheight);
void _Movetype_CheckVelocity(entity this);
void _Movetype_CheckWaterTransition(entity ent);
void _Movetype_CheckStuck(entity this);
float _Movetype_CheckWater(entity ent);
void _Movetype_LinkEdict_TouchAreaGrid(entity this);
void _Movetype_LinkEdict(entity this, float touch_triggers);
vector _Movetype_ClipVelocity(vector vel, vector norm, float f);
void _Movetype_PushEntityTrace(entity this, vector push);
float _Movetype_PushEntity(entity this, vector push, float failonstartsolid);

void Movetype_Physics_NoMatchTicrate(entity this, float movedt, bool isclient);
void Movetype_Physics_MatchTicrate(entity this, float tr, bool sloppy);
void Movetype_Physics_MatchServer(entity this, bool sloppy);
void Movetype_Physics_NoMatchServer(entity this);
void _Movetype_LinkEdict(entity this, float touch_triggers);
void _Movetype_LinkEdict_TouchAreaGrid(entity this);

int _Movetype_UnstickEntity(entity this);

const int MAX_CLIP_PLANES = 5;

#ifdef CSQC
const int MOVETYPE_NONE             = 0;
const int MOVETYPE_ANGLENOCLIP      = 1;
const int MOVETYPE_ANGLECLIP        = 2;
const int MOVETYPE_WALK             = 3;
const int MOVETYPE_STEP             = 4;
const int MOVETYPE_FLY              = 5;
const int MOVETYPE_TOSS             = 6;
const int MOVETYPE_PUSH             = 7;
const int MOVETYPE_NOCLIP           = 8;
const int MOVETYPE_FLYMISSILE       = 9;
const int MOVETYPE_BOUNCE           = 10;
const int MOVETYPE_BOUNCEMISSILE    = 11;  // Like bounce but doesn't lose speed on bouncing
const int MOVETYPE_FOLLOW           = 12;
const int MOVETYPE_PHYSICS          = 32;
const int MOVETYPE_FLY_WORLDONLY    = 33;

const int FL_ITEM                   = 256;
const int FL_ONGROUND				= 512;
#elif defined(SVQC)
const int MOVETYPE_ANGLENOCLIP      = 1;
const int MOVETYPE_ANGLECLIP        = 2;
#endif

const int MOVETYPE_QCPLAYER = 150; // QC-driven player physics, no think functions!

const int FL_ONSLICK = BIT(20);

const int MOVETYPE_FAKEPUSH         = 13;

const int MOVEFLAG_VALID = BIT(23);
const int MOVEFLAG_Q2AIRACCELERATE = BIT(0);
const int MOVEFLAG_NOGRAVITYONGROUND = BIT(1);
const int MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE = BIT(2);

#ifdef CSQC
#define moveflags STAT(MOVEFLAGS)
#endif
