#ifndef MOVETYPES_H
#define MOVETYPES_H

#define IS_ONGROUND(s)                      boolean((s).flags & FL_ONGROUND)
#define SET_ONGROUND(s)                     ((s).flags |= FL_ONGROUND)
#define UNSET_ONGROUND(s)                   ((s).flags &= ~FL_ONGROUND)

.float move_ltime;
.void(entity this) move_think;
.float move_nextthink;
.void(entity this) move_blocked;

.float move_movetype;
.float move_time;
.vector move_origin;
.vector move_angles;
.vector move_velocity;
.vector move_avelocity;
.int move_flags;
.int move_watertype;
.int move_waterlevel;
.void(float, float)contentstransition;
.float move_bounce_factor;
.float move_bounce_stopspeed;
.float move_nomonsters;  // -1 for MOVE_NORMAL, otherwise a MOVE_ constant

.entity move_aiment;
.vector move_punchangle;

// should match sv_gameplayfix_fixedcheckwatertransition
float autocvar_cl_gameplayfix_fixedcheckwatertransition = 1;

.entity move_groundentity;  // FIXME add move_groundnetworkentity?
.float move_suspendedinair;
.float move_didgravity;

void _Movetype_WallFriction(entity this, vector stepnormal);
int _Movetype_FlyMove(entity this, float dt, bool applygravity, vector stepnormal, float stepheight);
void _Movetype_CheckVelocity(entity this);
void _Movetype_CheckWaterTransition(entity ent);
float _Movetype_CheckWater(entity ent);
void _Movetype_LinkEdict_TouchAreaGrid(entity this);
void _Movetype_LinkEdict(entity this, float touch_triggers);
vector _Movetype_ClipVelocity(vector vel, vector norm, float f);
void _Movetype_PushEntityTrace(entity this, vector push);
float _Movetype_PushEntity(entity this, vector push, float failonstartsolid);
void makevectors_matrix(vector myangles);

void Movetype_Physics_MatchTicrate(entity this, float tr, bool sloppy);
void Movetype_Physics_MatchServer(entity this, bool sloppy);
void Movetype_Physics_NoMatchServer(entity this);
void _Movetype_LinkEdict(entity this, float touch_triggers);
void _Movetype_LinkEdict_TouchAreaGrid(entity this);

float _Movetype_UnstickEntity(entity this);

const int MAX_CLIP_PLANES = 5;

#ifdef CSQC
const int MOVETYPE_NONE             = 0;
const int MOVETYPE_ANGLENOCLIP      = 1;
const int MOVETYPE_ANGLECLIP        = 2;
const int MOVETYPE_WALK             = 3;
const int MOVETYPE_STEP             = 4;
const int MOVETYPE_FLY              = 5;
const int MOVETYPE_TOSS             = 6;
const int MOVETYPE_PUSH             = 7;
const int MOVETYPE_NOCLIP           = 8;
const int MOVETYPE_FLYMISSILE       = 9;
const int MOVETYPE_BOUNCE           = 10;
const int MOVETYPE_BOUNCEMISSILE    = 11;  // Like bounce but doesn't lose speed on bouncing
const int MOVETYPE_FOLLOW           = 12;
const int MOVETYPE_PHYSICS          = 32;
const int MOVETYPE_FLY_WORLDONLY    = 33;

const int FL_ITEM                   = 256;
const int FL_ONGROUND				= 512;
#endif

const int MOVETYPE_FAKEPUSH         = 13;

const int MOVEFLAG_VALID = BIT(23);
const int MOVEFLAG_Q2AIRACCELERATE = BIT(0);
const int MOVEFLAG_NOGRAVITYONGROUND = BIT(1);
const int MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE = BIT(2);

#ifdef CSQC
#define moveflags STAT(MOVEFLAGS)
#endif

#endif
