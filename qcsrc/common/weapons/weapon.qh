#ifndef WEAPON_H
#define WEAPON_H
#include <common/items/item/pickup.qh>
#include <common/stats.qh>

#ifdef SVQC
#include <common/effects/qc/all.qh>
#endif

const int MAX_WEAPONSLOTS = 2;
.entity weaponentities[MAX_WEAPONSLOTS];

int weaponslot(.entity weaponentity)
{
	for (int i = 0; i < MAX_WEAPONSLOTS; ++i)
	{
		if (weaponentities[i] == weaponentity)
		{
			return i;
		}
	}
	return 0;
}

// weapon states (actor.(weaponentity).state)
/** no weapon selected */
const int WS_CLEAR  = 0;
/** raise frame */
const int WS_RAISE  = 1;
/** deselecting frame */
const int WS_DROP   = 2;
/** fire state */
const int WS_INUSE  = 3;
/** idle frame */
const int WS_READY  = 4;

#ifdef SVQC
.int ammo_shells;
.int ammo_nails;
.int ammo_rockets;
.int ammo_cells;
.int ammo_plasma = _STAT(PLASMA);
.int ammo_fuel = _STAT(FUEL);
.int ammo_none;
#else
.int ammo_shells;
.int ammo_nails;
.int ammo_rockets;
.int ammo_cells;
.int ammo_plasma;
.int ammo_fuel;
.int ammo_none;
#endif

/** fields which are explicitly/manually set are marked with "M", fields set automatically are marked with "A" */
CLASS(Weapon, Object)
	ATTRIB(Weapon, m_id, int, 0)
    /** A: WEPSET_id : WEPSET_... */
    ATTRIB(Weapon, weapons, WepSet, '0 0 0');
    /** M: ammotype  : main ammo field */
    ATTRIB(Weapon, ammo_field, .int, ammo_none);
    /** M: impulse   : weapon impulse */
    ATTRIB(Weapon, impulse, int, -1);
    /** M: flags     : WEPSPAWNFLAG_... combined */
    ATTRIB(Weapon, spawnflags, int, 0);
    /** M: rating    : bot weapon priority */
    ATTRIB(Weapon, bot_pickupbasevalue, float, 0);
    /** M: color     : waypointsprite color */
    ATTRIB(Weapon, wpcolor, vector, '0 0 0');
    /** M: modelname : name of model (without g_ v_ or h_ prefixes) */
    ATTRIB(Weapon, mdl, string, "");
    /** M: model MDL_id_ITEM */
    ATTRIB(Weapon, m_model, entity, NULL);
    /** M: crosshair : per-weapon crosshair: "CrosshairImage Size" */
    ATTRIB(Weapon, w_crosshair, string, "gfx/crosshair1");
    /** A: crosshair : per-weapon crosshair size (argument two of "crosshair" field) */
    ATTRIB(Weapon, w_crosshair_size, float, 1);
    /** M: wepimg    : "weaponfoobar" side view image file of weapon. WEAPONTODO: Move out of skin files, move to common files */
    ATTRIB(Weapon, model2, string, "");
    /** M: refname   : reference name name */
    ATTRIB(Weapon, netname, string, "");
    /** M: wepname   : human readable name */
    ATTRIB(Weapon, m_name, string, "AOL CD Thrower");

    ATTRIB(Weapon, m_pickup, entity, NULL);

    /** (SERVER) setup weapon data */
    METHOD(Weapon, wr_setup, void(Weapon this, entity actor)) {}
    /** (SERVER) logic to run every frame */
    METHOD(Weapon, wr_think, void(Weapon this, entity actor, .entity weaponentity, int fire)) {}
    /** (SERVER) checks ammo for weapon primary */
    METHOD(Weapon, wr_checkammo1, bool(Weapon this, entity actor)) {return false;}
    /** (SERVER) checks ammo for weapon second */
    METHOD(Weapon, wr_checkammo2, bool(Weapon this, entity actor)) {return false;}
    /** (SERVER) runs bot aiming code for this weapon */
    METHOD(Weapon, wr_aim, void(Weapon this, entity actor)) {}
    /** (BOTH)   precaches models/sounds used by this weapon, also sets up weapon properties */
    METHOD(Weapon, wr_init, void(Weapon this)) {}
    /** (SERVER) notification number for suicide message (may inspect w_deathtype for details) */
    METHOD(Weapon, wr_suicidemessage, entity(Weapon this)) {return NULL;}
    /** (SERVER) notification number for kill message (may inspect w_deathtype for details) */
    METHOD(Weapon, wr_killmessage, entity(Weapon this)) {return NULL;}
    /** (SERVER) handles reloading for weapon */
    METHOD(Weapon, wr_reload, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) clears fields that the weapon may use */
    METHOD(Weapon, wr_resetplayer, void(Weapon this, entity actor)) {}
    /** (CLIENT) impact effect for weapon explosion */
    METHOD(Weapon, wr_impacteffect, void(Weapon this, entity actor)) {}
    /** (SERVER) called whenever a player dies */
    METHOD(Weapon, wr_playerdeath, void(Weapon this, entity actor)) {}
    /** (SERVER) logic to run when weapon is lost */
    METHOD(Weapon, wr_gonethink, void(Weapon this, entity actor)) {}
    /** (ALL)    dump weapon cvars to config in data directory (see: sv_cmd dumpweapons) */
    METHOD(Weapon, wr_config, void(Weapon this)) {}
    /** (CLIENT) weapon specific zoom reticle */
    METHOD(Weapon, wr_zoomreticle, bool(Weapon this)) {
        // no weapon specific image for this weapon
        return false;
    }
    /** (CLIENT) weapon specific glow */
    METHOD(Weapon, wr_glow, vector(Weapon this)) { return '0 0 0'; }
    /** (SERVER) the weapon is dropped */
    METHOD(Weapon, wr_drop, void(Weapon this, entity actor)) {}
    /** (SERVER) a weapon is picked up */
    METHOD(Weapon, wr_pickup, void(Weapon this, entity actor)) {}
    /** (SERVER) update cvar based properties */
    METHOD(Weapon, wr_update, void(Weapon this)) {}
	METHOD(Weapon, display, void(entity this, void(string name, string icon) returns)) {
		returns(this.m_name, this.model2 ? sprintf("/gfx/hud/%s/%s", cvar_string("menu_skin"), this.model2) : string_null);
	}
ENDCLASS(Weapon)

#include <common/items/all.qh>
CLASS(WeaponPickup, Pickup)
    ATTRIB(WeaponPickup, m_weapon, Weapon, NULL)
    ATTRIB(WeaponPickup, m_name, string, string_null)
#ifndef MENUQC
    ATTRIB(WeaponPickup, m_sound, Sound, SND_WEAPONPICKUP)
#endif
#ifdef SVQC
    ATTRIB(WeaponPickup, m_itemflags, int, FL_WEAPON)
    float weapon_pickupevalfunc(entity player, entity item);
    ATTRIB(WeaponPickup, m_pickupevalfunc, float(entity player, entity item), weapon_pickupevalfunc)
#endif
    CONSTRUCTOR(WeaponPickup, Weapon w) {
        CONSTRUCT(WeaponPickup);
        this.m_weapon = w;
        this.m_name = w.m_name;
#ifndef MENUQC
        this.m_model = w.m_model;
#endif
#ifdef SVQC
        this.m_botvalue = w.bot_pickupbasevalue;
#endif
    }
#ifdef SVQC
    METHOD(WeaponPickup, giveTo, bool(entity this, entity item, entity player))
    {
        bool b = Item_GiveTo(item, player);
        if (b) {
            LOG_TRACEF("entity %i picked up %s\n", player, this.m_name);
        }
        return b;
    }
#endif
ENDCLASS(WeaponPickup)

CLASS(OffhandWeapon, Object)
    METHOD(OffhandWeapon, offhand_think, void(OffhandWeapon this, entity player, bool key_pressed)) {}
ENDCLASS(OffhandWeapon)

#ifdef SVQC
.OffhandWeapon offhand;
#endif

const int MAX_SHOT_DISTANCE = 32768;

// weapon pickup ratings for bot logic
const int BOT_PICKUP_RATING_LOW  =  2500;
const int BOT_PICKUP_RATING_MID  =  5000;
const int BOT_PICKUP_RATING_HIGH = 10000;

// weapon flags
const int WEP_TYPE_OTHER          =  0x00; // not for damaging people
const int WEP_TYPE_SPLASH         =  0x01; // splash damage
const int WEP_TYPE_HITSCAN        =  0x02; // hitscan
const int WEP_TYPEMASK            =  0x0F;
const int WEP_FLAG_CANCLIMB       =  0x10; // can be used for movement
const int WEP_FLAG_NORMAL         =  0x20; // in "most weapons" set
const int WEP_FLAG_HIDDEN         =  0x40; // hides from menu
const int WEP_FLAG_RELOADABLE     =  0x80; // can has reload
const int WEP_FLAG_SUPERWEAPON    = 0x100; // powerup timer
const int WEP_FLAG_MUTATORBLOCKED = 0x200; // hides from impulse 99 etc. (mutators are allowed to clear this flag)

// variables:
string weaponorder_byid;

// functions:
string W_FixWeaponOrder(string order, float complete);
string W_UndeprecateName(string s);
string W_NameWeaponOrder(string order);
string W_NumberWeaponOrder(string order);
string W_FixWeaponOrder_BuildImpulseList(string o);
string W_FixWeaponOrder_AllowIncomplete(entity this, string order);
string W_FixWeaponOrder_ForceComplete(string order);
void W_RandomWeapons(entity e, float n);

string GetAmmoPicture(.int ammotype);

#ifdef CSQC
.int GetAmmoFieldFromNum(int i);
int GetAmmoStat(.int ammotype);
#endif

string W_Sound(string w_snd);
string W_Model(string w_mdl);

#endif
