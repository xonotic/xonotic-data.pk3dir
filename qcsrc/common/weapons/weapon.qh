#pragma once

#include <common/resources.qh>
#include <common/items/item/pickup.qh>
#include <common/stats.qh>

#ifdef SVQC
#include <common/effects/qc/_mod.qh>
#endif

USING(WepSet, vector);

const int MAX_WEAPONSLOTS = 2;
.entity weaponentities[MAX_WEAPONSLOTS];

int weaponslot(.entity weaponentity)
{
	for (int i = 0; i < MAX_WEAPONSLOTS; ++i)
	{
		if (weaponentities[i] == weaponentity)
		{
			return i;
		}
	}
	return 0;
}

// weapon states (actor.(weaponentity).state)
/** no weapon selected */
const int WS_CLEAR  = 0;
/** raise frame */
const int WS_RAISE  = 1;
/** deselecting frame */
const int WS_DROP   = 2;
/** fire state */
const int WS_INUSE  = 3;
/** idle frame */
const int WS_READY  = 4;

/** fields which are explicitly/manually set are marked with "M", fields set automatically are marked with "A" */
CLASS(Weapon, Object)
	ATTRIB(Weapon, m_id, int, 0);
	/** the canonical spawnfunc name */
    ATTRIB(Weapon, m_canonical_spawnfunc, string);
    /** control what happens when this weapon is spawned */
    METHOD(Weapon, m_spawnfunc_hookreplace, Weapon(Weapon this, entity e)) { return this; }
    /** M: ammotype  : main ammo type */
    ATTRIB(Weapon, ammo_type, int, RES_NONE);
    /** M: impulse   : weapon impulse */
    ATTRIB(Weapon, impulse, int, -1);
    /** M: flags     : WEPSPAWNFLAG_... combined */
    ATTRIB(Weapon, spawnflags, int, 0);
    /** M: rating    : bot weapon priority */
    ATTRIB(Weapon, bot_pickupbasevalue, float, 0);
    /** M: color     : waypointsprite color */
    ATTRIB(Weapon, wpcolor, vector, '0 0 0');
    /** M: modelname : name of model (without g_ v_ or h_ prefixes) */
    ATTRIB(Weapon, mdl, string, "");
#ifdef GAMEQC
    /** M: model MDL_id_ITEM */
    ATTRIB(Weapon, m_model, entity);
    /** M: flash model MDL_id_MUZZLEFLASH */
    ATTRIB(Weapon, m_muzzlemodel, entity, MDL_Null);
    /** M: flash effect EFFECT_id_MUZZLEFLASH */
    ATTRIB(Weapon, m_muzzleeffect, entity);
#endif
    /** M: crosshair : per-weapon crosshair: "CrosshairImage Size" */
    ATTRIB(Weapon, w_crosshair, string, "gfx/crosshairmoustache");
    /** A: crosshair : per-weapon crosshair size (argument two of "crosshair" field) */
    ATTRIB(Weapon, w_crosshair_size, float, 1);
    /** A: reticle   : per-weapon zoom reticle */
    ATTRIB(Weapon, w_reticle, string, string_null);
    /** M: wepimg    : "weaponfoobar" side view image file of weapon. WEAPONTODO: Move out of skin files, move to common files */
    ATTRIB(Weapon, model2, string, "");
    /** M: refname   : reference name name */
    ATTRIB(Weapon, netname, string, "");
    /** M: wepname   : human readable name */
    ATTRIB(Weapon, m_name, string, "AOL CD Thrower");

    ATTRIB(Weapon, m_pickup, entity);

    /** (SERVER) setup weapon data */
    METHOD(Weapon, wr_setup, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) logic to run every frame */
    METHOD(Weapon, wr_think, void(Weapon this, entity actor, .entity weaponentity, int fire)) {}
    /** (SERVER) checks ammo for weapon primary */
    METHOD(Weapon, wr_checkammo1, bool(Weapon this, entity actor, .entity weaponentity)) {return false;}
    /** (SERVER) checks ammo for weapon second */
    METHOD(Weapon, wr_checkammo2, bool(Weapon this, entity actor, .entity weaponentity)) {return false;}
    /** (SERVER) runs bot aiming code for this weapon */
    METHOD(Weapon, wr_aim, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (BOTH)   precaches models/sounds used by this weapon, also sets up weapon properties */
    METHOD(Weapon, wr_init, void(Weapon this)) {}
    /** (SERVER) notification number for suicide message (may inspect w_deathtype for details) */
    METHOD(Weapon, wr_suicidemessage, entity(Weapon this)) {return NULL;}
    /** (SERVER) notification number for kill message (may inspect w_deathtype for details) */
    METHOD(Weapon, wr_killmessage, entity(Weapon this)) {return NULL;}
    /** (SERVER) handles reloading for weapon */
    METHOD(Weapon, wr_reload, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) clears fields that the weapon may use */
    METHOD(Weapon, wr_resetplayer, void(Weapon this, entity actor)) {}
    /** (CLIENT) impact effect for weapon explosion */
    METHOD(Weapon, wr_impacteffect, void(Weapon this, entity actor)) {}
    /** (SERVER) called whenever a player dies */
    METHOD(Weapon, wr_playerdeath, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) logic to run when weapon is lost */
    METHOD(Weapon, wr_gonethink, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) dump weapon cvars to config in data directory (see: sv_cmd dumpweapons) */
    METHOD(Weapon, wr_config, void(Weapon this)) {}
    /** (BOTH) weapon specific zoom reticle */
    METHOD(Weapon, wr_zoom, bool(Weapon this, entity actor)) {
        // no weapon specific image for this weapon
        return false;
    }
    /** (CLIENT) check whether the weapon should zoom (special handling) */
    METHOD(Weapon, wr_zoomdir, bool(Weapon this)) {return false;}
    /** (CLIENT) weapon specific view model */
    METHOD(Weapon, wr_viewmodel, string(Weapon this, entity wep)) { return string_null; }
    /** (BOTH) weapon specific glow */
    METHOD(Weapon, wr_glow, vector(Weapon this, entity actor, entity wepent)) { return '0 0 0'; }
    /** (SERVER) the weapon is dropped */
    METHOD(Weapon, wr_drop, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) a weapon is picked up */
    METHOD(Weapon, wr_pickup, void(Weapon this, entity actor, .entity weaponentity)) {}
    /** (SERVER) update cvar based properties */
    METHOD(Weapon, wr_update, void(Weapon this)) {}
	METHOD(Weapon, display, void(entity this, void(string name, string icon) returns)) {
		returns(this.m_name, this.model2 ? sprintf("/gfx/hud/%s/%s", cvar_string("menu_skin"), this.model2) : string_null);
	}
ENDCLASS(Weapon)

#ifdef SVQC

void weapon_defaultspawnfunc(entity this, Weapon e);
#define SPAWNFUNC_WEAPON(name, weapon) \
    spawnfunc(name) { weapon_defaultspawnfunc(this, weapon); }

#define SPAWNFUNC_WEAPON_COND(name, cond, wep1, wep2) \
    spawnfunc(name) \
    { \
        entity wep = (cond) ? wep1 : wep2; \
        weapon_defaultspawnfunc(this, wep); \
    }

#else

#define SPAWNFUNC_WEAPON(name, weapon)

#endif

#include <common/items/_mod.qh>
CLASS(WeaponPickup, Pickup)
    ATTRIB(WeaponPickup, m_weapon, Weapon);
    ATTRIB(WeaponPickup, m_name, string);
#ifdef GAMEQC
    ATTRIB(WeaponPickup, m_sound, Sound, SND_WEAPONPICKUP);
#endif
#ifdef SVQC
    ATTRIB(WeaponPickup, m_itemflags, int, FL_WEAPON);
    float weapon_pickupevalfunc(entity player, entity item);
    ATTRIB(WeaponPickup, m_pickupevalfunc, float(entity player, entity item), weapon_pickupevalfunc);
#endif
    CONSTRUCTOR(WeaponPickup, Weapon w) {
        CONSTRUCT(WeaponPickup);
        this.m_weapon = w;
        this.m_name = w.m_name;
#ifdef GAMEQC
        this.m_model = w.m_model;
#endif
#ifdef SVQC
        this.m_botvalue = w.bot_pickupbasevalue;
#endif
    }
#ifdef SVQC
    METHOD(WeaponPickup, giveTo, bool(entity this, entity item, entity player))
    {
        bool b = Item_GiveTo(item, player);
        //if (b) {
            //LOG_TRACEF("entity %i picked up %s", player, this.m_name);
        //}
        return b;
    }
#endif
ENDCLASS(WeaponPickup)

CLASS(OffhandWeapon, Object)
    METHOD(OffhandWeapon, offhand_think, void(OffhandWeapon this, entity player, bool key_pressed)) {}
ENDCLASS(OffhandWeapon)

#ifdef SVQC
.OffhandWeapon offhand;
#endif

#ifdef GAMEQC
int max_shot_distance = 32768; // determined by world mins/maxs when map loads
#endif

// weapon flags
const int WEP_TYPE_OTHER          =  BIT(0); // not for damaging people
const int WEP_TYPE_SPLASH         =  BIT(1); // splash damage
const int WEP_TYPE_HITSCAN        =  BIT(2); // hitscan
const int WEP_FLAG_CANCLIMB       =  BIT(3); // can be used for movement
const int WEP_FLAG_NORMAL         =  BIT(4); // in "most weapons" set
const int WEP_FLAG_HIDDEN         =  BIT(5); // hides from menu
const int WEP_FLAG_RELOADABLE     =  BIT(6); // can has reload
const int WEP_FLAG_SUPERWEAPON    =  BIT(7); // powerup timer
const int WEP_FLAG_MUTATORBLOCKED =  BIT(8); // hides from impulse 99 etc. (mutators are allowed to clear this flag)
const int WEP_TYPE_MELEE_PRI      =  BIT(9); // primary attack is melee swing (for animation)
const int WEP_TYPE_MELEE_SEC      =  BIT(10); // secondary attack is melee swing (for animation)
const int WEP_FLAG_DUALWIELD      =  BIT(11); // weapon can be dual wielded
const int WEP_FLAG_NODUAL         =  BIT(12); // weapon doesn't work well with dual wielding (fireball etc just explode on fire), doesn't currently prevent anything
const int WEP_FLAG_PENETRATEWALLS =  BIT(13); // weapon has high calibur bullets that can penetrate thick walls (WEAPONTODO)
const int WEP_FLAG_BLEED          =  BIT(14); // weapon pierces and causes bleeding (used for damage effects)
const int WEP_FLAG_NOTRUEAIM      =  BIT(15); // weapon doesn't aim directly at targets
const int WEP_FLAG_SPECIALATTACK  =  BIT(16); // marked as a special attack (not a true weapon), hidden from most weapon lists

// variables:
string weaponorder_byid;

// functions:
string W_FixWeaponOrder(string order, float complete);
string W_UndeprecateName(string s);
string W_NameWeaponOrder(string order);
string W_NumberWeaponOrder(string order);
string W_FixWeaponOrder_BuildImpulseList(string o);
string W_FixWeaponOrder_AllowIncomplete(entity this, string order);
string W_FixWeaponOrder_ForceComplete(string order);
WepSet W_RandomWeapons(entity e, WepSet remaining, int n);

string GetAmmoPicture(int ammotype);

string GetAmmoName(int ammotype);

#ifdef CSQC
int GetAmmoTypeFromNum(int i);
int GetAmmoStat(int ammotype);
#endif

string W_Sound(string w_snd);
string W_Model(string w_mdl);
