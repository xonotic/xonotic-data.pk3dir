#pragma once

CLASS(MineLayer, Weapon)
/* spawnfunc */ ATTRIB(MineLayer, m_canonical_spawnfunc, string, "weapon_minelayer");
/* ammotype  */ ATTRIB(MineLayer, ammo_type, int, RES_ROCKETS);
/* impulse   */ ATTRIB(MineLayer, impulse, int, 4);
/* flags     */ ATTRIB(MineLayer, spawnflags, int, WEP_FLAG_MUTATORBLOCKED | WEP_FLAG_RELOADABLE | WEP_TYPE_SPLASH);
/* rating    */ ATTRIB(MineLayer, bot_pickupbasevalue, float, 7000);
/* color     */ ATTRIB(MineLayer, wpcolor, vector, '0.75 1 0');
/* modelname */ ATTRIB(MineLayer, mdl, string, "minelayer");
#ifdef GAMEQC
/* model     */ ATTRIB(MineLayer, m_model, Model, MDL_MINELAYER_ITEM);
#endif
/* crosshair */ ATTRIB(MineLayer, w_crosshair, string, "gfx/crosshairminelayer");
/* crosshair */ ATTRIB(MineLayer, w_crosshair_size, float, 0.9);
/* wepimg    */ ATTRIB(MineLayer, model2, string, "weaponminelayer");
/* refname   */ ATTRIB(MineLayer, netname, string, "minelayer");
/* wepname   */ ATTRIB(MineLayer, m_name, string, _("Mine Layer"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, NONE) \
		P(class, prefix, animtime, float, NONE) \
		P(class, prefix, damageforcescale, float, NONE) \
		P(class, prefix, damage, float, NONE) \
		P(class, prefix, detonatedelay, float, NONE) \
		P(class, prefix, edgedamage, float, NONE) \
		P(class, prefix, force, float, NONE) \
		P(class, prefix, health, float, NONE) \
		P(class, prefix, lifetime, float, NONE) \
		P(class, prefix, lifetime_countdown, float, NONE) \
		P(class, prefix, limit, float, NONE) \
		P(class, prefix, protection, float, NONE) \
		P(class, prefix, proximityradius, float, NONE) \
		P(class, prefix, radius, float, NONE) \
		P(class, prefix, refire, float, NONE) \
		P(class, prefix, reload_ammo, float, NONE) \
        P(class, prefix, reload_time, float, NONE) \
		P(class, prefix, remote_damage, float, NONE) \
		P(class, prefix, remote_edgedamage, float, NONE) \
		P(class, prefix, remote_force, float, NONE) \
		P(class, prefix, remote_radius, float, NONE) \
		P(class, prefix, speed, float, NONE) \
        P(class, prefix, switchdelay_drop, float, NONE) \
        P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, time, float, NONE) \
        P(class, prefix, weaponreplace, string, NONE) \
        P(class, prefix, weaponstartoverride, float, NONE) \
        P(class, prefix, weaponstart, float, NONE) \
        P(class, prefix, weaponthrowable, float, NONE) \
	END()
    W_PROPS(X, MineLayer, minelayer)
#undef X
ENDCLASS(MineLayer)
REGISTER_WEAPON(MINE_LAYER, minelayer, NEW(MineLayer));

SPAWNFUNC_WEAPON(weapon_minelayer, WEP_MINE_LAYER)

#ifdef SVQC
void W_MineLayer_Think(entity this);
.float minelayer_detonate, mine_explodeanyway;
.float mine_time;
.vector mine_orientation;
#endif
