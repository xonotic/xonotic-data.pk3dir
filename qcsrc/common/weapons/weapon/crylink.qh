#pragma once

CLASS(Crylink, Weapon)
/* spawnfunc */ ATTRIB(Crylink, m_canonical_spawnfunc, string, "weapon_crylink");
/* ammotype  */ ATTRIB(Crylink, ammo_type, Resource, RES_CELLS);
/* impulse   */ ATTRIB(Crylink, impulse, int, 6);
/* flags     */ ATTRIB(Crylink, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_RELOADABLE | WEP_TYPE_SPLASH | WEP_FLAG_CANCLIMB);
/* rating    */ ATTRIB(Crylink, bot_pickupbasevalue, float, 6000);
/* color     */ ATTRIB(Crylink, wpcolor, vector, '1 0.5 1');
/* modelname */ ATTRIB(Crylink, mdl, string, "crylink");
#ifdef GAMEQC
/* model     */ ATTRIB(Crylink, m_model, Model, MDL_CRYLINK_ITEM);
/* flash mdl */ ATTRIB(Crylink, m_muzzlemodel, Model, MDL_Null);
/* flash eff */ ATTRIB(Crylink, m_muzzleeffect, entity, EFFECT_CRYLINK_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(Crylink, w_crosshair, string, "gfx/crosshaircrylink");
/* crosshair */ ATTRIB(Crylink, w_crosshair_size, float, 0.5);
/* wepimg    */ ATTRIB(Crylink, model2, string, "weaponcrylink");
/* refname   */ ATTRIB(Crylink, netname, string, "crylink");
/* wepname   */ ATTRIB(Crylink, m_name, string, _("Crylink"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, BOTH) \
		P(class, prefix, animtime, float, BOTH) \
		P(class, prefix, bouncedamagefactor, float, BOTH) \
		P(class, prefix, bounces, float, BOTH) \
		P(class, prefix, damage, float, BOTH) \
		P(class, prefix, edgedamage, float, BOTH) \
		P(class, prefix, force, float, BOTH) \
		P(class, prefix, joindelay, float, BOTH) \
		P(class, prefix, joinexplode, float, BOTH) \
		P(class, prefix, joinexplode_damage, float, BOTH) \
		P(class, prefix, joinexplode_edgedamage, float, BOTH) \
		P(class, prefix, joinexplode_force, float, BOTH) \
		P(class, prefix, joinexplode_radius, float, BOTH) \
		P(class, prefix, joinspread, float, BOTH) \
		P(class, prefix, linkexplode, float, BOTH) \
		P(class, prefix, middle_fadetime, float, BOTH) \
		P(class, prefix, middle_lifetime, float, BOTH) \
		P(class, prefix, other_fadetime, float, BOTH) \
		P(class, prefix, other_lifetime, float, BOTH) \
		P(class, prefix, radius, float, BOTH) \
		P(class, prefix, refire, float, BOTH) \
		P(class, prefix, reload_ammo, float, NONE) \
		P(class, prefix, reload_time, float, NONE) \
		P(class, prefix, secondary, float, NONE) \
		P(class, prefix, shots, float, BOTH) \
		P(class, prefix, speed, float, BOTH) \
		P(class, prefix, spreadtype, float, SEC) \
		P(class, prefix, spread, float, BOTH) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, weaponreplace, string, NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, Crylink, crylink)
#undef X

ENDCLASS(Crylink)
REGISTER_WEAPON(CRYLINK, NEW(Crylink));

SPAWNFUNC_WEAPON(weapon_crylink, WEP_CRYLINK)

#ifdef SVQC
.float gravity;
.float crylink_waitrelease;
.entity crylink_lastgroup;

.entity crylink_owner; // we can't use realowner, as that's subject to change

.entity queuenext;
.entity queueprev;

void W_Crylink_Dequeue(entity e);
#endif

#ifdef CSQC
bool autocvar_cl_polytrails_crylink_bouncing = true;
float autocvar_cl_polytrails_crylink_bouncing_head_alpha = 0.5;
vector autocvar_cl_polytrails_crylink_bouncing_head_color = '0.7 0 1';
float autocvar_cl_polytrails_crylink_bouncing_head_thickness = 5;
float autocvar_cl_polytrails_crylink_bouncing_body_alpha = 0.2;
vector autocvar_cl_polytrails_crylink_bouncing_body_color = '0.5 0 1';
float autocvar_cl_polytrails_crylink_bouncing_body_thickness = 3;
float autocvar_cl_polytrails_crylink_bouncing_tail_alpha = 0;
vector autocvar_cl_polytrails_crylink_bouncing_tail_color = '0.1 0 0.8';
float autocvar_cl_polytrails_crylink_bouncing_tail_thickness = 13;
float autocvar_cl_polytrails_crylink_bouncing_lifetime = 0.15;
float autocvar_cl_polytrails_crylink_bouncing_segmentsize = 80;
float autocvar_cl_polytrails_crylink_bouncing_noise = 0;
string autocvar_cl_polytrails_crylink_bouncing_noisefunc = "none";
CLASS(CrylinkBouncingTrail, PolyTrail)
	ATTRIB(CrylinkBouncingTrail, polytrail_tex, string, "gfx/crosshair_ring.tga"); // TODO: dedicated texture
	ATTRIB(CrylinkBouncingTrail, polytrail_lifetime, float, autocvar_cl_polytrails_crylink_bouncing_lifetime);
	ATTRIB(CrylinkBouncingTrail, polytrail_noise, float, autocvar_cl_polytrails_crylink_bouncing_noise);
	ATTRIB(CrylinkBouncingTrail, polytrail_segmentsize, float, autocvar_cl_polytrails_crylink_bouncing_segmentsize);
	ATTRIB(CrylinkBouncingTrail, polytrail_noisefunc, string, autocvar_cl_polytrails_crylink_bouncing_noisefunc);
	ATTRIB(CrylinkBouncingTrail, polytrail_head_alpha, float, autocvar_cl_polytrails_crylink_bouncing_head_alpha);
	ATTRIB(CrylinkBouncingTrail, polytrail_head_color, vector, autocvar_cl_polytrails_crylink_bouncing_head_color);
	ATTRIB(CrylinkBouncingTrail, polytrail_head_thickness, float, autocvar_cl_polytrails_crylink_bouncing_head_thickness);
	ATTRIB(CrylinkBouncingTrail, polytrail_body_alpha, float, autocvar_cl_polytrails_crylink_bouncing_body_alpha);
	ATTRIB(CrylinkBouncingTrail, polytrail_body_color, vector, autocvar_cl_polytrails_crylink_bouncing_body_color);
	ATTRIB(CrylinkBouncingTrail, polytrail_body_thickness, float, autocvar_cl_polytrails_crylink_bouncing_body_thickness);
	ATTRIB(CrylinkBouncingTrail, polytrail_tail_alpha, float, autocvar_cl_polytrails_crylink_bouncing_tail_alpha);
	ATTRIB(CrylinkBouncingTrail, polytrail_tail_color, vector, autocvar_cl_polytrails_crylink_bouncing_tail_color);
	ATTRIB(CrylinkBouncingTrail, polytrail_tail_thickness, float, autocvar_cl_polytrails_crylink_bouncing_tail_thickness);
ENDCLASS(CrylinkBouncingTrail)

bool autocvar_cl_polytrails_crylink_bolt = true;
float autocvar_cl_polytrails_crylink_bolt_head_alpha = 0.75;
vector autocvar_cl_polytrails_crylink_bolt_head_color = '0.7 0 1';
float autocvar_cl_polytrails_crylink_bolt_head_thickness = 5;
float autocvar_cl_polytrails_crylink_bolt_body_alpha = 0.2;
vector autocvar_cl_polytrails_crylink_bolt_body_color = '0.5 0 1';
float autocvar_cl_polytrails_crylink_bolt_body_thickness = 3;
float autocvar_cl_polytrails_crylink_bolt_tail_alpha = 0;
vector autocvar_cl_polytrails_crylink_bolt_tail_color = '0.1 0 0.8';
float autocvar_cl_polytrails_crylink_bolt_tail_thickness = 3;
float autocvar_cl_polytrails_crylink_bolt_lifetime = 0.15;
float autocvar_cl_polytrails_crylink_bolt_segmentsize = 80;
float autocvar_cl_polytrails_crylink_bolt_noise = 0;
string autocvar_cl_polytrails_crylink_bolt_noisefunc = "none";
CLASS(CrylinkBoltTrail, PolyTrail)
	ATTRIB(CrylinkBoltTrail, polytrail_tex, string, "gfx/crosshair_ring.tga"); // TODO: dedicated texture
	ATTRIB(CrylinkBoltTrail, polytrail_lifetime, float, autocvar_cl_polytrails_crylink_bolt_lifetime);
	ATTRIB(CrylinkBoltTrail, polytrail_noise, float, autocvar_cl_polytrails_crylink_bolt_noise);
	ATTRIB(CrylinkBoltTrail, polytrail_segmentsize, float, autocvar_cl_polytrails_crylink_bolt_segmentsize);
	ATTRIB(CrylinkBoltTrail, polytrail_noisefunc, string, autocvar_cl_polytrails_crylink_bolt_noisefunc);
	ATTRIB(CrylinkBoltTrail, polytrail_head_alpha, float, autocvar_cl_polytrails_crylink_bolt_head_alpha);
	ATTRIB(CrylinkBoltTrail, polytrail_head_color, vector, autocvar_cl_polytrails_crylink_bolt_head_color);
	ATTRIB(CrylinkBoltTrail, polytrail_head_thickness, float, autocvar_cl_polytrails_crylink_bolt_head_thickness);
	ATTRIB(CrylinkBoltTrail, polytrail_body_alpha, float, autocvar_cl_polytrails_crylink_bolt_body_alpha);
	ATTRIB(CrylinkBoltTrail, polytrail_body_color, vector, autocvar_cl_polytrails_crylink_bolt_body_color);
	ATTRIB(CrylinkBoltTrail, polytrail_body_thickness, float, autocvar_cl_polytrails_crylink_bolt_body_thickness);
	ATTRIB(CrylinkBoltTrail, polytrail_tail_alpha, float, autocvar_cl_polytrails_crylink_bolt_tail_alpha);
	ATTRIB(CrylinkBoltTrail, polytrail_tail_color, vector, autocvar_cl_polytrails_crylink_bolt_tail_color);
	ATTRIB(CrylinkBoltTrail, polytrail_tail_thickness, float, autocvar_cl_polytrails_crylink_bolt_tail_thickness);
ENDCLASS(CrylinkBoltTrail)
#endif
