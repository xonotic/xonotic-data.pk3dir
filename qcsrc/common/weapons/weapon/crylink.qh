#pragma once

CLASS(Crylink, Weapon)
/* spawnfunc */ ATTRIB(Crylink, m_canonical_spawnfunc, string, "weapon_crylink");
/* ammotype  */ ATTRIB(Crylink, ammo_type, Resource, RES_CELLS);
/* impulse   */ ATTRIB(Crylink, impulse, int, 6);
/* flags     */ ATTRIB(Crylink, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_RELOADABLE | WEP_TYPE_SPLASH | WEP_FLAG_CANCLIMB);
/* rating    */ ATTRIB(Crylink, bot_pickupbasevalue, float, 6000);
/* color     */ ATTRIB(Crylink, wpcolor, vector, '1 0.5 1');
/* modelname */ ATTRIB(Crylink, mdl, string, "crylink");
#ifdef GAMEQC
/* model     */ ATTRIB(Crylink, m_model, Model, MDL_CRYLINK_ITEM);
/* flash mdl */ ATTRIB(Crylink, m_muzzlemodel, Model, MDL_Null);
/* flash eff */ ATTRIB(Crylink, m_muzzleeffect, entity, EFFECT_CRYLINK_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(Crylink, w_crosshair, string, "gfx/crosshaircrylink");
/* crosshair */ ATTRIB(Crylink, w_crosshair_size, float, 0.5);
/* wepimg    */ ATTRIB(Crylink, model2, string, "weaponcrylink");
/* refname   */ ATTRIB(Crylink, netname, string, "crylink");
/* wepname   */ ATTRIB(Crylink, m_name, string, _("Crylink"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, BOTH) \
		P(class, prefix, animtime, float, BOTH) \
		P(class, prefix, bouncedamagefactor, float, BOTH) \
		P(class, prefix, bounces, float, BOTH) \
		P(class, prefix, damage, float, BOTH) \
		P(class, prefix, edgedamage, float, BOTH) \
		P(class, prefix, force, float, BOTH) \
		P(class, prefix, joindelay, float, BOTH) \
		P(class, prefix, joinexplode, float, BOTH) \
		P(class, prefix, joinexplode_damage, float, BOTH) \
		P(class, prefix, joinexplode_edgedamage, float, BOTH) \
		P(class, prefix, joinexplode_force, float, BOTH) \
		P(class, prefix, joinexplode_radius, float, BOTH) \
		P(class, prefix, joinspread, float, BOTH) \
		P(class, prefix, linkexplode, float, BOTH) \
		P(class, prefix, middle_fadetime, float, BOTH) \
		P(class, prefix, middle_lifetime, float, BOTH) \
		P(class, prefix, other_fadetime, float, BOTH) \
		P(class, prefix, other_lifetime, float, BOTH) \
		P(class, prefix, radius, float, BOTH) \
		P(class, prefix, refire, float, BOTH) \
		P(class, prefix, reload_ammo, float, NONE) \
		P(class, prefix, reload_time, float, NONE) \
		P(class, prefix, secondary, float, NONE) \
		P(class, prefix, shots, float, BOTH) \
		P(class, prefix, speed, float, BOTH) \
		P(class, prefix, spreadtype, float, SEC) \
		P(class, prefix, spread, float, BOTH) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, weaponreplace, string, NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, Crylink, crylink)
#undef X
#ifdef MENUQC
METHOD(Crylink, describe, string(Crylink this))
{
	TC(Crylink, this);
	return _("The Crylink fires bursts of laser-like projectiles, spreading out as they travel away, and deflecting off walls. "
	         "If the primary fire is held, when it's released the projectiles will converge before spreading out again, "
	         "which can be utilized to deal more damage to an enemy by making the projectiles converge on them\n\n"
	         "The secondary fire shoots the projectiles together in a tight group, so it is often the better option in situations where the enemy is an easy target to hit\n\n"
	         "It consumes Cells ammo for each projectile, which is shared by several weapons\n\n"
	         "Close to medium range is the ideal time to use the Crylink, although the secondary fire can be useful for long range combat sometimes\n\n"
	         "The Crylink deals knockback in a unique way, pulling the player from their center to the point of impact. "
	         "This makes it one of the best weapons to slow someone down if you are chasing them, particularly with the secondary fire. "
	         "Another common use of the Crylink is \"crylink running\", where you partially angle down and use the secondary fire to pull yourself forwards, in order to gain speed");
}
#endif
ENDCLASS(Crylink)
REGISTER_WEAPON(CRYLINK, NEW(Crylink));

SPAWNFUNC_WEAPON(weapon_crylink, WEP_CRYLINK)

#ifdef SVQC
.float gravity;
.float crylink_waitrelease;
.entity crylink_lastgroup;

.entity crylink_owner; // we can't use realowner, as that's subject to change

.entity queuenext;
.entity queueprev;

void W_Crylink_Dequeue(entity e);
#endif
