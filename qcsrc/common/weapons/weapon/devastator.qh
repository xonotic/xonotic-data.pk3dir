#pragma once

#include <common/colors.qh>
#include "vortex.qh" // for its color

CLASS(Devastator, Weapon)
/* spawnfunc */ ATTRIB(Devastator, m_canonical_spawnfunc, string, "weapon_devastator");
/* ammotype  */ ATTRIB(Devastator, ammo_type, Resource, RES_ROCKETS);
/* impulse   */ ATTRIB(Devastator, impulse, int, 9);
/* flags     */ ATTRIB(Devastator, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_RELOADABLE | WEP_FLAG_CANCLIMB | WEP_TYPE_SPLASH);
/* rating    */ ATTRIB(Devastator, bot_pickupbasevalue, float, 8000);
/* color     */ ATTRIB(Devastator, m_color, vector, COLOR_WEP_DEVASTATOR);
/* modelname */ ATTRIB(Devastator, mdl, string, "rl");
#ifdef GAMEQC
/* model     */ ATTRIB(Devastator, m_model, Model, MDL_DEVASTATOR_ITEM);
/* flash mdl */ ATTRIB(Devastator, m_muzzlemodel, Model, MDL_DEVASTATOR_MUZZLEFLASH);
/* flash eff */ ATTRIB(Devastator, m_muzzleeffect, entity, EFFECT_ROCKET_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(Devastator, w_crosshair, string, "gfx/crosshairrocketlauncher");
/* crosshair */ ATTRIB(Devastator, w_crosshair_size, float, 0.7);
/* wepimg    */ ATTRIB(Devastator, model2, string, "weaponrocketlauncher");
/* refname   */ ATTRIB(Devastator, netname, string, "devastator");
/* wepname   */ ATTRIB(Devastator, m_name, string, _("Devastator"));
/* legacy    */ ATTRIB(Devastator, m_deprecated_netname, string, "rocketlauncher");

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, NONE) \
		P(class, prefix, animtime, float, NONE) \
		P(class, prefix, damageforcescale, float, NONE) \
		P(class, prefix, damage, float, NONE) \
		P(class, prefix, detonatedelay, float, NONE) \
		P(class, prefix, edgedamage, float, NONE) \
		P(class, prefix, force, float, NONE) \
		P(class, prefix, force_xyscale, float, NONE) \
		P(class, prefix, guidedelay, float, NONE) \
		P(class, prefix, guidegoal, float, NONE) \
		P(class, prefix, guideratedelay, float, NONE) \
		P(class, prefix, guiderate, float, NONE) \
		P(class, prefix, guidestop, float, NONE) \
		P(class, prefix, health, float, NONE) \
		P(class, prefix, lifetime, float, NONE) \
		P(class, prefix, radius, float, NONE) \
		P(class, prefix, refire, float, NONE) \
		P(class, prefix, reload_ammo, float, NONE) \
		P(class, prefix, reload_time, float, NONE) \
		P(class, prefix, remote_damage, float, NONE) \
		P(class, prefix, remote_edgedamage, float, NONE) \
		P(class, prefix, remote_force, float, NONE) \
		P(class, prefix, remote_jump, float, NONE) \
		P(class, prefix, remote_jump_damage, float, NONE) \
		P(class, prefix, remote_jump_force, float, NONE) \
		P(class, prefix, remote_jump_radius, float, NONE) \
		P(class, prefix, remote_jump_velocity_z_add, float, NONE) \
		P(class, prefix, remote_jump_velocity_z_max, float, NONE) \
		P(class, prefix, remote_jump_velocity_z_min, float, NONE) \
		P(class, prefix, remote_radius, float, NONE) \
		P(class, prefix, speedaccel, float, NONE) \
		P(class, prefix, speedstart, float, NONE) \
		P(class, prefix, speed, float, NONE) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, weaponreplace, string,NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, Devastator, devastator)
#undef X
#ifdef MENUQC
METHOD(Devastator, describe, string(Devastator this))
{
	TC(Devastator, this);
	return sprintf(_("The %s launches a remote controlled rocket, dealing significant damage when it explodes on impact. "
		"If the primary fire is held, the rocket can be guided by the user's aim, allowing steering it towards enemies\n\n"
		"The secondary fire can be used to immediately detonate the most recently fired rocket, allowing dealing damage to enemies even if the rocket barely missed colliding with them\n\n"
		"It consumes a bunch of %s ammo for each rocket, which can end up being depleted quickly, so often players alternate with another weapon like %s\n\n"
		"Due to its high damage output, the %s is one of the most commonly used weapons. "
		"It can be used in almost any scenario, working best in medium range combat. "
		"In close range combat, the large splash radius means often rockets can damage yourself as well as the enemy\n\n"
		"Due to the ability to remotely detonate rockets, a common usage is \"rocket flying\", where you fire a rocket and immediately detonate it to boost yourself while mid-air"),
	COLORED_NAME(Devastator), COLORED_NAME(Rockets), COLORED_NAME(Vortex), COLORED_NAME(Devastator));
}
#endif
ENDCLASS(Devastator)
REGISTER_WEAPON(DEVASTATOR, NEW(Devastator));

SPAWNFUNC_WEAPON(weapon_devastator, WEP_DEVASTATOR)
SPAWNFUNC_WEAPON(weapon_rocketlauncher, WEP_DEVASTATOR)

#ifdef SVQC
.float rl_release;
.float rl_detonate_later;
#endif
