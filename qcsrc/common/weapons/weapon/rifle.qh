#pragma once

#include <common/colors.qh>

CLASS(Rifle, Weapon)
/* spawnfunc */ ATTRIB(Rifle, m_canonical_spawnfunc, string, "weapon_rifle");
/* ammotype  */ ATTRIB(Rifle, ammo_type, Resource, RES_BULLETS);
/* impulse   */ ATTRIB(Rifle, impulse, int, 7);
/* flags     */ ATTRIB(Rifle, spawnflags, int, WEP_FLAG_MUTATORBLOCKED | WEP_FLAG_RELOADABLE | WEP_TYPE_HITSCAN | WEP_FLAG_PENETRATEWALLS);
/* rating    */ ATTRIB(Rifle, bot_pickupbasevalue, float, 7000);
/* color     */ ATTRIB(Rifle, m_color, vector, COLOR_WEP_RIFLE);
/* modelname */ ATTRIB(Rifle, mdl, string, "campingrifle");
#ifdef GAMEQC
/* model     */ ATTRIB(Rifle, m_model, Model, MDL_RIFLE_ITEM);
/* flash mdl */ ATTRIB(Rifle, m_muzzlemodel, Model, MDL_Null);
/* flash eff */ ATTRIB(Rifle, m_muzzleeffect, entity, EFFECT_RIFLE_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(Rifle, w_crosshair, string, "gfx/crosshairrifle");
/* crosshair */ ATTRIB(Rifle, w_crosshair_size, float, 0.6);
/* reticle   */ ATTRIB(Rifle, w_reticle, string, "gfx/reticle_nex");
/* wepimg    */ ATTRIB(Rifle, model2, string, "weaponrifle");
/* refname   */ ATTRIB(Rifle, netname, string, "rifle");
/* wepname   */ ATTRIB(Rifle, m_name, string, _("Rifle"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, BOTH) \
		P(class, prefix, animtime, float, BOTH) \
		P(class, prefix, bullethail, float, BOTH) \
		P(class, prefix, burstcost, float, BOTH) \
		P(class, prefix, bursttime, float, NONE) \
		P(class, prefix, damage, float, BOTH) \
		P(class, prefix, damagefalloff_forcehalflife, float, BOTH) \
		P(class, prefix, damagefalloff_halflife, float, BOTH) \
		P(class, prefix, damagefalloff_maxdist, float, BOTH) \
		P(class, prefix, damagefalloff_mindist, float, BOTH) \
		P(class, prefix, force, float, BOTH) \
		P(class, prefix, headshot_multiplier, float, BOTH) \
		P(class, prefix, refire, float, BOTH) \
		P(class, prefix, reload, float, SEC) \
		P(class, prefix, reload_ammo, float, NONE) \
		P(class, prefix, reload_time, float, NONE) \
		P(class, prefix, secondary, float, NONE) \
		P(class, prefix, shots, float, BOTH) \
		P(class, prefix, solidpenetration, float, BOTH) \
		P(class, prefix, spread, float, BOTH) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, tracer, float, BOTH) \
		P(class, prefix, weaponreplace, string, NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, Rifle, rifle)
#undef X
#ifdef MENUQC
METHOD(Rifle, describe, string(Rifle this))
{
	// can't include ./vortex.qh or else circular includes
#define VORTEX_COLOR strcat(rgb_to_hexcolor(COLOR_WEP_VORTEX), _("Vortex"), "^7")
	TC(Rifle, this);
	return sprintf(_("The %s fires bullets that traverse the map instantaneously and deal a significant chunk of damage on impact\n\n"
		"The secondary fire shoots a few less powerful bullets at once with a bit of scatter\n\n"
		"It consumes %s ammo for each bullet shot\n\n"
		"Unlike the %s, the secondary fire doesn't zoom, so the ^3+zoom^7 bind needs to be used manually with the %s. "
		"Also, it needs to be reloaded after its magazine is emptied\n\n"
		"Similar to the %s, the %s can be used at any range, but it stands out at long ranges"),
	COLORED_NAME(Rifle), COLORED_NAME(Bullets), VORTEX_COLOR, COLORED_NAME(Rifle), VORTEX_COLOR, COLORED_NAME(Rifle));
#undef VORTEX_COLOR
}
#endif
ENDCLASS(Rifle)
REGISTER_WEAPON(RIFLE, NEW(Rifle));

SPAWNFUNC_WEAPON(weapon_rifle, WEP_RIFLE)
SPAWNFUNC_WEAPON(weapon_campingrifle, WEP_RIFLE)
SPAWNFUNC_WEAPON(weapon_sniperrifle, WEP_RIFLE)

#ifdef SVQC
.float rifle_accumulator;
#endif
