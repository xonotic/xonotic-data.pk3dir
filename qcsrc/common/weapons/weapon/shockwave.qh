#pragma once

CLASS(Shockwave, Weapon)
/* spawnfunc */ ATTRIB(Shockwave, m_canonical_spawnfunc, string, "weapon_shockwave");
/* ammotype  */ //ATTRIB(Shockwave, ammo_type, int, RES_NONE);
/* impulse   */ ATTRIB(Shockwave, impulse, int, 2);
/* flags     */ ATTRIB(Shockwave, spawnflags, int, WEP_FLAG_HIDDEN | WEP_TYPE_HITSCAN | WEP_FLAG_CANCLIMB | WEP_TYPE_MELEE_SEC);
/* rating    */ ATTRIB(Shockwave, bot_pickupbasevalue, float, 3000);
/* color     */ ATTRIB(Shockwave, wpcolor, vector, '0.5 0.25 0');
/* modelname */ ATTRIB(Shockwave, mdl, string, "shotgun");
#ifdef GAMEQC
/* model     */ ATTRIB(Shockwave, m_model, Model, MDL_SHOCKWAVE_ITEM);
#endif
/* crosshair */ ATTRIB(Shockwave, w_crosshair, string, "gfx/crosshairshotgun");
/* crosshair */ ATTRIB(Shockwave, w_crosshair_size, float, 0.7);
/* wepimg    */ ATTRIB(Shockwave, model2, string, "weaponshockwave");
/* refname   */ ATTRIB(Shockwave, netname, string, "shockwave");
/* wepname   */ ATTRIB(Shockwave, m_name, string, _("Shockwave"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, blast_animtime, float, NONE) \
		P(class, prefix, blast_damage, float, NONE) \
		P(class, prefix, blast_distance, float, NONE) \
		P(class, prefix, blast_edgedamage, float, NONE) \
		P(class, prefix, blast_force, float, NONE) \
		P(class, prefix, blast_force_forwardbias, float, NONE) \
		P(class, prefix, blast_force_zscale, float, NONE) \
		P(class, prefix, blast_jump_damage, float, NONE) \
		P(class, prefix, blast_jump_edgedamage, float, NONE) \
		P(class, prefix, blast_jump_force, float, NONE) \
		P(class, prefix, blast_jump_force_velocitybias, float, NONE) \
		P(class, prefix, blast_jump_force_zscale, float, NONE) \
		P(class, prefix, blast_jump_multiplier_accuracy, float, NONE) \
		P(class, prefix, blast_jump_multiplier_distance, float, NONE) \
		P(class, prefix, blast_jump_multiplier_min, float, NONE) \
		P(class, prefix, blast_jump_radius, float, NONE) \
		P(class, prefix, blast_multiplier_accuracy, float, NONE) \
		P(class, prefix, blast_multiplier_distance, float, NONE) \
		P(class, prefix, blast_multiplier_min, float, NONE) \
		P(class, prefix, blast_refire, float, NONE) \
		P(class, prefix, blast_splash_damage, float, NONE) \
		P(class, prefix, blast_splash_edgedamage, float, NONE) \
		P(class, prefix, blast_splash_force, float, NONE) \
		P(class, prefix, blast_splash_force_forwardbias, float, NONE) \
		P(class, prefix, blast_splash_multiplier_accuracy, float, NONE) \
		P(class, prefix, blast_splash_multiplier_distance, float, NONE) \
		P(class, prefix, blast_splash_multiplier_min, float, NONE) \
		P(class, prefix, blast_splash_radius, float, NONE) \
		P(class, prefix, blast_spread_max, float, NONE) \
		P(class, prefix, blast_spread_min, float, NONE) \
		P(class, prefix, melee_animtime, float, NONE) \
		P(class, prefix, melee_damage, float, NONE) \
		P(class, prefix, melee_delay, float, NONE) \
		P(class, prefix, melee_force, float, NONE) \
		P(class, prefix, melee_multihit, float, NONE) \
		P(class, prefix, melee_no_doubleslap, float, NONE) \
		P(class, prefix, melee_nonplayerdamage, float, NONE) \
		P(class, prefix, melee_range, float, NONE) \
		P(class, prefix, melee_refire, float, NONE) \
		P(class, prefix, melee_swing_side, float, NONE) \
		P(class, prefix, melee_swing_up, float, NONE) \
		P(class, prefix, melee_time, float, NONE) \
		P(class, prefix, melee_traces, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
        P(class, prefix, switchdelay_drop, float, NONE) \
        P(class, prefix, weaponreplace, string, NONE) \
        P(class, prefix, weaponstart, float, NONE) \
        P(class, prefix, weaponstartoverride, float, NONE) \
        P(class, prefix, weaponthrowable, float, NONE) \
	END()
    W_PROPS(X, Shockwave, shockwave)
#undef X

ENDCLASS(Shockwave)
REGISTER_WEAPON(SHOCKWAVE, shockwave, NEW(Shockwave));

SPAWNFUNC_WEAPON(weapon_shockwave, WEP_SHOCKWAVE)

#ifdef CSQC
void Net_ReadShockwaveParticle();
.vector sw_shotorg;
.vector sw_shotdir;
.float sw_distance;
.float sw_spread_max;
.float sw_spread_min;
.float sw_time;
#endif
