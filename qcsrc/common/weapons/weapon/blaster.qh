#pragma once

CLASS(Blaster, Weapon)
/* spawnfunc */ ATTRIB(Blaster, m_canonical_spawnfunc, string, "weapon_blaster");
/* ammotype  */ //ATTRIB(Blaster, ammo_type, Resource, RES_NONE);
/* impulse   */ ATTRIB(Blaster, impulse, int, 1);
/* flags     */ ATTRIB(Blaster, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_CANCLIMB | WEP_TYPE_SPLASH);
/* rating    */ ATTRIB(Blaster, bot_pickupbasevalue, float, 0);
/* color     */ ATTRIB(Blaster, wpcolor, vector, '1 0.5 0.5');
/* modelname */ ATTRIB(Blaster, mdl, string, "laser");
#ifdef GAMEQC
/* model     */ ATTRIB(Blaster, m_model, Model, MDL_BLASTER_ITEM);
/* flash mdl */ ATTRIB(Blaster, m_muzzlemodel, Model, MDL_Null);
/* flash eff */ ATTRIB(Blaster, m_muzzleeffect, entity, EFFECT_BLASTER_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(Blaster, w_crosshair, string, "gfx/crosshairlaser");
/* crosshair */ ATTRIB(Blaster, w_crosshair_size, float, 0.5);
/* wepimg    */ ATTRIB(Blaster, model2, string, "weaponlaser");
/* refname   */ ATTRIB(Blaster, netname, string, "blaster");
/* wepname   */ ATTRIB(Blaster, m_name, string, _("Blaster"));
/* legacy    */ ATTRIB(Blaster, m_deprecated_netname, string, "laser");

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, animtime, float, PRI) \
		P(class, prefix, damage, float, PRI) \
		P(class, prefix, delay, float, PRI) \
		P(class, prefix, edgedamage, float, PRI) \
		P(class, prefix, force, float, PRI) \
		P(class, prefix, force_zscale, float, PRI) \
		P(class, prefix, lifetime, float, PRI) \
		P(class, prefix, radius, float, PRI) \
		P(class, prefix, refire, float, PRI) \
		P(class, prefix, shotangle, float, PRI) \
		P(class, prefix, speed, float, PRI) \
		P(class, prefix, spread, float, PRI) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, weaponreplace, string, NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, Blaster, blaster)
#undef X

METHOD(Blaster, describe, string(Blaster this)) {
	TC(Blaster, this);
	return _("The Blaster is one of the two main default weapons, firing a relatively weak high speed laser forwards, dealing some splash damage but importantly a lot of knockback\n\n"
	         "It has no secondary fire, instead switching to the previously selected weapon\n\n"
	         "It doesn't require ammo, meaning it is a great choice if you are running low on ammo and need to preserve some\n\n"
	         "The Blaster is always available so ends up being used a lot when players spawn in, but it's difficult to master when used over a medium to long range. "
	         "One of the most common uses of the Blaster is \"laser jumping\", where you can gain height by aiming down, jumping, then firing to boost yourself up. "
	         "Because it does a lot of knockback, another common usage is alternating between a high damage weapon and the Blaster to throw the enemy's aim off");
}
ENDCLASS(Blaster)
REGISTER_WEAPON(BLASTER, NEW(Blaster));

SPAWNFUNC_WEAPON(weapon_blaster, WEP_BLASTER)
SPAWNFUNC_WEAPON(weapon_laser, WEP_BLASTER)

CLASS(OffhandBlaster, OffhandWeapon)
ENDCLASS(OffhandBlaster)
OffhandBlaster OFFHAND_BLASTER;
STATIC_INIT(OFFHAND_BLASTER) { OFFHAND_BLASTER = NEW(OffhandBlaster); }
