#pragma once

CLASS(Blaster, Weapon)
/* spawnfunc */ ATTRIB(Blaster, m_canonical_spawnfunc, string, "weapon_blaster");
/* ammotype  */ //ATTRIB(Blaster, ammo_type, Resource, RES_NONE);
/* impulse   */ ATTRIB(Blaster, impulse, int, 1);
/* flags     */ ATTRIB(Blaster, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_CANCLIMB | WEP_TYPE_SPLASH);
/* rating    */ ATTRIB(Blaster, bot_pickupbasevalue, float, 0);
/* color     */ ATTRIB(Blaster, wpcolor, vector, '1 0.5 0.5');
/* modelname */ ATTRIB(Blaster, mdl, string, "laser");
#ifdef GAMEQC
/* model     */ ATTRIB(Blaster, m_model, Model, MDL_BLASTER_ITEM);
/* flash mdl */ ATTRIB(Blaster, m_muzzlemodel, Model, MDL_Null);
/* flash eff */ ATTRIB(Blaster, m_muzzleeffect, entity, EFFECT_BLASTER_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(Blaster, w_crosshair, string, "gfx/crosshairlaser");
/* crosshair */ ATTRIB(Blaster, w_crosshair_size, float, 0.5);
/* wepimg    */ ATTRIB(Blaster, model2, string, "weaponlaser");
/* refname   */ ATTRIB(Blaster, netname, string, "blaster");
/* wepname   */ ATTRIB(Blaster, m_name, string, _("Blaster"));
/* legacy    */ ATTRIB(Blaster, m_deprecated_netname, string, "laser");

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, animtime, float, PRI) \
		P(class, prefix, damage, float, PRI) \
		P(class, prefix, delay, float, PRI) \
		P(class, prefix, edgedamage, float, PRI) \
		P(class, prefix, force, float, PRI) \
		P(class, prefix, force_zscale, float, PRI) \
		P(class, prefix, lifetime, float, PRI) \
		P(class, prefix, radius, float, PRI) \
		P(class, prefix, refire, float, PRI) \
		P(class, prefix, shotangle, float, PRI) \
		P(class, prefix, speed, float, PRI) \
		P(class, prefix, spread, float, PRI) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, weaponreplace, string, NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, Blaster, blaster)
#undef X

ENDCLASS(Blaster)
REGISTER_WEAPON(BLASTER, NEW(Blaster));

SPAWNFUNC_WEAPON(weapon_blaster, WEP_BLASTER)
SPAWNFUNC_WEAPON(weapon_laser, WEP_BLASTER)

CLASS(OffhandBlaster, OffhandWeapon)
ENDCLASS(OffhandBlaster)
OffhandBlaster OFFHAND_BLASTER;
STATIC_INIT(OFFHAND_BLASTER) { OFFHAND_BLASTER = NEW(OffhandBlaster); }

#ifdef CSQC
bool autocvar_cl_polytrails_blaster_bolt = true;
float autocvar_cl_polytrails_blaster_bolt_head_alpha = 0.75;
vector autocvar_cl_polytrails_blaster_bolt_head_color = '1 0.25 0.25';
float autocvar_cl_polytrails_blaster_bolt_head_thickness = 5;
float autocvar_cl_polytrails_blaster_bolt_body_alpha = 0.2;
vector autocvar_cl_polytrails_blaster_bolt_body_color = '1 0.3 0.3';
float autocvar_cl_polytrails_blaster_bolt_body_thickness = 2;
float autocvar_cl_polytrails_blaster_bolt_tail_alpha = 0;
vector autocvar_cl_polytrails_blaster_bolt_tail_color = '1 0 0';
float autocvar_cl_polytrails_blaster_bolt_tail_thickness = 0;
float autocvar_cl_polytrails_blaster_bolt_lifetime = 0.05;
float autocvar_cl_polytrails_blaster_bolt_segmentsize = 0.25;
float autocvar_cl_polytrails_blaster_bolt_noise = 0;
string autocvar_cl_polytrails_blaster_bolt_noisefunc = "none";
CLASS(BlasterBoltTrail, PolyTrail)
	ATTRIB(BlasterBoltTrail, polytrail_tex, string, "particles/laserbeam.tga");
	ATTRIB(BlasterBoltTrail, polytrail_lifetime, float, autocvar_cl_polytrails_blaster_bolt_lifetime);
	ATTRIB(BlasterBoltTrail, polytrail_noise, float, autocvar_cl_polytrails_blaster_bolt_noise);
	ATTRIB(BlasterBoltTrail, polytrail_segmentsize, float, autocvar_cl_polytrails_blaster_bolt_segmentsize);
	ATTRIB(BlasterBoltTrail, polytrail_noisefunc, string, autocvar_cl_polytrails_blaster_bolt_noisefunc);
	ATTRIB(BlasterBoltTrail, polytrail_head_alpha, float, autocvar_cl_polytrails_blaster_bolt_head_alpha);
	ATTRIB(BlasterBoltTrail, polytrail_head_color, vector, autocvar_cl_polytrails_blaster_bolt_head_color);
	ATTRIB(BlasterBoltTrail, polytrail_head_thickness, float, autocvar_cl_polytrails_blaster_bolt_head_thickness);
	ATTRIB(BlasterBoltTrail, polytrail_body_alpha, float, autocvar_cl_polytrails_blaster_bolt_body_alpha);
	ATTRIB(BlasterBoltTrail, polytrail_body_color, vector, autocvar_cl_polytrails_blaster_bolt_body_color);
	ATTRIB(BlasterBoltTrail, polytrail_body_thickness, float, autocvar_cl_polytrails_blaster_bolt_body_thickness);
	ATTRIB(BlasterBoltTrail, polytrail_tail_alpha, float, autocvar_cl_polytrails_blaster_bolt_tail_alpha);
	ATTRIB(BlasterBoltTrail, polytrail_tail_color, vector, autocvar_cl_polytrails_blaster_bolt_tail_color);
	ATTRIB(BlasterBoltTrail, polytrail_tail_thickness, float, autocvar_cl_polytrails_blaster_bolt_tail_thickness);
ENDCLASS(BlasterBoltTrail)
#endif
