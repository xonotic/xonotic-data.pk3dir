#pragma once

#include "util.qh"

// info about a map that MapInfo loads
string MapInfo_Map_bspname;
string MapInfo_Map_title;
string MapInfo_Map_titlestring; // either bspname: title or just title, depending on whether bspname is redundant
string MapInfo_Map_description;
string MapInfo_Map_author;
string MapInfo_Map_clientstuff; // not in cache, only for map load
string MapInfo_Map_fog; // not in cache, only for map load
int MapInfo_Map_supportedGametypes;
int MapInfo_Map_supportedFeatures;
int MapInfo_Map_flags;
vector MapInfo_Map_mins; // these are '0 0 0' if not supported!
vector MapInfo_Map_maxs; // these are '0 0 0' if not specified!

int MAPINFO_TYPE_ALL;
.int m_flags;

CLASS(Gametype, Object)
    ATTRIB(Gametype, m_id, int, 0);
    /** game type ID */
    ATTRIB(Gametype, items, int, 0);
    /** game type name as in cvar (with g_ prefix) */
    ATTRIB(Gametype, netname, string);
    /** game type short name */
    ATTRIB(Gametype, mdl, string);
    /** human readable name */
    ATTRIB(Gametype, message, string);
    /** does this gametype support teamplay? */
    ATTRIB(Gametype, team, bool, false);
    /** game type defaults */
    ATTRIB(Gametype, model2, string);
    /** game type description */
    ATTRIB(Gametype, gametype_description, string);
#ifdef CSQC
    ATTRIB(Gametype, m_modicons, void(vector pos, vector mySize));
    ATTRIB(Gametype, m_modicons_reset, void());
#endif

    ATTRIB(Gametype, m_mutators, string);
    METHOD(Gametype, m_parse_mapinfo, bool(string k, string v))
    {
        return false;
    }
    METHOD(Gametype, m_generate_mapinfo, void(Gametype this, string v))
    {
        TC(Gametype, this);
    }
    METHOD(Gametype, m_isTwoBaseMode, bool())
    {
        return false;
    }
    METHOD(Gametype, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        return false;
    }

    METHOD(Gametype, describe, string(Gametype this))
    {
        TC(Gametype, this);
        return this.gametype_description;
    }

    METHOD(Gametype, display, void(Gametype this, void(string name, string icon) returns))
    {
        TC(Gametype, this);
        returns(this.message, strcat("gametype_", this.mdl));
    }

    METHOD(Gametype, gametype_init, void(Gametype this, string hname, string sname, string g_name, bool gteamplay, string mutators, string defaults, string gdescription))
    {
        this.netname = g_name;
        this.mdl = sname;
        this.message = hname;
        this.team = gteamplay;
        this.m_mutators = cons(sname, mutators);
        this.model2 = defaults;
        this.gametype_description = gdescription;

        // same as `1 << m_id`
        MAPINFO_TYPE_ALL |= this.items = this.m_flags = (MAPINFO_TYPE_ALL + 1);
    }
ENDCLASS(Gametype)

REGISTRY(Gametypes, 24)
#define Gametypes_from(i) _Gametypes_from(i, NULL)
REGISTER_REGISTRY(Gametypes)
REGISTRY_CHECK(Gametypes)
#define REGISTER_GAMETYPE(NAME, inst) REGISTER(Gametypes, MAPINFO_TYPE, NAME, m_id, inst)

#define IS_GAMETYPE(NAME) (MapInfo_LoadedGametype == MAPINFO_TYPE_##NAME)

CLASS(Deathmatch, Gametype)
    INIT(Deathmatch)
    {
        this.gametype_init(this, _("Deathmatch"),"dm","g_dm",false,"","timelimit=15 pointlimit=30 leadlimit=0",_("Score as many frags as you can"));
    }
    METHOD(Deathmatch, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        return true;
    }
ENDCLASS(Deathmatch)
REGISTER_GAMETYPE(DEATHMATCH, NEW(Deathmatch));

CLASS(LastManStanding, Gametype)
    INIT(LastManStanding)
    {
        this.gametype_init(this, _("Last Man Standing"),"lms","g_lms",false,"","timelimit=20 lives=9 leadlimit=0",_("Survive and kill until the enemies have no lives left"));
    }
    METHOD(LastManStanding, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        return true;
    }
ENDCLASS(LastManStanding)
REGISTER_GAMETYPE(LMS, NEW(LastManStanding));

#ifdef CSQC
void HUD_Mod_Race(vector pos, vector mySize);
#endif
CLASS(Race, Gametype)
    INIT(Race)
    {
        this.gametype_init(this, _("Race"),"rc","g_race",false,"","timelimit=20 qualifying_timelimit=5 laplimit=7 teamlaplimit=15 leadlimit=0",_("Race against other players to the finish line"));
    }
    METHOD(Race, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_race_qualifying_timelimit", cvar_defstring("g_race_qualifying_timelimit"));
            return true;
        }
        switch (k) {
            case "qualifying_timelimit":
                cvar_set("g_race_qualifying_timelimit", v);
                return true;
        }
        return false;
    }
    METHOD(Race, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "trigger_race_checkpoint")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
    METHOD(Race, m_isTwoBaseMode, bool())
    {
        return true;
    }
#ifdef CSQC
    ATTRIB(Race, m_modicons, void(vector pos, vector mySize), HUD_Mod_Race);
#endif
ENDCLASS(Race)
REGISTER_GAMETYPE(RACE, NEW(Race));
#define g_race IS_GAMETYPE(RACE)

CLASS(RaceCTS, Gametype)
    INIT(RaceCTS)
    {
        this.gametype_init(this, _("Race CTS"),"cts","g_cts",false,"cloaked","timelimit=20",_("Race for fastest time."));
    }
    METHOD(RaceCTS, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "target_startTimer")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
    METHOD(RaceCTS, m_setTeams, void(string sa))
    {
        // this is the skill of the map
        // not parsed by anything yet
        // for map databases
        //  cvar_set("fraglimit", sa);
    }
#ifdef CSQC
    ATTRIB(RaceCTS, m_modicons, void(vector pos, vector mySize), HUD_Mod_Race);
#endif
ENDCLASS(RaceCTS)
REGISTER_GAMETYPE(CTS, NEW(RaceCTS));
#define g_cts IS_GAMETYPE(CTS)

CLASS(TeamDeathmatch, Gametype)
    INIT(TeamDeathmatch)
    {
        this.gametype_init(this, _("Team Deathmatch"),"tdm","g_tdm",true,"","timelimit=15 pointlimit=50 teams=2 leadlimit=0",_("Help your team score the most frags against the enemy team"));
    }
    METHOD(TeamDeathmatch, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_tdm_teams", cvar_defstring("g_tdm_teams"));
            return true;
        }
        switch (k) {
            case "teams":
                cvar_set("g_tdm_teams", v);
                return true;
        }
        return false;
    }
    METHOD(TeamDeathmatch, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        if(spawnpoints >= 8 && diameter > 4096)
            return true;
        return false;
    }
    METHOD(TeamDeathmatch, m_setTeams, void(string sa))
    {
        cvar_set("g_tdm_teams", sa);
    }
ENDCLASS(TeamDeathmatch)
REGISTER_GAMETYPE(TEAM_DEATHMATCH, NEW(TeamDeathmatch));
#define g_tdm IS_GAMETYPE(TEAM_DEATHMATCH)

#ifdef CSQC
void HUD_Mod_CTF(vector pos, vector mySize);
void HUD_Mod_CTF_Reset();
#endif
CLASS(CaptureTheFlag, Gametype)
    INIT(CaptureTheFlag)
    {
        this.gametype_init(this, _("Capture the Flag"),"ctf","g_ctf",true,"","timelimit=20 caplimit=10 leadlimit=6",_("Find and bring the enemy flag to your base to capture it, defend your base from the other team"));
    }
    METHOD(CaptureTheFlag, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "item_flag_team2" || v == "team_CTF_blueflag")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
    METHOD(CaptureTheFlag, m_isTwoBaseMode, bool())
    {
        return true;
    }
    METHOD(CaptureTheFlag, m_setTeams, void(string sa))
    {
        cvar_set("fraglimit", sa);
    }
#ifdef CSQC
    ATTRIB(CaptureTheFlag, m_modicons, void(vector pos, vector mySize), HUD_Mod_CTF);
    ATTRIB(CaptureTheFlag, m_modicons_reset, void(), HUD_Mod_CTF_Reset);
#endif
ENDCLASS(CaptureTheFlag)
REGISTER_GAMETYPE(CTF, NEW(CaptureTheFlag));
#define g_ctf IS_GAMETYPE(CTF)

#ifdef CSQC
void HUD_Mod_CA(vector pos, vector mySize);
#endif
CLASS(ClanArena, Gametype)
    INIT(ClanArena)
    {
        this.gametype_init(this, _("Clan Arena"),"ca","g_ca",true,"","timelimit=20 pointlimit=10 teams=2 leadlimit=0",_("Kill all enemy teammates to win the round"));
    }
    METHOD(ClanArena, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_ca_teams", cvar_defstring("g_ca_teams"));
            return true;
        }
        switch (k) {
            case "teams":
                cvar_set("g_ca_teams", v);
                return true;
        }
        return false;
    }
    METHOD(ClanArena, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        if(spawnpoints >= 8 && diameter > 4096)
            return true;
        return false;
    }
    METHOD(ClanArena, m_setTeams, void(string sa))
    {
        cvar_set("g_ca_teams", sa);
    }
#ifdef CSQC
    ATTRIB(ClanArena, m_modicons, void(vector pos, vector mySize), HUD_Mod_CA);
#endif
ENDCLASS(ClanArena)
REGISTER_GAMETYPE(CA, NEW(ClanArena));
#define g_ca IS_GAMETYPE(CA)

#ifdef CSQC
void HUD_Mod_Dom(vector pos, vector mySize);
#endif
CLASS(Domination, Gametype)
    INIT(Domination)
    {
        this.gametype_init(this, _("Domination"),"dom","g_domination",true,"","timelimit=20 pointlimit=200 teams=2 leadlimit=0",_("Capture and defend all the control points to win"));
    }
    METHOD(Domination, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_domination_default_teams", cvar_defstring("g_domination_default_teams"));
            return true;
        }
        switch (k) {
            case "teams":
                cvar_set("g_domination_default_teams", v);
                return true;
        }
        return false;
    }
    METHOD(Domination, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "dom_controlpoint")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
#ifdef CSQC
    ATTRIB(Domination, m_modicons, void(vector pos, vector mySize), HUD_Mod_Dom);
#endif
ENDCLASS(Domination)
REGISTER_GAMETYPE(DOMINATION, NEW(Domination));

#ifdef CSQC
void HUD_Mod_KH(vector pos, vector mySize);
#endif
CLASS(KeyHunt, Gametype)
    INIT(KeyHunt)
    {
        this.gametype_init(this, _("Key Hunt"),"kh","g_keyhunt",true,"","timelimit=20 pointlimit=1000 teams=3 leadlimit=0",_("Gather all the keys to win the round"));
    }
    METHOD(KeyHunt, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_keyhunt_teams", cvar_defstring("g_keyhunt_teams"));
            return true;
        }
        switch (k) {
            case "teams":
                cvar_set("g_keyhunt_teams", v);
                return true;
        }
        return false;
    }
    METHOD(KeyHunt, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        if(spawnpoints >= 12 && diameter > 5120)
            return true;
        return false;
    }
    METHOD(KeyHunt, m_setTeams, void(string sa))
    {
        cvar_set("g_keyhunt_teams", sa);
    }
#ifdef CSQC
    ATTRIB(KeyHunt, m_modicons, void(vector pos, vector mySize), HUD_Mod_KH);
#endif
ENDCLASS(KeyHunt)
REGISTER_GAMETYPE(KEYHUNT, NEW(KeyHunt));

CLASS(Assault, Gametype)
    INIT(Assault)
    {
        this.gametype_init(this, _("Assault"),"as","g_assault",true,"","timelimit=20",_("Destroy obstacles to find and destroy the enemy power core before time runs out"));
    }
    METHOD(Assault, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "target_assault_roundend")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
    METHOD(Assault, m_isTwoBaseMode, bool())
    {
        return true;
    }
ENDCLASS(Assault)
REGISTER_GAMETYPE(ASSAULT, NEW(Assault));
#define g_assault IS_GAMETYPE(ASSAULT)

CLASS(Onslaught, Gametype)
    INIT(Onslaught)
    {
        this.gametype_init(this, _("Onslaught"),"ons","g_onslaught",true,"","pointlimit=1 timelimit=20",_("Capture control points to reach and destroy the enemy generator"));
    }
    METHOD(Onslaught, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "onslaught_generator")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
ENDCLASS(Onslaught)
REGISTER_GAMETYPE(ONSLAUGHT, NEW(Onslaught));

#ifdef CSQC
void HUD_Mod_NexBall(vector pos, vector mySize);
#endif
CLASS(NexBall, Gametype)
    INIT(NexBall)
    {
        this.gametype_init(this, _("Nexball"),"nb","g_nexball",true,"","timelimit=20 pointlimit=5 leadlimit=0",_("Shoot and kick the ball into the enemies goal, keep your goal clean"));
    }
    METHOD(NexBall, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(substring(v, 0, 8) == "nexball_" || substring(v, 0, 4) == "ball")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
    METHOD(NexBall, m_isTwoBaseMode, bool())
    {
        return true;
    }
#ifdef CSQC
    ATTRIB(NexBall, m_modicons, void(vector pos, vector mySize), HUD_Mod_NexBall);
#endif
ENDCLASS(NexBall)
REGISTER_GAMETYPE(NEXBALL, NEW(NexBall));
#define g_nexball IS_GAMETYPE(NEXBALL)

CLASS(FreezeTag, Gametype)
    INIT(FreezeTag)
    {
        this.gametype_init(this, _("Freeze Tag"),"ft","g_freezetag",true,"","timelimit=20 pointlimit=10 teams=2 leadlimit=0",_("Kill enemies to freeze them, stand next to frozen teammates to revive them; freeze all enemies to win"));
    }
    METHOD(FreezeTag, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_freezetag_teams", cvar_defstring("g_freezetag_teams"));
            return true;
        }
        switch (k) {
            case "teams":
                cvar_set("g_freezetag_teams", v);
                return true;
        }
        return false;
    }
    METHOD(FreezeTag, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        if(spawnpoints >= 8 && diameter > 4096)
            return true;
        return false;
    }
    METHOD(FreezeTag, m_setTeams, void(string sa))
    {
        cvar_set("g_freezetag_teams", sa);
    }
#ifdef CSQC
    ATTRIB(FreezeTag, m_modicons, void(vector pos, vector mySize), HUD_Mod_CA);
#endif
ENDCLASS(FreezeTag)
REGISTER_GAMETYPE(FREEZETAG, NEW(FreezeTag));
#define g_freezetag IS_GAMETYPE(FREEZETAG)

#ifdef CSQC
void HUD_Mod_Keepaway(vector pos, vector mySize);
#endif
CLASS(Keepaway, Gametype)
    INIT(Keepaway)
    {
        this.gametype_init(this, _("Keepaway"),"ka","g_keepaway",false,"","timelimit=20 pointlimit=30",_("Hold the ball to get points for kills"));
    }
    METHOD(Keepaway, m_isAlwaysSupported, bool(Gametype this, int spawnpoints, float diameter))
    {
        return true;
    }
#ifdef CSQC
    ATTRIB(Keepaway, m_modicons, void(vector pos, vector mySize), HUD_Mod_Keepaway);
#endif
ENDCLASS(Keepaway)
REGISTER_GAMETYPE(KEEPAWAY, NEW(Keepaway));

CLASS(Invasion, Gametype)
    INIT(Invasion)
    {
        this.gametype_init(this, _("Invasion"),"inv","g_invasion",false,"","pointlimit=50 teams=0 type=0",_("Survive against waves of monsters"));
    }
    METHOD(Invasion, m_parse_mapinfo, bool(string k, string v))
    {
        switch (k) {
            case "teams":
                cvar_set("g_invasion_teams", v);
                return true;
            case "type":
                cvar_set("g_invasion_type", v);
                return true;
        }
        return false;
    }
    METHOD(Invasion, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "invasion_spawnpoint")
            MapInfo_Map_supportedGametypes |= this.m_flags;
    }
ENDCLASS(Invasion)
REGISTER_GAMETYPE(INVASION, NEW(Invasion));

const int MAPINFO_FEATURE_WEAPONS       = 1; // not defined for instagib-only maps
const int MAPINFO_FEATURE_VEHICLES      = 2;
const int MAPINFO_FEATURE_TURRETS       = 4;
const int MAPINFO_FEATURE_MONSTERS      = 8;

const int MAPINFO_FLAG_HIDDEN           = 1; // not in lsmaps/menu/vcall/etc., can just be changed to manually
const int MAPINFO_FLAG_FORBIDDEN        = 2; // don't even allow the map by a cvar setting that allows hidden maps
const int MAPINFO_FLAG_FRUSTRATING      = 4; // this map is near impossible to play, enable at your own risk
const int MAPINFO_FLAG_NOAUTOMAPLIST    = 8; // do not include when automatically building maplist (counts as hidden for maplist building purposes)

float MapInfo_count;

// load MapInfo_count; generate mapinfo for maps that miss them, and clear the
// cache; you need to call MapInfo_FilterGametype afterwards!
void MapInfo_Enumerate();

// filter the info by game type mask (updates MapInfo_count)
float MapInfo_progress;
float MapInfo_FilterGametype(Gametype gametypeFlags, float features, float pFlagsRequired, float pFlagsForbidden, float pAbortOnGenerate); // 1 on success, 0 on temporary failure (call it again next frame then; use MapInfo_progress as progress indicator)
float _MapInfo_FilterGametype(int gametypeFlags, float features, float pFlagsRequired, float pFlagsForbidden, float pAbortOnGenerate); // 1 on success, 0 on temporary failure (call it again next frame then; use MapInfo_progress as progress indicator)
void MapInfo_FilterString(string sf); // filter _MapInfo_filtered (created by MapInfo_FilterGametype) with keyword
int MapInfo_CurrentFeatures(); // retrieves currently required features from cvars
Gametype MapInfo_CurrentGametype(); // retrieves current gametype from cvars
int MapInfo_ForbiddenFlags(); // retrieves current flags from cvars
int MapInfo_RequiredFlags(); // retrieves current flags from cvars

// load info about the i-th map into the MapInfo_Map_* globals
float MapInfo_Get_ByID(float i); // 1 on success, 0 on failure
string MapInfo_BSPName_ByID(float i);

// load info about a map by name into the MapInfo_Map_* globals
int MapInfo_Get_ByName(string s, float allowGenerate, Gametype gametypeToSet); // 1 on success, 0 on failure, 2 if it autogenerated a mapinfo file

// look for a map by a prefix, returns the actual map name on success, string_null on failure or ambigous match
string MapInfo_FindName_match; // the name of the map that was found
float MapInfo_FindName_firstResult; // -1 if none were found, index of first one if not unique but found (FindName then returns -1)
float MapInfo_FindName(string s);
string MapInfo_FixName(string s);

// play a map
float MapInfo_CheckMap(string s); // returns 0 if the map can't be played with the current settings
void MapInfo_LoadMap(string s, float reinit);

// list all maps for the current game type
string MapInfo_ListAllowedMaps(Gametype type, float pFlagsRequired, float pFlagsForbidden);
// list all allowed maps (for any game type)
string MapInfo_ListAllAllowedMaps(float pFlagsRequired, float pFlagsForbidden);

// gets a gametype from a string
string _MapInfo_GetDefaultEx(Gametype t);
float _MapInfo_GetTeamPlayBool(Gametype t);
Gametype MapInfo_Type_FromString(string t);
string MapInfo_Type_Description(Gametype t);
string MapInfo_Type_ToString(Gametype t);
string MapInfo_Type_ToText(Gametype t);
void MapInfo_SwitchGameType(Gametype t);

// to be called from worldspawn to set up cvars
void MapInfo_LoadMapSettings(string s);
Gametype MapInfo_LoadedGametype; // game type that was active during map load

void MapInfo_Cache_Destroy(); // disable caching
void MapInfo_Cache_Create(); // enable caching
void MapInfo_Cache_Invalidate(); // delete cache if any, but keep enabled

void MapInfo_ClearTemps(); // call this when done with mapinfo for this frame

void MapInfo_Shutdown(); // call this in the shutdown handler

#define MAPINFO_SETTEMP_ACL_USER cvar_string("g_mapinfo_settemp_acl")
#define MAPINFO_SETTEMP_ACL_SYSTEM "-g_mapinfo_* -rcon_* -_* -g_ban* +*"
