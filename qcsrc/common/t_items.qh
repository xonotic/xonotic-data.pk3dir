#ifndef T_ITEMS_H
#define T_ITEMS_H

const int AMMO_COUNT = 4; // amount of ammo types to show in the inventory panel

// item networking
const int ISF_LOCATION 			= BIT(1);
const int ISF_MODEL				= BIT(2);
const int ISF_STATUS 			= BIT(3);
    const int ITS_STAYWEP 		    = BIT(0);
    const int ITS_ANIMATE1 		    = BIT(1);
    const int ITS_ANIMATE2 		    = BIT(2);
    const int ITS_AVAILABLE 	    = BIT(3);
    const int ITS_ALLOWFB 		    = BIT(4);
    const int ITS_ALLOWSI 		    = BIT(5);
    const int ITS_POWERUP 		    = BIT(6);
const int ISF_COLORMAP 			= BIT(4);
const int ISF_DROP 				= BIT(5);
const int ISF_ANGLES 			= BIT(6);
const int ISF_SIZE 				= BIT(7);

.int ItemStatus;

.float fade_start;
.float fade_end;

#ifdef SVQC
void StartItem(entity this, entity a);
#endif

#ifdef CSQC

float  autocvar_cl_animate_items = 1;
float  autocvar_cl_ghost_items = 0.45;
vector autocvar_cl_ghost_items_color = '-1 -1 -1';
float  autocvar_cl_fullbright_items = 0;
vector autocvar_cl_weapon_stay_color = '2 0.5 0.5';
float  autocvar_cl_weapon_stay_alpha = 0.75;
float  autocvar_cl_simple_items = 0;
string autocvar_cl_simpleitems_postfix = "_simple";
.float  spawntime;
.float  gravity;
.vector colormod;

void ItemDraw(entity this);
void ItemDrawSimple(entity this);

#endif
#ifdef SVQC
spawnfunc(item_strength);
spawnfunc(item_invincible);
spawnfunc(item_armor_small);
spawnfunc(item_shells);
spawnfunc(item_bullets);
spawnfunc(item_rockets);

float autocvar_sv_simple_items;
bool ItemSend(entity this, entity to, int sf);


bool have_pickup_item(entity this);

const float ITEM_RESPAWN_TICKS = 10;

#define ITEM_RESPAWNTIME(i)         ((i).respawntime + crandom() * (i).respawntimejitter)
	// range: respawntime - respawntimejitter .. respawntime + respawntimejitter
#define ITEM_RESPAWNTIME_INITIAL(i) (ITEM_RESPAWN_TICKS + random() * ((i).respawntime + (i).respawntimejitter - ITEM_RESPAWN_TICKS))
	// range: 10 .. respawntime + respawntimejitter

.float max_armorvalue;
.float pickup_anyway;

void Item_Show (entity e, float mode);

void Item_Respawn ();

void Item_RespawnCountdown ();
void Item_ScheduleRespawnIn(entity e, float t);

void Item_ScheduleRespawn(entity e);

void Item_ScheduleInitialRespawn(entity e);
float ITEM_MODE_NONE = 0;
float ITEM_MODE_HEALTH = 1;
float ITEM_MODE_ARMOR = 2;
float ITEM_MODE_FUEL = 3;
float Item_GiveAmmoTo(entity item, entity player, .float ammotype, float ammomax, float mode);

float Item_GiveTo(entity item, entity player);

void Item_Touch();

void Item_Reset(entity this);

void Item_FindTeam();
// Savage: used for item garbage-collection
// TODO: perhaps nice special effect?

bool ItemSend(entity this, entity to, int sf);
void ItemUpdate(entity this);

void UpdateItemAfterTeleport(entity this);

// pickup evaluation functions
// these functions decide how desirable an item is to the bots

float generic_pickupevalfunc(entity player, entity item);// {return item.bot_pickupbasevalue;} // WEAPONTODO

float weapon_pickupevalfunc(entity player, entity item);

float commodity_pickupevalfunc(entity player, entity item);

.float is_item;
.entity itemdef;
void _StartItem(entity this, entity def, float defaultrespawntime, float defaultrespawntimejitter);


void target_items_use ();

float GiveWeapon(entity e, float wpn, float op, float val);

float GiveBit(entity e, .float fld, float bit, float op, float val);

float GiveValue(entity e, .float fld, float op, float val);

void GiveSound(entity e, float v0, float v1, float t, Sound snd_incr, Sound snd_decr);

void GiveRot(entity e, float v0, float v1, .float rotfield, float rottime, .float regenfield, float regentime);

#define PREGIVE_WEAPONS(e) WepSet save_weapons; save_weapons = e.weapons
#define PREGIVE(e,f) float save_##f; save_##f = (e).f
#define POSTGIVE_WEAPON(e,b,snd_incr,snd_decr) GiveSound((e), !!(save_weapons & WepSet_FromWeapon(b)), !!(e.weapons & WepSet_FromWeapon(b)), 0, snd_incr, snd_decr)
#define POSTGIVE_BIT(e,f,b,snd_incr,snd_decr) GiveSound((e), save_##f & (b), (e).f & (b), 0, snd_incr, snd_decr)
#define POSTGIVE_VALUE(e,f,t,snd_incr,snd_decr) GiveSound((e), save_##f, (e).f, t, snd_incr, snd_decr)
#define POSTGIVE_VALUE_ROT(e,f,t,rotfield,rottime,regenfield,regentime,snd_incr,snd_decr) GiveRot((e), save_##f, (e).f, rotfield, rottime, regenfield, regentime); GiveSound((e), save_##f, (e).f, t, snd_incr, snd_decr)

float GiveItems(entity e, float beginarg, float endarg);
#endif
#endif
