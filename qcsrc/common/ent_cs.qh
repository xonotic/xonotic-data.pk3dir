#ifndef ENT_CS_H
#define ENT_CS_H

REGISTER_NET_LINKED(ENT_CLIENT_ENTCS)
REGISTER_NET_TEMP(CLIENT_ENTCS)

/** True when private information such as origin is available */
.bool m_entcs_private;
/** True when origin is available */
.bool has_origin;
/** True when a recent server sent origin has been received */
.bool has_sv_origin;

#ifdef SVQC
/*
 * The point of these entities is to avoid the problems
 * with clientprediction.
 * If you add SendEntity to players, the engine will not
 * do any prediction anymore, and you'd have to write the whole
 * prediction code in CSQC, you want that? :P
 * Data can depend on gamemode. For now, it serves as GPS entities
 * in onslaught... YAY ;)
 */

	.entity entcs;

	bool entcs_send(entity this, entity to, int sf);

	void entcs_think(entity this);

	void entcs_attach(entity e);

	void entcs_detach(entity e);

	.int m_forceupdate;

/** Force an origin update, for player sounds */
	#define entcs_force_origin(e) ((e).entcs.m_forceupdate = BIT(2))

#endif

#ifdef CSQC

	ArrayList _entcs;
	STATIC_INIT(_entcs)
	{
		AL_NEW(_entcs, 255, NULL, e);  // 255 is the engine limit on maxclients
	}
	SHUTDOWN(_entcs)
	{
		AL_DELETE(_entcs);
	}
	#define entcs_receiver(...) EVAL_entcs_receiver(OVERLOAD(entcs_receiver, __VA_ARGS__))
	#define EVAL_entcs_receiver(...) __VA_ARGS__
	#define entcs_receiver_1(i) AL_gete(_entcs, i)
	#define entcs_receiver_2(i, v) AL_sete(_entcs, i, v)
	#define entcs_is_self(e) ((e).sv_entnum == player_localentnum - 1)

	/**
     * @param i zero indexed player
     */
	bool entcs_IsSpectating(int i)
	{
		bool unconnected = !playerslots[i].gotscores;
		return unconnected || stof(getplayerkeyvalue(i, "frags")) == FRAGS_SPECTATOR;
	}

	/**
	* @param i zero indexed player
	* @returns 0 if not teamplay
	*/
	int entcs_GetTeamColor(int i)
	{
		return (!teamplay) ? 0 : stof(getplayerkeyvalue(i, "colors")) & 15;
	}

	/**
	* @param i zero indexed player
	* @returns 0 if not teamplay | NUM_TEAM_##N | NUM_SPECTATOR
	*/
	int entcs_GetTeam(int i)
	{
		return entcs_IsSpectating(i) ? NUM_SPECTATOR : entcs_GetTeamColor(i);
	}

	/**
	 * Same as `entcs_GetTeam`, but returns -1 for no team in teamplay
	 */
	int entcs_GetScoreTeam(int i)
	{
		int t = entcs_GetTeam(i);
		if (teamplay && !t) t = -1;
		return t;
	}

	/**
	* @param i zero indexed player
	*/
	string entcs_GetName(int i)
	{
		return ColorTranslateRGB(getplayerkeyvalue(i, "name"));
	}

    /**
     * @param i zero indexed player
     */
	entity CSQCModel_server2csqc(int i);

    .float alpha;

    /**
     * @param i zero indexed player
     */
	float entcs_GetAlpha(int i)
	{
		entity e = CSQCModel_server2csqc(i);
		return e ? e.alpha : 1;
	}

    /**
     * @param i zero indexed player
     */
	vector entcs_GetColor(int i)
	{
		entity e = CSQCModel_server2csqc(i);
		return (!e || e.colormap <= 0)
		       ? '1 1 1'
			   : colormapPaletteColor(((e.colormap >= 1024)
			? e.colormap
			: stof(getplayerkeyvalue(e.colormap - 1, "colors"))) & 15, true)
		;
	}

    /**
     * @param i zero indexed player
     */
	bool entcs_IsDead(int i)
	{
		entity e = CSQCModel_server2csqc(i);
		return e ? e.csqcmodel_isdead : false;
	}

#endif

#endif
