#ifndef SV_MINIGAMES_H
#define SV_MINIGAMES_H

/// Create a new minigame session
/// \return minigame session entity
entity start_minigame(entity player, string minigame );

/// Join an existing minigame session
/// \return minigame session entity
entity join_minigame(entity player, string game_id );

/// Invite a player to join in a minigame
/// \return Error string
string invite_minigame(entity inviter, entity player);

// Part minigame session
void part_minigame(entity player);

// Ends a minigame session
void end_minigame(entity minigame_session);

// Ends all minigame sessions
void end_minigames();

// Only sends entities to players who joined the minigame
// Use on customizeentityforclient for gameplay entities
bool minigame_CheckSend();

// Check for minigame impulses
bool MinigameImpulse(int imp);

// Parse a client command ( cmd minigame ... )
void ClientCommand_minigame(int request, int argc, string command);

// Find the minigame_player entity for the given client entity
entity minigame_find_player(entity client);

/// For players: Minigame being played
.entity active_minigame;

/// For minigame sessions: list of players
/// For minigame_player: client entity
.entity minigame_players;

entity minigame_sessions;

bool minigame_SendEntity(entity to, int sf);

void RegisterMinigames();
const int MINIGAMES_MAX = 24;
entity MINIGAMES[MINIGAMES_MAX], MINIGAMES_first, MINIGAMES_last;
int MINIGAMES_COUNT;
#define REGISTER_MINIGAME(name,nicename) \
    REGISTER(RegisterMinigames, MINIGAME, MINIGAMES, MINIGAMES_COUNT, name, m_id, spawn()); \
    int name##_server_event(entity, string, ...); \
    REGISTER_INIT_POST(MINIGAME, name) { \
        this.classname = "minigame_descriptor"; \
        this.netname = strzone(strtolower(#name)); \
        this.message = nicename; \
		this.minigame_event = name##_server_event; \
    } \
    REGISTER_INIT(MINIGAME, name)
REGISTER_REGISTRY(RegisterMinigames)

#endif
