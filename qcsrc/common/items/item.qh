#pragma once

#ifdef GAMEQC
#include <common/models/all.qh>
#include <common/sounds/all.qh>
#include <common/sounds/all.inc>
#include <common/stats.qh>
#endif

#ifdef SVQC
#include <server/items/spawning.qh>
#endif

#ifdef GAMEQC
const int IT_UNLIMITED_AMMO 			=  BIT(0); // when this bit is set, using a weapon does not reduce ammo. Checkpoints can give this powerup.
const int IT_UNLIMITED_SUPERWEAPONS		=  BIT(1); // when this bit is set, superweapons don't expire. Checkpoints can give this powerup.

const int IT_JETPACK               		=  BIT(2); // actual item
const int IT_USING_JETPACK         		=  BIT(3); // confirmation that button is pressed
const int IT_FUEL_REGEN            		=  BIT(4); // fuel regeneration trigger

const int IT_RESOURCE       			=  BIT(5); // bitflag to mark this item as a resource (unused)

const int IT_KEY1						= BIT(6);
const int IT_KEY2						= BIT(7);

// special colorblend meaning in engine
const int IT_INVISIBILITY 				= BIT(9);
const int IT_INVINCIBLE 				= BIT(10);
const int IT_SUPERWEAPON				= BIT(11); // suit
const int IT_STRENGTH   				= BIT(12);

// item masks
const int IT_PICKUPMASK                	= IT_UNLIMITED_AMMO | IT_UNLIMITED_SUPERWEAPONS | IT_JETPACK | IT_FUEL_REGEN; // strength and invincible are handled separately

// item networking
const int ISF_LOCATION          = BIT(1);
const int ISF_MODEL             = BIT(2);
const int ISF_STATUS            = BIT(3);
const int ISF_COLORMAP          = BIT(4);
const int ISF_DROP              = BIT(5);
const int ISF_ANGLES            = BIT(6);
const int ISF_SIZE              = BIT(7);

REGISTER_NET_LINKED(ENT_CLIENT_ITEM)

// item status
.int ItemStatus;
const int ITS_STAYWEP           = BIT(0);
const int ITS_ANIMATE1          = BIT(1);
const int ITS_ANIMATE2          = BIT(2);
const int ITS_AVAILABLE         = BIT(3);
const int ITS_ALLOWFB           = BIT(4);
const int ITS_ALLOWSI           = BIT(5);
const int ITS_GLOW              = BIT(6);

.float fade_start;
.float fade_end;

.string mdl;
#endif

#ifdef SVQC
.float strength_finished; // NOTE: this field is used only by map entities, it does not directly apply the strength stat
.float invincible_finished; // ditto

#define spawnfunc_body(item) \
	if (!Item_IsDefinitionAllowed(item)) \
	{ \
		startitem_failed = true; \
		delete(this); \
		return; \
	} \
	StartItem(this, item)

#define SPAWNFUNC_ITEM(name, item) \
	spawnfunc(name) \
	{ \
		spawnfunc_body(item); \
	}

#define SPAWNFUNC_ITEM_COND(name, cond, item1, item2) \
	spawnfunc(name) \
	{ \
		entity item = (cond) ? item1 : item2; \
		spawnfunc_body(item); \
	}

#else

#define SPAWNFUNC_ITEM(name, item)

#endif

enum
{
	ITEM_FLAG_NORMAL = BIT(0), ///< Item is usable during normal gameplay.
	ITEM_FLAG_MUTATORBLOCKED = BIT(1),
	ITEM_FLAG_RESOURCE = BIT(2) ///< Item is is a resource, not a held item.
};

#define ITEM_HANDLE(signal, ...) __Item_Send_##signal(__VA_ARGS__)
CLASS(GameItem, Object)
    ATTRIB(GameItem, m_id, int, 0);
    /** the canonical spawnfunc name */
    ATTRIB(GameItem, m_canonical_spawnfunc, string);
    METHOD(GameItem, m_spawnfunc_hookreplace, GameItem(GameItem this, entity e)) { return this; }
    ATTRIB(GameItem, m_name, string);
    ATTRIB(GameItem, m_icon, string);
    ATTRIB(GameItem, m_color, vector, '1 1 1');
    ATTRIB(GameItem, m_waypoint, string);
    ATTRIB(GameItem, m_waypointblink, int, 1);
#ifdef GAMEQC
    ATTRIB(GameItem, m_glow, bool, false);
    ATTRIB(GameItem, m_respawnsound, Sound, SND_ITEMRESPAWN);
#endif
    METHOD(GameItem, display, void(GameItem this, void(string name, string icon) returns))
    {
        TC(GameItem, this);
        returns(this.m_name, this.m_icon ? sprintf("/gfx/hud/%s/%s", cvar_string("menu_skin"), this.m_icon) : string_null);
    }
    METHOD(GameItem, show, void(GameItem this))
    {
        TC(GameItem, this);
        LOG_INFO("A game item");
    }
    void ITEM_HANDLE(Show, GameItem this) { this.show(this); }
ENDCLASS(GameItem)
