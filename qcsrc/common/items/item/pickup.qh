#ifndef PICKUP_H
#define PICKUP_H
#include "../inventory.qh"
#include "../item.qh"
CLASS(Pickup, GameItem)
#ifndef MENUQC
    ATTRIB(Pickup, m_model, Model, NULL)
    ATTRIB(Pickup, m_sound, Sound, SND_ITEMPICKUP)
#endif
    ATTRIB(Pickup, m_name, string, string_null)
    METHOD(Pickup, show, void(Pickup this)) { LOG_INFOF("%s: %s\n", etos(this), this.m_name); }
#ifdef SVQC
    ATTRIB(Pickup, m_mins, vector, '-16 -16 0')
    ATTRIB(Pickup, m_maxs, vector, '16 16 32')
    ATTRIB(Pickup, m_botvalue, int, 0)
    ATTRIB(Pickup, m_itemflags, int, 0)
    ATTRIB(Pickup, m_itemid, int, 0)
    float generic_pickupevalfunc(entity player, entity item);
    ATTRIB(Pickup, m_pickupevalfunc, float(entity player, entity item), generic_pickupevalfunc)
    ATTRIB(Pickup, m_respawntime, float(), func_null)
    ATTRIB(Pickup, m_respawntimejitter, float(), func_null)
    float Item_GiveTo(entity item, entity player);
    METHOD(Pickup, giveTo, bool(Pickup this, entity item, entity player))
    {
        bool b = Item_GiveTo(item, player);
        if (b) {
            LOG_TRACEF("entity %i picked up %s\n", player, this.m_name);
            player.inventory.inv_items[this.m_id]++;
            Inventory_update(player);
        }
        return b;
    }
    bool ITEM_HANDLE(Pickup, Pickup this, entity item, entity player);
#endif
ENDCLASS(Pickup)

#endif
