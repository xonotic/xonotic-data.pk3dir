#ifndef VEHICLE_RAPTOR
#define VEHICLE_RAPTOR
#include "raptor.qh"

#include "raptor_weapons.qc"

CLASS(Raptor, Vehicle)
/* spawnflags */ ATTRIB(Raptor, spawnflags, int, VHF_DMGSHAKE | VHF_DMGROLL);
/* mins       */ ATTRIB(Raptor, mins, vector, '-80 -80 0');
/* maxs       */ ATTRIB(Raptor, maxs, vector, '80 80 70');
/* view offset*/ ATTRIB(Raptor, view_ofs, vector, '0 0 160');
/* view dist  */ ATTRIB(Raptor, height, float, 200);
/* model	  */ ATTRIB(Raptor, mdl, string, "models/vehicles/raptor.dpm");
/* model	  */ ATTRIB(Raptor, model, string, "models/vehicles/raptor.dpm");
/* head_model */ ATTRIB(Raptor, head_model, string, "");
/* hud_model  */ ATTRIB(Raptor, hud_model, string, "models/vehicles/raptor_cockpit.dpm");
/* tags       */ ATTRIB(Raptor, tag_head, string, "");
/* tags       */ ATTRIB(Raptor, tag_hud, string, "tag_hud");
/* tags       */ ATTRIB(Raptor, tag_view, string, "tag_camera");
/* netname    */ ATTRIB(Raptor, netname, string, "raptor");
/* fullname   */ ATTRIB(Raptor, vehicle_name, string, _("Raptor"));
/* icon       */ ATTRIB(Raptor, m_icon, string, "vehicle_raptor");
ENDCLASS(Raptor)
REGISTER_VEHICLE(RAPTOR, NEW(Raptor));

#endif

#ifdef IMPLEMENTATION

#include "raptor_weapons.qc"

#ifdef SVQC

bool autocvar_g_vehicle_raptor;

float autocvar_g_vehicle_raptor_respawntime;
float autocvar_g_vehicle_raptor_takeofftime;

float autocvar_g_vehicle_raptor_movestyle;
float autocvar_g_vehicle_raptor_turnspeed;
float autocvar_g_vehicle_raptor_pitchspeed;
float autocvar_g_vehicle_raptor_pitchlimit;

float autocvar_g_vehicle_raptor_speed_forward;
float autocvar_g_vehicle_raptor_speed_strafe;
float autocvar_g_vehicle_raptor_speed_up;
float autocvar_g_vehicle_raptor_speed_down;
float autocvar_g_vehicle_raptor_friction;

float autocvar_g_vehicle_raptor_cannon_turnspeed;
float autocvar_g_vehicle_raptor_cannon_turnlimit;
float autocvar_g_vehicle_raptor_cannon_pitchlimit_up;
float autocvar_g_vehicle_raptor_cannon_pitchlimit_down;

float autocvar_g_vehicle_raptor_cannon_locktarget;
float autocvar_g_vehicle_raptor_cannon_locking_time;
float autocvar_g_vehicle_raptor_cannon_locking_releasetime;
float autocvar_g_vehicle_raptor_cannon_locked_time;
float autocvar_g_vehicle_raptor_cannon_predicttarget;

float autocvar_g_vehicle_raptor_energy;
float autocvar_g_vehicle_raptor_energy_regen;
float autocvar_g_vehicle_raptor_energy_regen_pause;

float autocvar_g_vehicle_raptor_health;
float autocvar_g_vehicle_raptor_health_regen;
float autocvar_g_vehicle_raptor_health_regen_pause;

float autocvar_g_vehicle_raptor_shield;
float autocvar_g_vehicle_raptor_shield_regen;
float autocvar_g_vehicle_raptor_shield_regen_pause;

float autocvar_g_vehicle_raptor_bouncefactor;
float autocvar_g_vehicle_raptor_bouncestop;
vector autocvar_g_vehicle_raptor_bouncepain;

.entity bomb1;
.entity bomb2;

float raptor_altitude(float amax)
{SELFPARAM();
	tracebox(self.origin, self.mins, self.maxs, self.origin - ('0 0 1' * amax), MOVE_WORLDONLY, self);
	return vlen(self.origin - trace_endpos);
}

void raptor_land()
{SELFPARAM();
	float hgt;

	hgt = raptor_altitude(512);
	self.velocity = (self.velocity * 0.9) + ('0 0 -1800' * (hgt / 256) * sys_frametime);
	self.angles_x *= 0.95;
	self.angles_z *= 0.95;

	if(hgt < 128)
	if(hgt > 0)
		self.frame = (hgt / 128) * 25;

	self.bomb1.gun1.avelocity_y = 90 + ((self.frame / 25) * 2000);
	self.bomb1.gun2.avelocity_y = -self.bomb1.gun1.avelocity_y;

	if(hgt < 16)
	{
		self.movetype = MOVETYPE_TOSS;
		self.think	= vehicles_think;
		self.frame	= 0;
	}

	self.nextthink  = time;

	CSQCMODEL_AUTOUPDATE(self);
}

void raptor_exit(float eject)
{SELFPARAM();
	vector spot;
	self.tur_head.exteriormodeltoclient = world;

	if(!IS_DEAD(self))
	{
		self.think	  = raptor_land;
		self.nextthink  = time;
	}

	if(!self.owner)
		return;

	makevectors(self.angles);
	if(eject)
	{
		spot = self.origin + v_forward * 100 + '0 0 64';
		spot = vehicles_findgoodexit(spot);
		setorigin(self.owner , spot);
		self.owner.velocity = (v_up + v_forward * 0.25) * 750;
		self.owner.oldvelocity = self.owner.velocity;
	}
	else
	{
		if(vlen(self.velocity) > 2 * autocvar_sv_maxairspeed)
		{
			self.owner.velocity = normalize(self.velocity) * autocvar_sv_maxairspeed * 2;
			self.owner.velocity_z += 200;
			spot = self.origin + v_forward * 32 + '0 0 64';
			spot = vehicles_findgoodexit(spot);
		}
		else
		{
			self.owner.velocity = self.velocity * 0.5;
			self.owner.velocity_z += 10;
			spot = self.origin - v_forward * 200 + '0 0 64';
			spot = vehicles_findgoodexit(spot);
		}
		self.owner.oldvelocity = self.owner.velocity;
		setorigin(self.owner , spot);
	}

	antilag_clear(self.owner);
	self.owner = world;
}

float raptor_frame()
{SELFPARAM();
	entity player, raptor;
	float ftmp = 0;
	vector df;

	if(intermission_running)
	{
		self.vehicle.velocity = '0 0 0';
		self.vehicle.avelocity = '0 0 0';
		return 1;
	}

	player = self;
	raptor = self.vehicle;
	setself(raptor);

	vehicles_frame(raptor, player);

	/*
	ftmp = vlen(self.velocity);
	if(ftmp > autocvar_g_vehicle_raptor_speed_forward)
		ftmp = 1;
	else
		ftmp = ftmp / autocvar_g_vehicle_raptor_speed_forward;
	*/

	if(self.sound_nexttime < time)
	{
		self.sound_nexttime = time + 7.955812;
		//sound (self.tur_head, CH_TRIGGER_SINGLE, SND_VEH_RAPTOR_FLY, 1 - ftmp,   ATTEN_NORM );
		sound (self, CH_TRIGGER_SINGLE, SND_VEH_RAPTOR_SPEED, 1, ATTEN_NORM);
		self.wait = ftmp;
	}
	/*
	else if(fabs(ftmp - self.wait) > 0.2)
	{
		sound (self.tur_head, CH_TRIGGER_SINGLE, SND_Null, 1 - ftmp,   ATTEN_NORM );
		sound (self, CH_TRIGGER_SINGLE, SND_Null, ftmp, ATTEN_NORM);
		self.wait = ftmp;
	}
	*/

	if(IS_DEAD(raptor))
	{
		setself(player);
		player.BUTTON_ATCK = player.BUTTON_ATCK2 = 0;
		return 1;
	}
	crosshair_trace(player);

	//if(time - self.lastteleporttime < 1)
	//{
		if(raptor.angles_z > 50 || raptor.angles_z < -50)
		{
			if(player.BUTTON_JUMP)
			{
				player.BUTTON_CROUCH = true;
				player.BUTTON_JUMP = false;
			}
		}
	//}

	vector vang;
	vang = raptor.angles;
	df = vectoangles(normalize(trace_endpos - self.origin + '0 0 32'));
	vang_x *= -1;
	df_x *= -1;
	if(df_x > 180)  df_x -= 360;
	if(df_x < -180) df_x += 360;
	if(df_y > 180)  df_y -= 360;
	if(df_y < -180) df_y += 360;

	ftmp = shortangle_f(player.v_angle_y - vang_y, vang_y);
	if(ftmp > 180)  ftmp -= 360; if(ftmp < -180) ftmp += 360;
	raptor.avelocity_y = bound(-autocvar_g_vehicle_raptor_turnspeed, ftmp + raptor.avelocity_y * 0.9, autocvar_g_vehicle_raptor_turnspeed);

	// Pitch
	ftmp = 0;
	if(player.movement_x > 0 && vang_x < autocvar_g_vehicle_raptor_pitchlimit) ftmp = 5;
	else if(player.movement_x < 0 && vang_x > -autocvar_g_vehicle_raptor_pitchlimit) ftmp = -20;

	df_x = bound(-autocvar_g_vehicle_raptor_pitchlimit, df_x , autocvar_g_vehicle_raptor_pitchlimit);
	ftmp = vang_x - bound(-autocvar_g_vehicle_raptor_pitchlimit, df_x + ftmp, autocvar_g_vehicle_raptor_pitchlimit);
	raptor.avelocity_x = bound(-autocvar_g_vehicle_raptor_pitchspeed, ftmp + raptor.avelocity_x * 0.9, autocvar_g_vehicle_raptor_pitchspeed);

	raptor.angles_x = anglemods(raptor.angles_x);
	raptor.angles_y = anglemods(raptor.angles_y);
	raptor.angles_z = anglemods(raptor.angles_z);

	if(autocvar_g_vehicle_raptor_movestyle == 1)
		makevectors('0 1 0' * raptor.angles_y);
	else
		makevectors(player.v_angle);

	df = raptor.velocity * -autocvar_g_vehicle_raptor_friction;

	if(player.movement_x != 0)
	{
		if(player.movement_x > 0)
			df += v_forward  * autocvar_g_vehicle_raptor_speed_forward;
		else if(player.movement_x < 0)
			df -= v_forward  * autocvar_g_vehicle_raptor_speed_forward;
	}

	if(player.movement_y != 0)
	{
		if(player.movement_y < 0)
			df -= v_right * autocvar_g_vehicle_raptor_speed_strafe;
		else if(player.movement_y > 0)
			df += v_right * autocvar_g_vehicle_raptor_speed_strafe;

		raptor.angles_z = bound(-30,raptor.angles_z + (player.movement_y / autocvar_g_vehicle_raptor_speed_strafe),30);
	}
	else
	{
		raptor.angles_z *= 0.95;
		if(raptor.angles_z >= -1 && raptor.angles_z <= -1)
			raptor.angles_z = 0;
	}

	if(player.BUTTON_CROUCH)
		df -=   v_up * autocvar_g_vehicle_raptor_speed_down;
	else if (player.BUTTON_JUMP)
		df +=  v_up * autocvar_g_vehicle_raptor_speed_up;

	raptor.velocity  += df * frametime;
	player.velocity = player.movement  = raptor.velocity;
	setorigin(player, raptor.origin + '0 0 32');

	player.vehicle_weapon2mode = raptor.vehicle_weapon2mode;

	vector vf, ad;
	// Target lock & predict
	if(autocvar_g_vehicle_raptor_cannon_locktarget == 2)
	{
		if(raptor.gun1.lock_time < time || IS_DEAD(raptor.gun1.enemy) || STAT(FROZEN, raptor.gun1.enemy))
			raptor.gun1.enemy = world;

		if(trace_ent)
		if(trace_ent.movetype)
		if(trace_ent.takedamage)
		if(!IS_DEAD(trace_ent) && !STAT(FROZEN, trace_ent))
		{
			if(teamplay)
			{
				if(trace_ent.team != player.team)
				{
					raptor.gun1.enemy = trace_ent;
					raptor.gun1.lock_time = time + 5;
				}
			}
			else
			{
				raptor.gun1.enemy = trace_ent;
				raptor.gun1.lock_time = time + 0.5;
			}
		}

		if(raptor.gun1.enemy)
		{
			float distance, impact_time;

			vf = real_origin(raptor.gun1.enemy);
			UpdateAuxiliaryXhair(player, vf, '1 0 0', 1);
			vector _vel = raptor.gun1.enemy.velocity;
			if(raptor.gun1.enemy.movetype == MOVETYPE_WALK)
				_vel_z *= 0.1;

			if(autocvar_g_vehicle_raptor_cannon_predicttarget)
			{
				ad = vf;
				distance = vlen(ad - player.origin);
				impact_time = distance / autocvar_g_vehicle_raptor_cannon_speed;
				ad = vf + _vel * impact_time;
				trace_endpos = ad;
			}
			else
				trace_endpos = vf;
		}
	}
	else if(autocvar_g_vehicle_raptor_cannon_locktarget == 1)
	{

		vehicles_locktarget((1 / autocvar_g_vehicle_raptor_cannon_locking_time) * frametime,
							 (1 / autocvar_g_vehicle_raptor_cannon_locking_releasetime) * frametime,
							 autocvar_g_vehicle_raptor_cannon_locked_time);

		if(self.lock_target != world)
		if(autocvar_g_vehicle_raptor_cannon_predicttarget)
		if(self.lock_strength == 1)
		{
			float i, distance, impact_time;

			vf = real_origin(raptor.lock_target);
			ad = vf;
			for(i = 0; i < 4; ++i)
			{
				distance = vlen(ad - raptor.origin);
				impact_time = distance / autocvar_g_vehicle_raptor_cannon_speed;
				ad = vf + raptor.lock_target.velocity * impact_time;
			}
			trace_endpos = ad;
		}

		if(self.lock_target)
		{
			if(raptor.lock_strength == 1)
				UpdateAuxiliaryXhair(player, real_origin(raptor.lock_target), '1 0 0', 1);
			else if(self.lock_strength > 0.5)
				UpdateAuxiliaryXhair(player, real_origin(raptor.lock_target), '0 1 0', 1);
			else if(self.lock_strength < 0.5)
				UpdateAuxiliaryXhair(player, real_origin(raptor.lock_target), '0 0 1', 1);
		}
	}


	vehicle_aimturret(raptor, trace_endpos, raptor.gun1, "fire1",
						  autocvar_g_vehicle_raptor_cannon_pitchlimit_down * -1,  autocvar_g_vehicle_raptor_cannon_pitchlimit_up,
						  autocvar_g_vehicle_raptor_cannon_turnlimit * -1,  autocvar_g_vehicle_raptor_cannon_turnlimit,  autocvar_g_vehicle_raptor_cannon_turnspeed);

	vehicle_aimturret(raptor, trace_endpos, raptor.gun2, "fire1",
						  autocvar_g_vehicle_raptor_cannon_pitchlimit_down * -1,  autocvar_g_vehicle_raptor_cannon_pitchlimit_up,
						  autocvar_g_vehicle_raptor_cannon_turnlimit * -1,  autocvar_g_vehicle_raptor_cannon_turnlimit,  autocvar_g_vehicle_raptor_cannon_turnspeed);

	/*
	ad = ad * 0.5;
	v_forward = vf * 0.5;
	traceline(ad, ad + v_forward * MAX_SHOT_DISTANCE, MOVE_NORMAL, raptor);
	UpdateAuxiliaryXhair(player, trace_endpos, '0 1 0', 0);
	*/

	Weapon wep1 = WEP_RAPTOR;
	if(!forbidWeaponUse(player))
	if(player.BUTTON_ATCK)
	if (wep1.wr_checkammo1(wep1))
	{
	    .entity weaponentity = weaponentities[0];
		wep1.wr_think(wep1, self, weaponentity, 1);
	}

	if(self.vehicle_flags  & VHF_SHIELDREGEN)
		vehicles_regen(raptor.dmg_time, vehicle_shield, autocvar_g_vehicle_raptor_shield, autocvar_g_vehicle_raptor_shield_regen_pause, autocvar_g_vehicle_raptor_shield_regen, frametime, true);

	if(self.vehicle_flags  & VHF_HEALTHREGEN)
		vehicles_regen(raptor.dmg_time, vehicle_health, autocvar_g_vehicle_raptor_health, autocvar_g_vehicle_raptor_health_regen_pause, autocvar_g_vehicle_raptor_health_regen, frametime, false);

	if(self.vehicle_flags  & VHF_ENERGYREGEN)
		vehicles_regen(raptor.cnt, vehicle_energy, autocvar_g_vehicle_raptor_energy, autocvar_g_vehicle_raptor_energy_regen_pause, autocvar_g_vehicle_raptor_energy_regen, frametime, false);

	Weapon wep2a = WEP_RAPTOR_BOMB;
	if(!forbidWeaponUse(player))
	if(raptor.vehicle_weapon2mode == RSM_BOMB)
	{
		if(time > raptor.lip + autocvar_g_vehicle_raptor_bombs_refire)
		if(player.BUTTON_ATCK2)
		{
		    .entity weaponentity = weaponentities[1];
			wep2a.wr_think(wep2a, self, weaponentity, 2);
			raptor.delay = time + autocvar_g_vehicle_raptor_bombs_refire;
			raptor.lip   = time;
		}
	}
	else
	{
		Weapon wep2b = WEP_RAPTOR_FLARE;
		if(time > raptor.lip + autocvar_g_vehicle_raptor_flare_refire)
		if(player.BUTTON_ATCK2)
		{
		    .entity weaponentity = weaponentities[1];
			wep2b.wr_think(wep2b, self, weaponentity, 2);
			raptor.delay = time + autocvar_g_vehicle_raptor_flare_refire;
			raptor.lip   = time;
		}
	}

	raptor.bomb1.alpha = raptor.bomb2.alpha = (time - raptor.lip) / (raptor.delay - raptor.lip);
	player.vehicle_reload2 = bound(0, raptor.bomb1.alpha * 100, 100);
	player.vehicle_ammo2 = (player.vehicle_reload2 == 100) ? 100 : 0;

	if(self.bomb1.cnt < time)
	{
		entity _missile = findchainentity(enemy, raptor);
		float _incomming = 0;
		while(_missile)
		{
			if(_missile.flags & FL_PROJECTILE)
			if(MISSILE_IS_TRACKING(_missile))
			if(vlen(self.origin - _missile.origin) < 2 * autocvar_g_vehicle_raptor_flare_range)
				++_incomming;

			_missile = _missile.chain;
		}

		if(_incomming)
			sound(self, CH_PAIN_SINGLE, SND_VEH_MISSILE_ALARM, VOL_BASE, ATTEN_NONE);

		self.bomb1.cnt = time + 1;
	}


	VEHICLE_UPDATE_PLAYER(player, health, raptor);
	VEHICLE_UPDATE_PLAYER(player, energy, raptor);
	if(self.vehicle_flags & VHF_HASSHIELD)
		VEHICLE_UPDATE_PLAYER(player, shield, raptor);

	player.BUTTON_ATCK = player.BUTTON_ATCK2 = player.BUTTON_CROUCH = 0;

	setself(player);
	return 1;
}

float raptor_takeoff()
{SELFPARAM();
	entity player, raptor;

	player = self;
	raptor = self.vehicle;
	setself(raptor);

	self.nextthink = time;
	CSQCMODEL_AUTOUPDATE(self);
	self.nextthink = 0; // will this work?

	if(self.sound_nexttime < time)
	{
		self.sound_nexttime = time + 7.955812; //soundlength("vehicles/raptor_fly.wav");
		sound (self, CH_TRIGGER_SINGLE, SND_VEH_RAPTOR_SPEED, VOL_VEHICLEENGINE, ATTEN_NORM);
	}

	// Takeoff sequense
	if(raptor.frame < 25)
	{
		raptor.frame += 25 / (autocvar_g_vehicle_raptor_takeofftime / sys_frametime);
		raptor.velocity_z = min(raptor.velocity_z * 1.5, 256);
		self.bomb1.gun1.avelocity_y = 90 + ((raptor.frame / 25) * 25000);
		self.bomb1.gun2.avelocity_y = -self.bomb1.gun1.avelocity_y;
		player.BUTTON_ATCK = player.BUTTON_ATCK2 = player.BUTTON_CROUCH = 0;

		setorigin(player, raptor.origin + '0 0 32');
	}
	else
		player.PlayerPhysplug = raptor_frame;

	if(self.vehicle_flags  & VHF_SHIELDREGEN)
		vehicles_regen(raptor.dmg_time, vehicle_shield, autocvar_g_vehicle_raptor_shield, autocvar_g_vehicle_raptor_shield_regen_pause, autocvar_g_vehicle_raptor_shield_regen, frametime, true);

	if(self.vehicle_flags  & VHF_HEALTHREGEN)
		vehicles_regen(raptor.dmg_time, vehicle_health, autocvar_g_vehicle_raptor_health, autocvar_g_vehicle_raptor_health_regen_pause, autocvar_g_vehicle_raptor_health_regen, frametime, false);

	if(self.vehicle_flags  & VHF_ENERGYREGEN)
		vehicles_regen(raptor.cnt, vehicle_energy, autocvar_g_vehicle_raptor_energy, autocvar_g_vehicle_raptor_energy_regen_pause, autocvar_g_vehicle_raptor_energy_regen, frametime, false);


	raptor.bomb1.alpha = raptor.bomb2.alpha = (time - raptor.lip) / (raptor.delay - raptor.lip);
	player.vehicle_reload2 = bound(0, raptor.bomb1.alpha * 100, 100);
	player.vehicle_ammo2 = (player.vehicle_reload2 == 100) ? 100 : 0;

	VEHICLE_UPDATE_PLAYER(player, health, raptor);
	VEHICLE_UPDATE_PLAYER(player, energy, raptor);
	if(self.vehicle_flags & VHF_HASSHIELD)
		VEHICLE_UPDATE_PLAYER(player, shield, raptor);

	player.BUTTON_ATCK = player.BUTTON_ATCK2 = player.BUTTON_CROUCH = 0;
	setself(player);
	return 1;
}

void raptor_blowup()
{SELFPARAM();
	self.deadflag	= DEAD_DEAD;
	self.vehicle_exit(VHEF_NORMAL);
	RadiusDamage (self, self.enemy, 250, 15, 250, world, world, 250, DEATH_VH_RAPT_DEATH.m_id, world);

	self.alpha		  = -1;
	self.movetype	   = MOVETYPE_NONE;
	self.effects		= EF_NODRAW;
	self.colormod	   = '0 0 0';
	self.avelocity	  = '0 0 0';
	self.velocity	   = '0 0 0';

	setorigin(self, self.pos1);
	self.touch = func_null;
	self.nextthink = 0;
}

void raptor_diethink()
{SELFPARAM();
	if(time >= self.wait)
		self.think = raptor_blowup;

	if(random() < 0.05)
	{
		sound (self, CH_SHOTS, SND_ROCKET_IMPACT, VOL_BASE, ATTEN_NORM);
		Send_Effect(EFFECT_EXPLOSION_SMALL, randomvec() * 80 + (self.origin + '0 0 100'), '0 0 0', 1);
	}
	self.nextthink = time;

	CSQCMODEL_AUTOUPDATE(self);
}

// If we dont do this ever now and then, the raptors rotors
// stop working, presumably due to angle overflow. cute.
void raptor_rotor_anglefix()
{SELFPARAM();
	self.gun1.angles_y = anglemods(self.gun1.angles_y);
	self.gun2.angles_y = anglemods(self.gun2.angles_y);
	self.nextthink = time + 15;
}

float raptor_impulse(float _imp)
{SELFPARAM();
	switch(_imp)
	{
		case IMP_weapon_group_1.impulse:
			self.vehicle.vehicle_weapon2mode = RSM_BOMB;
			CSQCVehicleSetup(self, 0);
			return true;
		case IMP_weapon_group_2.impulse:
			self.vehicle.vehicle_weapon2mode = RSM_FLARE;
			CSQCVehicleSetup(self, 0);
			return true;

		case IMP_weapon_next_byid.impulse:
		case IMP_weapon_next_bypriority.impulse:
		case IMP_weapon_next_bygroup.impulse:
			self.vehicle.vehicle_weapon2mode += 1;
			if(self.vehicle.vehicle_weapon2mode > RSM_LAST)
				self.vehicle.vehicle_weapon2mode = RSM_FIRST;

			CSQCVehicleSetup(self, 0);
			return true;
		case IMP_weapon_last.impulse:
		case IMP_weapon_prev_byid.impulse:
		case IMP_weapon_prev_bypriority.impulse:
		case IMP_weapon_prev_bygroup.impulse:
			self.vehicle.vehicle_weapon2mode -= 1;
			if(self.vehicle.vehicle_weapon2mode < RSM_FIRST)
				self.vehicle.vehicle_weapon2mode = RSM_LAST;

			CSQCVehicleSetup(self, 0);
			return true;

		/*
		case IMP_weapon_drop.impulse: // toss gun, could be used to exit?
			break;
		case IMP_weapon_reload.impulse: // Manual minigun reload?
			break;
		*/
	}
	return false;
}

spawnfunc(vehicle_raptor)
{
	if(!autocvar_g_vehicle_raptor) { remove(self); return; }
	if(!vehicle_initialize(VEH_RAPTOR, false)) { remove(self); return; }
}

		METHOD(Raptor, vr_impact, void(Raptor thisveh))
		{
			if(autocvar_g_vehicle_raptor_bouncepain)
				vehicles_impact(autocvar_g_vehicle_raptor_bouncepain_x, autocvar_g_vehicle_raptor_bouncepain_y, autocvar_g_vehicle_raptor_bouncepain_z);
		}
		METHOD(Raptor, vr_enter, void(Raptor thisveh))
		{
			self.vehicle_weapon2mode = RSM_BOMB;
			self.owner.PlayerPhysplug = raptor_takeoff;
			self.movetype	   = MOVETYPE_BOUNCEMISSILE;
			self.solid		  = SOLID_SLIDEBOX;
			self.owner.vehicle_health = (self.vehicle_health / autocvar_g_vehicle_raptor_health) * 100;
			self.owner.vehicle_shield = (self.vehicle_shield / autocvar_g_vehicle_raptor_shield) * 100;
			self.velocity_z = 1; // Nudge upwards to takeoff sequense can work.
			self.tur_head.exteriormodeltoclient = self.owner;

			self.delay = time + autocvar_g_vehicle_raptor_bombs_refire;
			self.lip   = time;

			if(self.owner.flagcarried)
			   setorigin(self.owner.flagcarried, '-20 0 96');

			CSQCVehicleSetup(self.owner, 0);
		}
		METHOD(Raptor, vr_death, void(Raptor thisveh))
		{
			self.health				= 0;
			self.event_damage		= func_null;
			self.solid				= SOLID_CORPSE;
			self.takedamage			= DAMAGE_NO;
			self.deadflag			= DEAD_DYING;
			self.movetype			= MOVETYPE_BOUNCE;
			self.think				= raptor_diethink;
			self.nextthink			= time;
			self.wait				= time + 5 + (random() * 5);

			Send_Effect(EFFECT_EXPLOSION_MEDIUM, findbetterlocation (self.origin, 16), '0 0 0', 1);

			self.velocity_z += 600;

			self.avelocity = '0 0.5 1' * (random() * 400);
			self.avelocity -= '0 0.5 1' * (random() * 400);

			self.colormod = '-0.5 -0.5 -0.5';
			self.touch = raptor_blowup;
		}
		METHOD(Raptor, vr_spawn, void(Raptor thisveh))
		{
			if(!self.gun1)
			{
				entity spinner;
				vector ofs;

				//FIXME: Camera is in a bad place in HUD model.
				//setorigin(self.vehicle_viewport, '25 0 5');

				self.vehicles_impulse   = raptor_impulse;

				self.frame = 0;

				self.bomb1 = new(raptor_bomb);
				self.bomb2 = new(raptor_bomb);
				self.gun1  = new(raptor_gun);
				self.gun2  = new(raptor_gun);

				setmodel(self.bomb1, MDL_VEH_RAPTOR_CB_FOLDED);
				setmodel(self.bomb2, MDL_VEH_RAPTOR_CB_FOLDED);
				setmodel(self.gun1, MDL_VEH_RAPTOR_GUN);
				setmodel(self.gun2, MDL_VEH_RAPTOR_GUN);
				setmodel(self.tur_head, MDL_VEH_RAPTOR_TAIL);

				setattachment(self.bomb1, self, "bombmount_left");
				setattachment(self.bomb2, self, "bombmount_right");
				setattachment(self.tur_head, self,"root");

				// FIXMODEL Guns mounts to angled bones
				self.bomb1.angles = self.angles;
				self.angles = '0 0 0';
				// This messes up gun-aim, so work arround it.
				//setattachment(self.gun1, self, "gunmount_left");
				ofs = gettaginfo(self, gettagindex(self, "gunmount_left"));
				ofs -= self.origin;
				setattachment(self.gun1, self, "");
				setorigin(self.gun1, ofs);

				//setattachment(self.gun2, self, "gunmount_right");
				ofs = gettaginfo(self, gettagindex(self, "gunmount_right"));
				ofs -= self.origin;
				setattachment(self.gun2, self, "");
				setorigin(self.gun2, ofs);

				self.angles = self.bomb1.angles;
				self.bomb1.angles = '0 0 0';

				spinner = new(raptor_spinner);
				spinner.owner = self;
				setmodel(spinner, MDL_VEH_RAPTOR_PROP);
				setattachment(spinner, self, "engine_left");
				spinner.movetype = MOVETYPE_NOCLIP;
				spinner.avelocity = '0 90 0';
				self.bomb1.gun1 = spinner;

				spinner = new(raptor_spinner);
				spinner.owner = self;
				setmodel(spinner, MDL_VEH_RAPTOR_PROP);
				setattachment(spinner, self, "engine_right");
				spinner.movetype = MOVETYPE_NOCLIP;
				spinner.avelocity = '0 -90 0';
				self.bomb1.gun2 = spinner;

				// Sigh.
				self.bomb1.think = raptor_rotor_anglefix;
				self.bomb1.nextthink = time;

				self.mass			   = 1 ;
			}

			self.frame		  = 0;
			self.vehicle_health = autocvar_g_vehicle_raptor_health;
			self.vehicle_shield = autocvar_g_vehicle_raptor_shield;
			self.movetype	   = MOVETYPE_TOSS;
			self.solid		  = SOLID_SLIDEBOX;
			self.vehicle_energy = 1;

			self.PlayerPhysplug = raptor_frame;

			self.bomb1.gun1.avelocity_y = 90;
			self.bomb1.gun2.avelocity_y = -90;

			self.delay = time;

			self.bouncefactor = autocvar_g_vehicle_raptor_bouncefactor;
			self.bouncestop = autocvar_g_vehicle_raptor_bouncestop;
			self.damageforcescale = 0.25;
			self.vehicle_health = autocvar_g_vehicle_raptor_health;
			self.vehicle_shield = autocvar_g_vehicle_raptor_shield;
		}
		METHOD(Raptor, vr_setup, void(Raptor thisveh))
		{
			if(autocvar_g_vehicle_raptor_shield)
				self.vehicle_flags |= VHF_HASSHIELD;

			if(autocvar_g_vehicle_raptor_shield_regen)
				self.vehicle_flags |= VHF_SHIELDREGEN;

			if(autocvar_g_vehicle_raptor_health_regen)
				self.vehicle_flags |= VHF_HEALTHREGEN;

			if(autocvar_g_vehicle_raptor_energy_regen)
				self.vehicle_flags |= VHF_ENERGYREGEN;

			self.vehicle_exit = raptor_exit;
			self.respawntime = autocvar_g_vehicle_raptor_respawntime;
			self.vehicle_health = autocvar_g_vehicle_raptor_health;
			self.vehicle_shield = autocvar_g_vehicle_raptor_shield;
			self.max_health = self.vehicle_health;
		}

#endif
#ifdef CSQC

		METHOD(Raptor, vr_hud, void(Raptor thisveh))
		{
			Vehicles_drawHUD(VEH_RAPTOR.m_icon, "vehicle_raptor_weapon1", "vehicle_raptor_weapon2",
							 "vehicle_icon_ammo1", autocvar_hud_progressbar_vehicles_ammo1_color,
							 "vehicle_icon_ammo2", autocvar_hud_progressbar_vehicles_ammo2_color);
		}
		METHOD(Raptor, vr_crosshair, void(Raptor thisveh))
		{
			string crosshair;

			switch(weapon2mode)
			{
				case RSM_FLARE: crosshair = vCROSS_RAIN;  break;
				case RSM_BOMB:  crosshair = vCROSS_BURST; break;
				default:        crosshair = vCROSS_BURST;
			}

			vector tmpSize = '0 0 0';
			if(weapon2mode != RSM_FLARE)
			{
				vector where;

				if(!dropmark)
				{
					dropmark = spawn();
					dropmark.owner = self;
					dropmark.gravity = 1;
				}

				float reload2 = STAT(VEHICLESTAT_RELOAD2) * 0.01;
				if(reload2 == 1)
				{
					setorigin(dropmark, pmove_org);
					dropmark.velocity = pmove_vel;
					tracetoss(dropmark, self);

					where = project_3d_to_2d(trace_endpos);

					setorigin(dropmark, trace_endpos);
					tmpSize = draw_getimagesize(vCROSS_DROP) * autocvar_cl_vehicles_crosshair_size;

					if (!(where.z < 0 || where.x < 0 || where.y < 0 || where.x > vid_conwidth || where.y > vid_conheight))
					{
						where.x -= tmpSize.x * 0.5;
						where.y -= tmpSize.y * 0.5;
						where.z = 0;
						drawpic(where, vCROSS_DROP, tmpSize, '0 1 0', autocvar_crosshair_alpha * 0.9, DRAWFLAG_ADDITIVE);
						drawpic(where, vCROSS_DROP, tmpSize, '0 1 0', autocvar_crosshair_alpha * 0.6, DRAWFLAG_NORMAL); // Ensure visibility against bright bg
					}
					dropmark.cnt = time + 5;
				}
				else
				{
					if(dropmark.cnt > time)
					{
						where = project_3d_to_2d(dropmark.origin);
						tmpSize = draw_getimagesize(vCROSS_DROP) * autocvar_cl_vehicles_crosshair_size * 1.25;

						if (!(where.z < 0 || where.x < 0 || where.y < 0 || where.x > vid_conwidth || where.y > vid_conheight))
						{
							where.x -= tmpSize.x * 0.5;
							where.y -= tmpSize.y * 0.5;
							where.z = 0;
							drawpic(where, vCROSS_DROP, tmpSize, '1 0 0', autocvar_crosshair_alpha * 0.9, DRAWFLAG_ADDITIVE);
							drawpic(where, vCROSS_DROP, tmpSize, '1 0 0', autocvar_crosshair_alpha * 0.6, DRAWFLAG_NORMAL); // Ensure visibility against bright bg
						}
					}
				}
			}

			Vehicles_drawCrosshair(crosshair);
		}
		METHOD(Raptor, vr_setup, void(Raptor thisveh))
		{
			AuxiliaryXhair[1].axh_image = vCROSS_LOCK;
		}

#endif
#endif
