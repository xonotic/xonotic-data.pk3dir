#ifndef CONSTANTS_H
#define CONSTANTS_H

// COMMIT-TODO: Update if necessary before committing
// Revision 1: additional statistics sent (flag caps, returns, deaths)
// Revision 2: Mapvote preview pictures
// Revision 3: optimized map vote protocol
// Revision 4: CSQC config var system
// Revision 5: mapvote time fix
// Revision 6: more robust against packet loss/delays, also show not yet connected clients
// Revision 7: packet loss column
// Revision 8: race
// Revision 9: race delta
// Revision 10: scoreboard force
// Revision 11: scoreboard unforce; spectator support beginning
// Revision 12: smaller scores updates (SERVER: requires new engine)
// Revision 13: pointparticles
// Revision 14: laser
// Revision 15: zoom
// Revision 16: multi-weapons
// Revision 17: multi-weaponimpulses
// Revision 18: warmup
// Revision 19: fog
// Revision 20: naggers
// Revision 21: entcs for players optimized (position data down from 12 to 7 bytes); waypointsprites in csqc for team radar
// Revision 22: hook shot origin
#define CSQC_REVISION 22

const int AS_STRING = 1;
const int AS_INT = 2;
const int AS_FLOAT_TRUNCATED = 2;
const int AS_FLOAT = 8;

const int TE_CSQC_MUTATOR = 99;
#define MUTATOR_HASH(s) crc16(true, s)
#define WriteMutator(to, s) do { \
    WriteByte(to, TE_CSQC_MUTATOR); \
    WriteLong(to, MUTATOR_HASH(#s)); \
} while (0)
#define ReadMutator() ReadLong()
#define ReadMutatorEquals(read, s) (read == MUTATOR_HASH(#s))
const int TE_CSQC_PICTURE = 100;
const int TE_CSQC_RACE = 101;
const int TE_CSQC_VORTEXBEAMPARTICLE = 103;
const int TE_CSQC_ARC = 104;
const int TE_CSQC_TEAMNAGGER = 105;
const int TE_CSQC_PINGPLREPORT = 106;
const int TE_CSQC_TARGET_MUSIC = 107;
const int TE_CSQC_WEAPONCOMPLAIN = 108;
const int TE_CSQC_VORTEX_SCOPE = 109;
const int TE_CSQC_MINELAYER_MAXMINES = 110;
const int TE_CSQC_HAGAR_MAXROCKETS = 111;
const int TE_CSQC_VEHICLESETUP = 112;
const int TE_CSQC_SVNOTICE = 113;
const int TE_CSQC_SHOCKWAVEPARTICLE = 114;

const int RACE_NET_CHECKPOINT_HIT_QUALIFYING = 0; // byte checkpoint, short time, short recordtime, string recordholder
const int RACE_NET_CHECKPOINT_CLEAR = 1;
const int RACE_NET_CHECKPOINT_NEXT_QUALIFYING = 2; // byte nextcheckpoint, short recordtime, string recordholder
const int RACE_NET_CHECKPOINT_HIT_RACE = 3; // byte checkpoint, short delta, byte lapsdelta, string opponent
const int RACE_NET_CHECKPOINT_HIT_RACE_BY_OPPONENT = 4; // byte checkpoint, short delta, byte lapsdelta, string opponent
const int RACE_NET_CHECKPOINT_NEXT_SPEC_QUALIFYING = 5; // byte nextcheckpoint, float laptime, short recordtime, string recordholder
const int RACE_NET_PENALTY_RACE = 6; // byte penaltytime, string reason
const int RACE_NET_PENALTY_QUALIFYING = 7; // byte penaltytime, string reason
const int RACE_NET_SERVER_RECORD = 8; // server record, sent to client
const int RACE_NET_SPEED_AWARD = 9; // speed award, sent to client
const int RACE_NET_SPEED_AWARD_BEST = 10; // all time best speed award, sent to client
const int RACE_NET_SERVER_RANKINGS = 11;
const int RACE_NET_SERVER_STATUS = 12;
const int RANKINGS_CNT = 15;

const int ENT_CLIENT = 0;
const int ENT_CLIENT_DEAD = 1;
const int ENT_CLIENT_ENTCS = 2;
const int ENT_CLIENT_SCORES_INFO = 3;
const int ENT_CLIENT_SCORES = 4;
const int ENT_CLIENT_TEAMSCORES = 5;
const int ENT_CLIENT_POINTPARTICLES = 6;
const int ENT_CLIENT_RAINSNOW = 7;
const int ENT_CLIENT_LASER = 8;
const int ENT_CLIENT_NAGGER = 9; // flags [votecalledvote]
const int ENT_CLIENT_RADARLINK = 11; // flags [startorigin] [endorigin] [startcolor+16*endcolor]
const int ENT_CLIENT_PROJECTILE = 12;
const int ENT_CLIENT_GIBSPLASH = 13;
const int ENT_CLIENT_DAMAGEINFO = 14;
const int ENT_CLIENT_INIT = 16;
const int ENT_CLIENT_MAPVOTE = 17;
const int ENT_CLIENT_CLIENTDATA = 18;
const int ENT_CLIENT_RANDOMSEED = 19;
const int ENT_CLIENT_WALL = 20;
const int ENT_CLIENT_SPIDERBOT = 21;
const int ENT_CLIENT_MODELEFFECT = 22;
const int ENT_CLIENT_TUBANOTE = 23;
const int ENT_CLIENT_WARPZONE = 24;
const int ENT_CLIENT_WARPZONE_CAMERA = 25;
const int ENT_CLIENT_TRIGGER_MUSIC = 26;
const int ENT_CLIENT_HOOK = 27;
const int ENT_CLIENT_INVENTORY = 28;
const int ENT_CLIENT_ARC_BEAM = 29; // WEAPONTODO: fix numbers
const int ENT_CLIENT_ACCURACY = 30;
const int ENT_CLIENT_SHOWNAMES = 31;
const int ENT_CLIENT_WARPZONE_TELEPORTED = 32;
const int ENT_CLIENT_MODEL = 33;
const int ENT_CLIENT_ITEM = 34;
const int ENT_CLIENT_BUMBLE_RAYGUN = 35;
const int ENT_CLIENT_SPAWNPOINT = 36;
const int ENT_CLIENT_SPAWNEVENT = 37;
const int ENT_CLIENT_NOTIFICATION = 38;
const int ENT_CLIENT_ELIMINATEDPLAYERS = 39;
const int ENT_CLIENT_TURRET = 40;
const int ENT_CLIENT_AUXILIARYXHAIR = 50;
const int ENT_CLIENT_VEHICLE = 60;
const int ENT_CLIENT_LADDER = 61;
const int ENT_CLIENT_TRIGGER_PUSH = 62;
const int ENT_CLIENT_TARGET_PUSH = 63;
const int ENT_CLIENT_CONVEYOR = 64;
const int ENT_CLIENT_DOOR = 65;
const int ENT_CLIENT_TRAIN = 66;
const int ENT_CLIENT_PLAT = 67;
const int ENT_CLIENT_TRIGGER_IMPULSE = 68;
const int ENT_CLIENT_SWAMP = 69;
const int ENT_CLIENT_CORNER = 70;
const int ENT_CLIENT_KEYLOCK = 71;
const int ENT_CLIENT_GENERATOR = 72;
const int ENT_CLIENT_CONTROLPOINT_ICON = 73;
const int ENT_CLIENT_EFFECT = 74;
const int ENT_CLIENT_MINIGAME = 75;
const int ENT_CLIENT_VIEWLOC = 78;
const int ENT_CLIENT_VIEWLOC_TRIGGER = 79;
const int ENT_CLIENT_HEALING_ORB = 80;

const int ENT_CLIENT_MUTATOR = TE_CSQC_MUTATOR; // 99

const int SPRITERULE_DEFAULT = 0;
const int SPRITERULE_TEAMPLAY = 1;
const int SPRITERULE_SPECTATOR = 2;

const int RADARICON_NONE = 0;
const int RADARICON_FLAG = 1;
const int RADARICON_FLAGCARRIER = 1;
const int RADARICON_HERE = 1; // TODO make these 3 and 4, and make images for them
const int RADARICON_DANGER = 1;
const int RADARICON_WAYPOINT = 1;
const int RADARICON_HELPME = 1;
const int RADARICON_CONTROLPOINT = 1;
const int RADARICON_GENERATOR = 1;
const int RADARICON_OBJECTIVE = 1;
const int RADARICON_DOMPOINT = 1;
const int RADARICON_POWERUP = 1;
const int RADARICON_TAGGED = 1;

///////////////////////////
// keys pressed
const int KEY_FORWARD = 1;
const int KEY_BACKWARD = 2;
const int KEY_LEFT = 4;
const int KEY_RIGHT = 8;
const int KEY_JUMP = 16;
const int KEY_CROUCH = 32;
const int KEY_ATCK = 64;
const int KEY_ATCK2 = 128;

///////////////////////////
// cvar constants

const int CVAR_SAVE = 1;
const int CVAR_NOTIFY = 2;
const int CVAR_READONLY = 4;

///////////////////////////
// csqc communication stuff

const int CTF_STATE_ATTACK = 1;
const int CTF_STATE_DEFEND = 2;
const int CTF_STATE_COMMANDER = 3;

const int HUD_NORMAL = 0;
const int HUD_BUMBLEBEE_GUN = 25;

// moved that here so the client knows the max.
// # of maps, I'll use arrays for them :P
const int MAPVOTE_COUNT = 30;

/**
 * Lower scores are better (e.g. suicides)
 */
const int SFL_LOWER_IS_BETTER = 1;

/**
 * Don't show zero values as scores
 */
const int SFL_HIDE_ZERO = 2;

/**
 * Allow a column to be hidden (do not automatically add it even if it is a sorting key)
 */
const int SFL_ALLOW_HIDE = 16;

/**
 * Display as a rank (with st, nd, rd, th suffix)
 */
const int SFL_RANK = 32;

/**
 * Display as mm:ss.s, value is stored as 10ths of a second (AND 0 is the worst possible value!)
 */
const int SFL_TIME = 64;

// not an extra constant yet
#define SFL_ZERO_IS_WORST SFL_TIME

/**
 * Scoring priority (NOTE: PRIMARY is used for fraglimit)
 */
const int SFL_SORT_PRIO_SECONDARY = 4;
const int SFL_SORT_PRIO_PRIMARY = 8;
const int SFL_SORT_PRIO_MASK = 12;

/**
 * Score indices
 */
#define MAX_SCORE 10
#define MAX_TEAMSCORE 2

const int ST_SCORE = 0;
const int SP_KILLS = 0;
const int SP_DEATHS = 1;
const int SP_SUICIDES = 2;
const int SP_SCORE = 3;
// game mode specific indices are not in common/, but in server/scores_rules.qc!

const int CH_INFO = 0;
const int CH_TRIGGER = -3;
const int CH_WEAPON_A = -1;
const int CH_WEAPON_SINGLE = 1;
const int CH_VOICE = -2;
const int CH_BGM_SINGLE = 8;
const int CH_AMBIENT = -9;
const int CH_TRIGGER_SINGLE = 3;
const int CH_SHOTS = -4;
const int CH_SHOTS_SINGLE = 4;
const int CH_WEAPON_B = -1;
const int CH_PAIN = -6;
const int CH_PAIN_SINGLE = 6;
const int CH_PLAYER = -7;
const int CH_PLAYER_SINGLE = 7;
const int CH_TUBA_SINGLE = 5;

const float ATTEN_NONE = 0;
const float ATTEN_MIN = 0.015625;
const float ATTEN_NORM = 0.5;
const float ATTEN_LARGE = 1;
const float ATTEN_IDLE = 2;
const float ATTEN_STATIC = 3;
const float ATTEN_MAX = 3.984375;

const float VOL_BASE = 0.7;
const float VOL_BASEVOICE = 1.0;

// WEAPONTODO: move this into separate/new projectile handling code // this sets sounds and other properties of the projectiles in csqc
const int PROJECTILE_ELECTRO = 1;
const int PROJECTILE_ROCKET = 2;
const int PROJECTILE_TAG = 3;
const int PROJECTILE_CRYLINK = 5;
const int PROJECTILE_ELECTRO_BEAM = 6;
const int PROJECTILE_GRENADE = 7;
const int PROJECTILE_GRENADE_BOUNCING = 8;
const int PROJECTILE_MINE = 9;
const int PROJECTILE_BLASTER = 10;
const int PROJECTILE_HLAC = 11;
const int PROJECTILE_SEEKER = 12;
const int PROJECTILE_FLAC = 13;
const int PROJECTILE_PORTO_RED = 14;
const int PROJECTILE_PORTO_BLUE = 15;
const int PROJECTILE_HOOKBOMB = 16;
const int PROJECTILE_HAGAR = 17;
const int PROJECTILE_HAGAR_BOUNCING = 18;
const int PROJECTILE_CRYLINK_BOUNCING = 20;
const int PROJECTILE_FIREBALL = 21;
const int PROJECTILE_FIREMINE = 22;

const int PROJECTILE_RAPTORCANNON = 24;
const int PROJECTILE_RAPTORBOMB = 25;
const int PROJECTILE_RAPTORBOMBLET = 26;
const int PROJECTILE_SPIDERROCKET = 27;
const int PROJECTILE_WAKIROCKET = 28;
const int PROJECTILE_WAKICANNON = 29;

const int PROJECTILE_BUMBLE_GUN = 30;
const int PROJECTILE_BUMBLE_BEAM = 31;

const int PROJECTILE_MAGE_SPIKE = 32;
const int PROJECTILE_SHAMBLER_LIGHTNING = 33;

// projectile IDs 40-50 reserved

const int PROJECTILE_RPC = 60;

const int SPECIES_HUMAN = 0;
const int SPECIES_ROBOT_SOLID = 1;
const int SPECIES_ALIEN = 2;
const int SPECIES_ANIMAL = 3;
const int SPECIES_ROBOT_RUSTY = 4;
const int SPECIES_ROBOT_SHINY = 5;
const int SPECIES_RESERVED = 15;

const int FRAGS_PLAYER = 0;
const int FRAGS_SPECTATOR = -666;
const int FRAGS_LMS_LOSER = -616;
const int FRAGS_PLAYER_NONSOLID = -616;
// we can use this frags value for both

// water levels
const int WATERLEVEL_NONE = 0;
const int WATERLEVEL_WETFEET = 1;
const int WATERLEVEL_SWIMMING = 2;
const int WATERLEVEL_SUBMERGED = 3;
const int SERVERFLAG_ALLOW_FULLBRIGHT = 1;
const int SERVERFLAG_TEAMPLAY = 2;
const int SERVERFLAG_PLAYERSTATS = 4;

// FIXME/EXPLAINME: why? Mario: because
vector autocvar_sv_player_maxs = '16 16 45';
vector autocvar_sv_player_mins = '-16 -16 -24';
vector autocvar_sv_player_viewoffset = '0 0 20';
vector autocvar_sv_player_crouch_maxs = '16 16 25';
vector autocvar_sv_player_crouch_mins = '-16 -16 -24';
vector autocvar_sv_player_crouch_viewoffset = '0 0 20';
vector autocvar_sv_player_headsize = '24 24 12';


// not so constant
#ifdef SVQC
#define PL_VIEW_OFS autocvar_sv_player_viewoffset
#define PL_MIN autocvar_sv_player_mins
#define PL_MAX autocvar_sv_player_maxs
#define PL_CROUCH_VIEW_OFS autocvar_sv_player_crouch_viewoffset
#define PL_CROUCH_MIN autocvar_sv_player_crouch_mins
#define PL_CROUCH_MAX autocvar_sv_player_crouch_maxs
#define PL_HEAD autocvar_sv_player_headsize
#elif defined(CSQC)
#define PL_VIEW_OFS vec3(getstatf(STAT_PL_VIEW_OFS1), getstatf(STAT_PL_VIEW_OFS2), getstatf(STAT_PL_VIEW_OFS3))
#define PL_MIN vec3(getstatf(STAT_PL_MIN1), getstatf(STAT_PL_MIN2), getstatf(STAT_PL_MIN3))
#define PL_MAX vec3(getstatf(STAT_PL_MAX1), getstatf(STAT_PL_MAX2), getstatf(STAT_PL_MAX3))
#define PL_CROUCH_VIEW_OFS vec3(getstatf(STAT_PL_CROUCH_VIEW_OFS1), getstatf(STAT_PL_CROUCH_VIEW_OFS2), getstatf(STAT_PL_CROUCH_VIEW_OFS3))
#define PL_CROUCH_MIN vec3(getstatf(STAT_PL_CROUCH_MIN1), getstatf(STAT_PL_CROUCH_MIN2), getstatf(STAT_PL_CROUCH_MIN3))
#define PL_CROUCH_MAX vec3(getstatf(STAT_PL_CROUCH_MAX1), getstatf(STAT_PL_CROUCH_MAX2), getstatf(STAT_PL_CROUCH_MAX3))
#endif

// a bit more constant
const vector PL_MAX_CONST = '16 16 45';
const vector PL_MIN_CONST = '-16 -16 -24';

// spawnpoint prios
const int SPAWN_PRIO_NEAR_TEAMMATE_FOUND = 200;
const int SPAWN_PRIO_NEAR_TEAMMATE_SAMETEAM = 100;
const int SPAWN_PRIO_RACE_PREVIOUS_SPAWN = 50;
const int SPAWN_PRIO_GOOD_DISTANCE = 10;

// gametype vote flags
const int GTV_FORBIDDEN = 0; // Cannot be voted
const int GTV_AVAILABLE = 1; // Can be voted
const int GTV_CUSTOM    = 2; // Custom entry
#endif
