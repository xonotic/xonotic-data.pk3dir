#pragma once

#include <common/weapons/all.qh>
#include <common/colors.qh>
#ifdef MENUQC
	#include "okmachinegun.qh" // for its color
#endif

CLASS(OverkillHeavyMachineGun, Weapon)
/* spawnfunc */ ATTRIB(OverkillHeavyMachineGun, m_canonical_spawnfunc, string, "weapon_okhmg");
/* ammotype  */ ATTRIB(OverkillHeavyMachineGun, ammo_type, Resource, RES_BULLETS);
/* impulse   */ ATTRIB(OverkillHeavyMachineGun, impulse, int, 3);
/* flags     */ ATTRIB(OverkillHeavyMachineGun, spawnflags, int, WEP_FLAG_MUTATORBLOCKED | WEP_FLAG_HIDDEN | WEP_FLAG_RELOADABLE | WEP_TYPE_HITSCAN | WEP_FLAG_SUPERWEAPON | WEP_FLAG_PENETRATEWALLS);
/* rating    */ ATTRIB(OverkillHeavyMachineGun, bot_pickupbasevalue, float, 10000);
/* color     */ ATTRIB(OverkillHeavyMachineGun, m_color, vector, COLOR_WEP_OKHMG);
/* modelname */ ATTRIB(OverkillHeavyMachineGun, mdl, string, "ok_hmg");
#ifdef GAMEQC
/* model     */ ATTRIB(OverkillHeavyMachineGun, m_model, Model, MDL_HMG_ITEM);
/* flash mdl */ ATTRIB(OverkillHeavyMachineGun, m_muzzlemodel, Model, MDL_MACHINEGUN_MUZZLEFLASH);
/* flash eff */ ATTRIB(OverkillHeavyMachineGun, m_muzzleeffect, entity, EFFECT_MACHINEGUN_MUZZLEFLASH);
#endif
/* crosshair */ ATTRIB(OverkillHeavyMachineGun, w_crosshair, string, "gfx/crosshairuzi");
/* crosshair */ ATTRIB(OverkillHeavyMachineGun, w_crosshair_size, float, 0.6);
/* wepimg    */ ATTRIB(OverkillHeavyMachineGun, model2, string, "weaponhmg");
/* refname   */ ATTRIB(OverkillHeavyMachineGun, netname, string, "okhmg");
/* wepname   */ ATTRIB(OverkillHeavyMachineGun, m_name, string, _("Overkill Heavy Machine Gun"));
/* legacy    */ ATTRIB(OverkillHeavyMachineGun, m_deprecated_netname, string, "hmg");

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, PRI) \
		P(class, prefix, damage, float, PRI) \
		P(class, prefix, force, float, PRI) \
		P(class, prefix, refire, float, PRI) \
		P(class, prefix, solidpenetration, float, PRI) \
		P(class, prefix, spread_add, float, PRI) \
		P(class, prefix, spread_max, float, PRI) \
		P(class, prefix, spread_min, float, PRI) \
		P(class, prefix, refire_type, float, SEC) \
		P(class, prefix, reload_ammo, float, NONE) \
		P(class, prefix, reload_time, float, NONE) \
		P(class, prefix, switchdelay_drop, float, NONE) \
		P(class, prefix, switchdelay_raise, float, NONE) \
		P(class, prefix, weaponreplace, string, NONE) \
		P(class, prefix, weaponstartoverride, float, NONE) \
		P(class, prefix, weaponstart, float, NONE) \
		P(class, prefix, weaponthrowable, float, NONE) \
	END()
	W_PROPS(X, OverkillHeavyMachineGun, okhmg)
#undef X
#ifdef MENUQC
METHOD(OverkillHeavyMachineGun, describe, string(OverkillHeavyMachineGun this))
{
	TC(OverkillHeavyMachineGun, this);
	return sprintf(_("The %s is a superweapon that rapidly fires harmful bullets with a small degree of spread\n\n"
		"Like with all Overkill weapons, the secondary fire shoots a laser which does not damage or push enemies, but can be used to push yourself around\n\n"
		"It is a superweapon found on some maps, meaning that it breaks down after some time\n\n"
		"The primary fire consumes %s ammo, although you spawn with an infinite amount of it in Overkill. "
		"It has a limited magazine size, so needs reloading after several shots\n\n"
		"The %s can be used in a lot of situations, and it works particularly well at long ranges since the bullets pierce the sky instantaneously\n\n"
		"Since its bullets deal a lot more damage than the %s's bullets, it is often heavily contested when it spawns in"),
	COLORED_NAME(OverkillHeavyMachineGun), COLORED_NAME(Bullets), COLORED_NAME(OverkillHeavyMachineGun), COLORED_NAME(OverkillMachineGun));
}
#endif
ENDCLASS(OverkillHeavyMachineGun)
REGISTER_WEAPON(OVERKILL_HMG, NEW(OverkillHeavyMachineGun));

//SPAWNFUNC_WEAPON(weapon_okhmg, WEP_OVERKILL_HMG)
//SPAWNFUNC_WEAPON(weapon_hmg, WEP_OVERKILL_HMG)
