#ifdef IMPLEMENTATION
float autocvar_g_campcheck_damage;
float autocvar_g_campcheck_distance;
float autocvar_g_campcheck_interval;

REGISTER_MUTATOR(campcheck, cvar("g_campcheck"));

.float campcheck_nextcheck;
.float campcheck_traveled_distance;

MUTATOR_HOOKFUNCTION(campcheck, PlayerDies)
{
	Kill_Notification(NOTIF_ONE, frag_target, MSG_CENTER, CPID_CAMPCHECK);
	return false;
}

MUTATOR_HOOKFUNCTION(campcheck, PlayerDamage_Calculate)
{
	if(IS_PLAYER(frag_target))
	if(IS_PLAYER(frag_attacker))
	if(frag_attacker != frag_target)
	{
		frag_target.campcheck_traveled_distance = autocvar_g_campcheck_distance;
		frag_attacker.campcheck_traveled_distance = autocvar_g_campcheck_distance;
	}

	return false;
}

MUTATOR_HOOKFUNCTION(campcheck, PlayerPreThink)
{SELFPARAM();
	if(!gameover)
	if(!warmup_stage) // don't consider it camping during warmup?
	if(time >= game_starttime)
	if(IS_PLAYER(self))
	if(IS_REAL_CLIENT(self)) // bots may camp, but that's no reason to constantly kill them
	if(!IS_DEAD(self))
	if(!STAT(FROZEN, self))
	if(!PHYS_INPUT_BUTTON_CHAT(self))
	if(autocvar_g_campcheck_interval)
	{
		vector dist;

		// calculate player movement (in 2 dimensions only, so jumping on one spot doesn't count as movement)
		dist = self.prevorigin - self.origin;
		dist.z = 0;
		self.campcheck_traveled_distance += fabs(vlen(dist));

		if((autocvar_g_campaign && !campaign_bots_may_start) || (time < game_starttime) || (round_handler_IsActive() && !round_handler_IsRoundStarted()))
		{
			self.campcheck_nextcheck = time + autocvar_g_campcheck_interval * 2;
			self.campcheck_traveled_distance = 0;
		}

		if(time > self.campcheck_nextcheck)
		{
			if(self.campcheck_traveled_distance < autocvar_g_campcheck_distance)
			{
				Send_Notification(NOTIF_ONE, self, MSG_CENTER, CENTER_CAMPCHECK);
				if(self.vehicle)
					Damage(self.vehicle, world, world, autocvar_g_campcheck_damage * 2, DEATH_CAMP.m_id, self.vehicle.origin, '0 0 0');
				else
					Damage(self, world, world, bound(0, autocvar_g_campcheck_damage, self.health + self.armorvalue * autocvar_g_balance_armor_blockpercent + 5), DEATH_CAMP.m_id, self.origin, '0 0 0');
			}
			self.campcheck_nextcheck = time + autocvar_g_campcheck_interval;
			self.campcheck_traveled_distance = 0;
		}

		return false;
	}

	self.campcheck_nextcheck = time + autocvar_g_campcheck_interval; // one of the above checks failed, so keep the timer up to date
	return false;
}

MUTATOR_HOOKFUNCTION(campcheck, PlayerSpawn)
{SELFPARAM();
	self.campcheck_nextcheck = time + autocvar_g_campcheck_interval * 2;
	self.campcheck_traveled_distance = 0;

	return false;
}

MUTATOR_HOOKFUNCTION(campcheck, BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":CampCheck");
	return false;
}
#endif
