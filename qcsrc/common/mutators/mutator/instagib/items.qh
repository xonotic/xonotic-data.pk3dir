#pragma once

#include <common/items/_mod.qh>
#include <common/items/item/ammo.qh>
#include <common/mutators/mutator/powerups/_mod.qh>
#include <common/colors.qh>

float instagib_respawntime_ammo = 45;
float instagib_respawntimejitter_ammo = 0;
GETTER(float, instagib_respawntime_ammo)
GETTER(float, instagib_respawntimejitter_ammo)

#ifdef GAMEQC
MODEL(VaporizerCells_ITEM, Item_Model("a_cells.md3"));
SOUND(VaporizerCells, Item_Sound("itempickup"));
#endif

#ifdef SVQC
int autocvar_g_instagib_ammo_drop;
void ammo_vaporizercells_init(Pickup this, entity item)
{
    if(!GetResource(item, RES_CELLS))
        SetResourceExplicit(item, RES_CELLS, autocvar_g_instagib_ammo_drop);
}
#endif

CLASS(VaporizerCells, Ammo)
/* spawnfunc   */ ATTRIB(VaporizerCells, m_canonical_spawnfunc, string, "item_vaporizer_cells");
#ifdef GAMEQC
/* spawnflags  */ ATTRIB(VaporizerCells, spawnflags, int, ITEM_FLAG_MUTATORBLOCKED);
/* model       */ ATTRIB(VaporizerCells, m_model, Model, MDL_VaporizerCells_ITEM);
/* sound       */ ATTRIB(VaporizerCells, m_sound, Sound, SND_VaporizerCells);
#endif
/* refname     */ ATTRIB(VaporizerCells, netname, string, "vaporizer_cells");
/* itemname    */ ATTRIB(VaporizerCells, m_name, string, _("Vaporizer ammo"));
/* icon        */ ATTRIB(VaporizerCells, m_icon, string, "ammo_supercells");
#ifdef SVQC
/* botvalue    */ ATTRIB(VaporizerCells, m_botvalue, int, 2000);
/* itemid      */ ATTRIB(VaporizerCells, m_itemid, int, IT_RESOURCE);
/* respawntime */ ATTRIB(VaporizerCells, m_respawntime, float, GET(instagib_respawntime_ammo));
/*             */ ATTRIB(VaporizerCells, m_respawntimejitter, float, GET(instagib_respawntimejitter_ammo));
/* iteminit    */ ATTRIB(VaporizerCells, m_iteminit, void(Pickup this, entity item), ammo_vaporizercells_init);
#endif
#ifdef MENUQC
METHOD(VaporizerCells, describe, string(VaporizerCells this))
{
    // can't include common/weapons/weapon/vaporizer.qh or else circular includes
#define VAPORIZER_COLOR strcat(rgb_to_hexcolor(COLOR_WEP_VAPORIZER), _("Vaporizer"), "^7")
    TC(VaporizerCells, this);
    return sprintf(_("The %s is sometimes present on maps when InstaGib is enabled, providing ammo for the %s"),
    COLORED_NAME(VaporizerCells), VAPORIZER_COLOR);
#undef VORTEX_COLOR
}
#endif
ENDCLASS(VaporizerCells)
REGISTER_ITEM(VaporizerCells, NEW(VaporizerCells));

SPAWNFUNC_ITEM(item_vaporizer_cells, ITEM_VaporizerCells)
SPAWNFUNC_ITEM(item_minst_cells, ITEM_VaporizerCells)

#ifdef GAMEQC
MODEL(ExtraLife_ITEM, Item_Model("g_h100.md3"));
SOUND(ExtraLife, Item_Sound("megahealth"));
#endif

CLASS(ExtraLife, Powerup)
/* spawnfunc */ ATTRIB(ExtraLife, m_canonical_spawnfun, string, "item_extralife");
#ifdef GAMEQC
/* model     */ ATTRIB(ExtraLife, m_model, Model, MDL_ExtraLife_ITEM);
/* sound     */ ATTRIB(ExtraLife, m_sound, Sound, SND_ExtraLife);
#endif
/* refname   */ ATTRIB(ExtraLife, netname, string, "extralife");
/* itemname  */ ATTRIB(ExtraLife, m_name, string, _("Extra life"));
/* icon      */ ATTRIB(ExtraLife, m_icon, string, "item_mega_health");
/* color     */ ATTRIB(ExtraLife, m_color, vector, COLOR_POWERUP_EXTRALIFE);
/* wptext    */ ATTRIB(ExtraLife, m_waypoint, string, _("Extra life"));
/* wpblink   */ ATTRIB(ExtraLife, m_waypointblink, int, 2);
#ifdef SVQC
/* itemid    */ ATTRIB(ExtraLife, m_itemid, int, IT_RESOURCE);
#endif
#ifdef MENUQC
METHOD(ExtraLife, describe, string(ExtraLife this))
{
    TC(ExtraLife, this);
    return sprintf(_("The %s powerup acts as armor in InstaGib. "
        "If a player is shot while having one or more extra lives, they will survive the shot but suffer strong knockback"),
    COLORED_NAME(ExtraLife));
}
#endif
ENDCLASS(ExtraLife)
REGISTER_ITEM(ExtraLife, NEW(ExtraLife));

SPAWNFUNC_ITEM(item_extralife, ITEM_ExtraLife)
