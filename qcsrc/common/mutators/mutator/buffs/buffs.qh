#pragma once

#include <common/teams.qh>
#include <common/util.qh>

#ifdef GAMEQC
#include <common/mutators/mutator/waypoints/all.qh>
#endif

#ifdef GAMEQC
REGISTER_WAYPOINT(Buff, _("Buff"), "", '1 0.5 0', 1);
REGISTER_RADARICON(Buff, 1);
#endif

REGISTRY(Buffs, BITS(5))
REGISTER_REGISTRY(Buffs)
REGISTRY_CHECK(Buffs)

#define REGISTER_BUFF(id) \
    REGISTER(Buffs, BUFF_##id, m_id, NEW(Buff))

#include <common/items/item/pickup.qh>
CLASS(Buff, Pickup)
	/** bit index */
	ATTRIB(Buff, m_itemid, int, 0);
	ATTRIB(Buff, netname, string, "buff");
	ATTRIB(Buff, m_color, vector, '1 1 1');
	ATTRIB(Buff, m_name, string, "Buff");
	ATTRIB(Buff, m_skin, int, 0);
	ATTRIB(Buff, m_sprite, string, "");
	METHOD(Buff, display, void(entity this, void(string name, string icon) returns)) {
		returns(this.m_name, sprintf("/gfx/hud/%s/buff_%s", cvar_string("menu_skin"), this.netname));
	}
#ifdef SVQC
	METHOD(Buff, m_time, float(Buff this))
	{ return cvar(strcat("g_buffs_", this.netname, "_time")); }
#endif
ENDCLASS(Buff)

STATIC_INIT(REGISTER_BUFFS) {
	FOREACH(Buffs, true, {
		it.m_itemid = BIT(it.m_id - 1);
		it.m_sprite = strzone(strcat("buff-", it.netname));
	});
}

#ifdef SVQC
	void buff_Init(entity ent);
	void buff_Init_Compat(entity ent, entity replacement);
	#define BUFF_SPAWNFUNC(e, b, t) spawnfunc(item_buff_##e) { \
		STAT(BUFFS, this) = b.m_itemid; \
		this.team = t; \
		buff_Init(this); \
	}
	#define BUFF_SPAWNFUNCS(e, b)                       \
			BUFF_SPAWNFUNC(e,           b,  0)          \
			BUFF_SPAWNFUNC(e##_team1,   b,  NUM_TEAM_1) \
			BUFF_SPAWNFUNC(e##_team2,   b,  NUM_TEAM_2) \
			BUFF_SPAWNFUNC(e##_team3,   b,  NUM_TEAM_3) \
			BUFF_SPAWNFUNC(e##_team4,   b,  NUM_TEAM_4)
	#define BUFF_SPAWNFUNC_Q3TA_COMPAT(o, r) spawnfunc(item_##o) { buff_Init_Compat(this, r); }
#else
	#define BUFF_SPAWNFUNC(e, b, t)
	#define BUFF_SPAWNFUNCS(e, b)
	#define BUFF_SPAWNFUNC_Q3TA_COMPAT(o, r)
#endif

string Buff_UndeprecateName(string buffname);
entity buff_FirstFromFlags(int _buffs);

REGISTER_BUFF(Null);
BUFF_SPAWNFUNCS(random, BUFF_Null)

REGISTRY_DEFINE_GET(Buffs, BUFF_Null)
#include "all.inc"
