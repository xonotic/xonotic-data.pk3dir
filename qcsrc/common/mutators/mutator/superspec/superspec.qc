#ifdef IMPLEMENTATION
REGISTER_MUTATOR(superspec, cvar("g_superspectate"));

#define _SSMAGIX "SUPERSPEC_OPTIONSFILE_V1"
#define _ISLOCAL ((edict_num(1) == self) ? true : false)

const float ASF_STRENGTH 		= BIT(0);
const float ASF_SHIELD 			= BIT(1);
const float ASF_MEGA_AR 		= BIT(2);
const float ASF_MEGA_HP 		= BIT(3);
const float ASF_FLAG_GRAB 		= BIT(4);
const float ASF_OBSERVER_ONLY 	= BIT(5);
const float ASF_SHOWWHAT 		= BIT(6);
const float ASF_SSIM 			= BIT(7);
const float ASF_FOLLOWKILLER 	= BIT(8);
const float ASF_ALL 			= 0xFFFFFF;
.float autospec_flags;

const float SSF_SILENT = 1;
const float SSF_VERBOSE = 2;
const float SSF_ITEMMSG = 4;
.float superspec_flags;

.string superspec_itemfilter; //"classname1 classname2 ..."

bool superspec_Spectate(entity _player)
{SELFPARAM();
	if(Spectate(_player) == 1)
		self.classname = STR_SPECTATOR;

	return true;
}

void superspec_save_client_conf()
{SELFPARAM();
	string fn = "superspec-local.options";
	float fh;

	if (!_ISLOCAL)
	{
		if(self.crypto_idfp == "")
			return;

		fn = sprintf("superspec-%s.options", uri_escape(self.crypto_idfp));
	}

	fh = fopen(fn, FILE_WRITE);
	if(fh < 0)
	{
		LOG_TRACE("^1ERROR: ^7 superspec can not open ", fn, " for writing.\n");
	}
	else
	{
		fputs(fh, _SSMAGIX);
		fputs(fh, "\n");
		fputs(fh, ftos(self.autospec_flags));
		fputs(fh, "\n");
		fputs(fh, ftos(self.superspec_flags));
		fputs(fh, "\n");
		fputs(fh, self.superspec_itemfilter);
		fputs(fh, "\n");
		fclose(fh);
	}
}

void superspec_msg(string _center_title, string _con_title, entity _to, string _msg, float _spamlevel)
{
	sprint(_to, strcat(_con_title, _msg));

	if(_to.superspec_flags & SSF_SILENT)
		return;

	if(_spamlevel > 1)
		if (!(_to.superspec_flags & SSF_VERBOSE))
			return;

	centerprint(_to, strcat(_center_title, _msg));
}

float superspec_filteritem(entity _for, entity _item)
{
	float i;

	if(_for.superspec_itemfilter == "")
		return true;

	if(_for.superspec_itemfilter == "")
		return true;

	float l = tokenize_console(_for.superspec_itemfilter);
	for(i = 0; i < l; ++i)
	{
		if(argv(i) == _item.classname)
			return true;
	}

	return false;
}

MUTATOR_HOOKFUNCTION(superspec, ItemTouch)
{SELFPARAM();
	entity _item = self;

	FOREACH_CLIENT(true, LAMBDA(
		if(!IS_SPEC(it) && !IS_OBSERVER(it))
			continue;
		setself(it);
		if(self.superspec_flags & SSF_ITEMMSG)
			if(superspec_filteritem(self, _item))
			{
				if(self.superspec_flags & SSF_VERBOSE)
					superspec_msg("", "", self, sprintf("Player %s^7 just picked up ^3%s\n", other.netname, _item.netname), 1);
				else
					superspec_msg("", "", self, sprintf("Player %s^7 just picked up ^3%s\n^8(%s^8)\n", other.netname, _item.netname, _item.classname), 1);
				if((self.autospec_flags & ASF_SSIM) && self.enemy != other)
				{
					superspec_Spectate(other);

					setself(this);
					return MUT_ITEMTOUCH_CONTINUE;
				}
			}

		if((self.autospec_flags & ASF_SHIELD && _item.invincible_finished) ||
			(self.autospec_flags & ASF_STRENGTH && _item.strength_finished) ||
			(self.autospec_flags & ASF_MEGA_AR && _item.itemdef == ITEM_ArmorMega) ||
			(self.autospec_flags & ASF_MEGA_HP && _item.itemdef == ITEM_HealthMega) ||
			(self.autospec_flags & ASF_FLAG_GRAB && _item.classname == "item_flag_team"))
		{

			if((self.enemy != other) || IS_OBSERVER(self))
			{
				if(self.autospec_flags & ASF_OBSERVER_ONLY && !IS_OBSERVER(self))
				{
					if(self.superspec_flags & SSF_VERBOSE)
						superspec_msg("", "", self, sprintf("^8Ignored that ^7%s^8 grabbed %s^8 since the observer_only option is ON\n", other.netname, _item.netname), 2);
				}
				else
				{
					if(self.autospec_flags & ASF_SHOWWHAT)
						superspec_msg("", "", self, sprintf("^7Following %s^7 due to picking up %s\n", other.netname, _item.netname), 2);

					superspec_Spectate(other);
				}
			}
		}
	));

	setself(this);

	return MUT_ITEMTOUCH_CONTINUE;
}

MUTATOR_HOOKFUNCTION(superspec, SV_ParseClientCommand)
{SELFPARAM();
#define OPTIONINFO(flag,var,test,text,long,short) \
    var = strcat(var, ((flag & test) ? "^2[ON]  ^7" : "^1[OFF] ^7")); \
    var = strcat(var, text," ^7(^3 ", long, "^7 | ^3", short, " ^7)\n")

	if(MUTATOR_RETURNVALUE) // command was already handled?
		return false;

	if(IS_PLAYER(self))
		return false;

	if(cmd_name == "superspec_itemfilter")
	{
		if(argv(1) == "help")
		{
			string _aspeco;
			_aspeco = "^7 superspec_itemfilter ^3\"item_classname1 item_classname2\"^7 only show thise items when ^2superspec ^3item_message^7 is on\n";
			_aspeco = strcat(_aspeco, "^3 clear^7 Remove the filter (show all pickups)\n");
			_aspeco = strcat(_aspeco, "^3 show ^7 Display current filter\n");
			superspec_msg("^3superspec_itemfilter help:\n\n\n", "\n^3superspec_itemfilter help:\n", self, _aspeco, 1);
		}
		else if(argv(1) == "clear")
		{
			if(self.superspec_itemfilter != "")
				strunzone(self.superspec_itemfilter);

			self.superspec_itemfilter = "";
		}
		else if(argv(1) == "show" || argv(1) == "")
		{
			if(self.superspec_itemfilter == "")
			{
				superspec_msg("^3superspec_itemfilter^7 is ^1not^7 set", "\n^3superspec_itemfilter^7 is ^1not^7 set\n", self, "", 1);
				return true;
			}
			float i;
			float l = tokenize_console(self.superspec_itemfilter);
			string _msg = "";
			for(i = 0; i < l; ++i)
				_msg = strcat(_msg, "^3#", ftos(i), " ^7", argv(i), "\n");
				//_msg = sprintf("^3#%d^7 %s\n%s", i, _msg, argv(i));

			_msg = strcat(_msg,"\n");

			superspec_msg("^3superspec_itemfilter is:\n\n\n", "\n^3superspec_itemfilter is:\n", self, _msg, 1);
		}
		else
		{
			if(self.superspec_itemfilter != "")
				strunzone(self.superspec_itemfilter);

			self.superspec_itemfilter = strzone(argv(1));
		}

		return true;
	}

	if(cmd_name == "superspec")
	{
		string _aspeco;

		if(cmd_argc > 1)
		{
			float i, _bits = 0, _start = 1;
			if(argv(1) == "help")
			{
				_aspeco = "use cmd superspec [option] [on|off] to set options\n\n";
				_aspeco = strcat(_aspeco, "^3 silent ^7(short^5 si^7) supresses ALL messages from superspectate.\n");
				_aspeco = strcat(_aspeco, "^3 verbose ^7(short^5 ve^7) makes superspectate print some additional information.\n");
				_aspeco = strcat(_aspeco, "^3 item_message ^7(short^5 im^7) makes superspectate print items that were picked up.\n");
				_aspeco = strcat(_aspeco, "^7    Use cmd superspec_itemfilter \"item_class1 item_class2\" to set up a filter of what to show with ^3item_message.\n");
				superspec_msg("^2Available Super Spectate ^3options:\n\n\n", "\n^2Available Super Spectate ^3options:\n", self, _aspeco, 1);
				return true;
			}

			if(argv(1) == "clear")
			{
				self.superspec_flags = 0;
				_start = 2;
			}

			for(i = _start; i < cmd_argc; ++i)
			{
				if(argv(i) == "on" || argv(i) == "1")
				{
					self.superspec_flags |= _bits;
					_bits = 0;
				}
				else if(argv(i) == "off" || argv(i) == "0")
				{
					if(_start == 1)
						self.superspec_flags &= ~_bits;

					_bits = 0;
				}
				else
				{
					if((argv(i) == "silent") || (argv(i) == "si")) _bits |= SSF_SILENT ;
					if((argv(i) == "verbose") || (argv(i) == "ve")) _bits |= SSF_VERBOSE;
					if((argv(i) == "item_message") || (argv(i) == "im")) _bits |= SSF_ITEMMSG;
				}
			}
		}

		_aspeco = "";
		OPTIONINFO(self.superspec_flags, _aspeco, SSF_SILENT, "Silent", "silent", "si");
		OPTIONINFO(self.superspec_flags, _aspeco, SSF_VERBOSE, "Verbose", "verbose", "ve");
		OPTIONINFO(self.superspec_flags, _aspeco, SSF_ITEMMSG, "Item pickup messages", "item_message", "im");

		superspec_msg("^3Current Super Spectate options are:\n\n\n\n\n", "\n^3Current Super Spectate options are:\n", self, _aspeco, 1);

		return true;
	}

/////////////////////

	if(cmd_name == "autospec")
	{
		string _aspeco;
		if(cmd_argc > 1)
		{
			if(argv(1) == "help")
			{
				_aspeco = "use cmd autospec [option] [on|off] to set options\n\n";
				_aspeco = strcat(_aspeco, "^3 strength ^7(short^5 st^7) for automatic spectate on strength powerup\n");
				_aspeco = strcat(_aspeco, "^3 shield ^7(short^5 sh^7) for automatic spectate on shield powerup\n");
				_aspeco = strcat(_aspeco, "^3 mega_health ^7(short^5 mh^7) for automatic spectate on mega health\n");
				_aspeco = strcat(_aspeco, "^3 mega_armor ^7(short^5 ma^7) for automatic spectate on mega armor\n");
				_aspeco = strcat(_aspeco, "^3 flag_grab ^7(short^5 fg^7) for automatic spectate on CTF flag grab\n");
				_aspeco = strcat(_aspeco, "^3 observer_only ^7(short^5 oo^7) for automatic spectate only if in observer mode\n");
				_aspeco = strcat(_aspeco, "^3 show_what ^7(short^5 sw^7) to display what event triggered autospectate\n");
				_aspeco = strcat(_aspeco, "^3 item_msg ^7(short^5 im^7) to autospec when item_message in superspectate is triggered\n");
				_aspeco = strcat(_aspeco, "^3 followkiller ^7(short ^5fk^7) to autospec the killer/off\n");
				_aspeco = strcat(_aspeco, "^3 all ^7(short ^5aa^7) to turn everything on/off\n");
				superspec_msg("^2Available Auto Spectate ^3options:\n\n\n", "\n^2Available Auto Spectate ^3options:\n", self, _aspeco, 1);
				return true;
			}

			float i, _bits = 0, _start = 1;
			if(argv(1) == "clear")
			{
				self.autospec_flags = 0;
				_start = 2;
			}

			for(i = _start; i < cmd_argc; ++i)
			{
				if(argv(i) == "on" || argv(i) == "1")
				{
					self.autospec_flags |= _bits;
					_bits = 0;
				}
				else if(argv(i) == "off" || argv(i) == "0")
				{
					if(_start == 1)
						self.autospec_flags &= ~_bits;

					_bits = 0;
				}
				else
				{
					if((argv(i) == "strength") || (argv(i) == "st")) _bits |= ASF_STRENGTH;
					if((argv(i) == "shield") || (argv(i) == "sh")) _bits |= ASF_SHIELD;
					if((argv(i) == "mega_health") || (argv(i) == "mh")) _bits |= ASF_MEGA_HP;
					if((argv(i) == "mega_armor") || (argv(i) == "ma")) _bits |= ASF_MEGA_AR;
					if((argv(i) == "flag_grab") || (argv(i) == "fg")) _bits |= ASF_FLAG_GRAB;
					if((argv(i) == "observer_only") || (argv(i) == "oo")) _bits |= ASF_OBSERVER_ONLY;
					if((argv(i) == "show_what") || (argv(i) == "sw")) _bits |= ASF_SHOWWHAT;
					if((argv(i) == "item_msg") || (argv(i) == "im")) _bits |= ASF_SSIM;
					if((argv(i) == "followkiller") || (argv(i) == "fk")) _bits |= ASF_FOLLOWKILLER;
					if((argv(i) == "all") || (argv(i) == "aa")) _bits |= ASF_ALL;
				}
			}
		}

		_aspeco = "";
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_STRENGTH, "Strength", "strength", "st");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_SHIELD, "Shield", "shield", "sh");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_MEGA_HP, "Mega Health", "mega_health", "mh");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_MEGA_AR, "Mega Armor", "mega_armor", "ma");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_FLAG_GRAB, "Flag grab", "flag_grab","fg");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_OBSERVER_ONLY, "Only switch if observer", "observer_only", "oo");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_SHOWWHAT, "Show what item triggered spectate", "show_what", "sw");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_SSIM, "Switch on superspec item message", "item_msg", "im");
		OPTIONINFO(self.autospec_flags, _aspeco, ASF_FOLLOWKILLER, "Followkiller", "followkiller", "fk");

		superspec_msg("^3Current auto spectate options are:\n\n\n\n\n", "\n^3Current auto spectate options are:\n", self, _aspeco, 1);
		return true;
	}

	if(cmd_name == "followpowerup")
	{
		FOREACH_CLIENT(IS_PLAYER(it) && (it.strength_finished > time || it.invincible_finished > time), LAMBDA(return superspec_Spectate(it)));

		superspec_msg("", "", self, "No active powerup\n", 1);
		return true;
	}

	if(cmd_name == "followstrength")
	{
		FOREACH_CLIENT(IS_PLAYER(it) && it.strength_finished > time, LAMBDA(return superspec_Spectate(it)));

		superspec_msg("", "", self, "No active Strength\n", 1);
		return true;
	}

	if(cmd_name == "followshield")
	{
		FOREACH_CLIENT(IS_PLAYER(it) && it.invincible_finished > time, LAMBDA(return superspec_Spectate(it)));

		superspec_msg("", "", self, "No active Shield\n", 1);
		return true;
	}

	return false;
#undef OPTIONINFO
}

MUTATOR_HOOKFUNCTION(superspec, BuildMutatorsString)
{
	ret_string = strcat(ret_string, ":SS");
	return 0;
}

MUTATOR_HOOKFUNCTION(superspec, BuildMutatorsPrettyString)
{
	ret_string = strcat(ret_string, ", Super Spectators");
	return 0;
}

void superspec_hello()
{SELFPARAM();
	if(self.enemy.crypto_idfp == "")
		Send_Notification(NOTIF_ONE_ONLY, self.enemy, MSG_INFO, INFO_SUPERSPEC_MISSING_UID);

	remove(self);
}

MUTATOR_HOOKFUNCTION(superspec, ClientConnect)
{SELFPARAM();
	if(!IS_REAL_CLIENT(self))
		return false;

	string fn = "superspec-local.options";
	float fh;

	self.superspec_flags = SSF_VERBOSE;
	self.superspec_itemfilter = "";

	entity _hello = spawn();
	_hello.enemy = self;
	_hello.think = superspec_hello;
	_hello.nextthink = time + 5;

	if (!_ISLOCAL)
	{
		if(self.crypto_idfp == "")
			return false;

		fn = sprintf("superspec-%s.options", uri_escape(self.crypto_idfp));
	}

	fh = fopen(fn, FILE_READ);
	if(fh < 0)
	{
		LOG_TRACE("^1ERROR: ^7 superspec can not open ", fn, " for reading.\n");
	}
	else
	{
		string _magic = fgets(fh);
		if(_magic != _SSMAGIX)
		{
			LOG_TRACE("^1ERROR^7 While reading superspec options file: unknown magic\n");
		}
		else
		{
			self.autospec_flags = stof(fgets(fh));
			self.superspec_flags = stof(fgets(fh));
			self.superspec_itemfilter = strzone(fgets(fh));
		}
		fclose(fh);
	}

	return false;
}

MUTATOR_HOOKFUNCTION(superspec, PlayerDies)
{
	FOREACH_CLIENT(IS_SPEC(it), LAMBDA(
		setself(it);
		if(self.autospec_flags & ASF_FOLLOWKILLER && IS_PLAYER(frag_attacker) && self.enemy == frag_target)
		{
			if(self.autospec_flags & ASF_SHOWWHAT)
				superspec_msg("", "", self, sprintf("^7Following %s^7 due to followkiller\n", frag_attacker.netname), 2);

			superspec_Spectate(frag_attacker);
		}
	));

	setself(frag_target);
	return false;
}

MUTATOR_HOOKFUNCTION(superspec, ClientDisconnect)
{
	superspec_save_client_conf();
	return false;
}
#endif
