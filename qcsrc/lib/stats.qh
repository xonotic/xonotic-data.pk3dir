#pragma once

// TODO: rename to 'netvars'

#include "registry.qh"
#include "sort.qh"

.int m_id;
USING(vectori, vector);

#define REGISTER_STAT(...) EVAL_REGISTER_STAT(OVERLOAD(REGISTER_STAT, __VA_ARGS__))
#define EVAL_REGISTER_STAT(...) __VA_ARGS__
#if defined(CSQC)
	/** Get all stats and store them as globals, access with `STAT(ID)` */
	void stats_get() {}
	#define STAT(...) EVAL_STAT(OVERLOAD(STAT, __VA_ARGS__))
	#define EVAL_STAT(...) __VA_ARGS__
    #define STAT_1(id) STAT_2(id, NULL)
	#define STAT_2(id, cl) (0, _STAT(id))

	#define getstat_int(id) getstati(id, 0, 24)
	#define getstat_bool(id) boolean(getstati(id))
	#define getstat_float(id) getstatf(id)
	#define getstat_vector(id) vec3(getstat_float(id + 0), getstat_float(id + 1), getstat_float(id + 2))
	#define getstat_vectori(id) vec3(getstat_int(id + 0), getstat_int(id + 1), getstat_int(id + 2))

	#define _STAT(id) g_stat_##id
	#define REGISTER_STAT_2(id, T) \
		T _STAT(id); \
		T CAT(_STAT(id), _prev); \
		REGISTER(Stats, STAT_##id, m_id, new_pure(stat)) \
		{ \
			if (#T == "vector" || #T == "vectori") { \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, y); \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, z); \
			} \
		} \
		[[accumulate]] void stats_get() \
		{ \
			T it = getstat_##T(STAT_##id.m_id); \
			if (it != CAT(_STAT(id), _prev)) \
				CAT(_STAT(id), _prev) = _STAT(id) = it; \
		}
	#define REGISTER_STAT_3(x, T, expr) REGISTER_STAT_2(x, T)
#elif defined(SVQC)
	/** Add all registered stats, access with `STAT(ID, player)` or `.type stat = _STAT(ID); player.stat` */
	void stats_add() {}
	#define STAT(id, cl) (cl)._STAT(id)

	#define addstat_int(id, fld) addstat(id, AS_INT, fld)
	#define addstat_bool(id, fld) addstat(id, AS_INT, fld)
	#define addstat_float(id, fld) addstat(id, AS_FLOAT, fld)
	#define addstat_vector(id, fld) MACRO_BEGIN { \
		addstat_float(id + 0, fld##_x); \
		addstat_float(id + 1, fld##_y); \
		addstat_float(id + 2, fld##_z); \
	} MACRO_END
	#define addstat_vectori(id, fld) MACRO_BEGIN { \
		addstat_int(id + 0, fld##_x); \
		addstat_int(id + 1, fld##_y); \
		addstat_int(id + 2, fld##_z); \
	} MACRO_END
	const int AS_STRING = 1;
	const int AS_INT = 2;
	const int AS_FLOAT = 8;

	.int __stat_null;
	/** Prevent engine stats being sent */
	STATIC_INIT(stats_clear)
	{
		int r = 32;
		for (int i = 0, n = 256 - r; i < n; ++i) {
			addstat(r + i, AS_INT, __stat_null);
		}
	}

	#define _STAT(id) stat_##id
	#define REGISTER_STAT_2(id, T) \
		.T _STAT(id); \
		REGISTER(Stats, STAT_##id, m_id, new_pure(stat)) \
		{ \
			if (#T == "vector" || #T == "vectori") { \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, y); \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, z); \
			} \
		} \
		[[accumulate]] void stats_add() \
		{ \
			.T fld = _STAT(id); \
			addstat_##T(STAT_##id.m_id, fld); \
		}
	void GlobalStats_update(entity this) {}
    #define REGISTER_STAT_3(id, T, expr) \
    	REGISTER_STAT_2(id, T); \
    	[[accumulate]] void GlobalStats_update(entity this) { STAT(id, this) = (expr); } \
    	STATIC_INIT(worldstat_##id) { entity this = NULL; STAT(id, this) = (expr); }
#else
	#define REGISTER_STAT_2(id, type)
    #define REGISTER_STAT_3(id, T, expr)
#endif

const int STATS_ENGINE_RESERVE = 32;

REGISTRY(Stats, 256 - STATS_ENGINE_RESERVE)
REGISTER_REGISTRY(Stats)
REGISTRY_SORT(Stats)
REGISTRY_CHECK(Stats)
STATIC_INIT(RegisterStats_renumber)
{
	FOREACH(Stats, true, it.m_id = STATS_ENGINE_RESERVE + i);
}
#ifdef SVQC
STATIC_INIT(stats_add) { stats_add(); }
#endif
