#pragma once

// TODO: rename to 'netvars'

#include "registry.qh"
#include "sort.qh"

.int m_id;
USING(vectori, vector);

const int STATS_ENGINE_RESERVE = 32;
// must be listed in ascending order
#define MAGIC_STATS(_, x) \
	_(x, MOVEVARS_TIMESCALE, 241) \
	/**/

int g_magic_stats_hole = 0;

#define MAGIC_STATS_FIX_MANUAL(it, var, id) \
	if (it.registered_id == "STAT_" #var) { --g_magic_stats_hole; it.m_id = id; } else

#define MAGIC_STATS_FIX_AUTO(it, var, id) \
	if (it.m_id == id) { ++g_magic_stats_hole; ++it.m_id; }

#define MAGIC_STATS_FIX(it) \
	it.m_id += g_magic_stats_hole; \
	MAGIC_STATS(MAGIC_STATS_FIX_MANUAL, it) { MAGIC_STATS(MAGIC_STATS_FIX_AUTO, it) }

#define REGISTER_STAT(...) EVAL_REGISTER_STAT(OVERLOAD(REGISTER_STAT, __VA_ARGS__))
#define EVAL_REGISTER_STAT(...) __VA_ARGS__
#if defined(CSQC)
	/** Get all stats and store them as globals, access with `STAT(ID)` */
	void stats_get() {}
	#define STAT(...) EVAL_STAT(OVERLOAD(STAT, __VA_ARGS__))
	#define EVAL_STAT(...) __VA_ARGS__
    #define STAT_1(id) (RVALUE, _STAT(id))
	#define STAT_2(id, cl) STAT_1(id)

	#define getstat_int(id) getstati(id, 0, 24)
	#define getstat_bool(id) boolean(getstati(id))
	#define getstat_float(id) getstatf(id)
	#define getstat_vector(id) vec3(getstat_float(id + 0), getstat_float(id + 1), getstat_float(id + 2))
	#define getstat_vectori(id) vec3(getstat_int(id + 0), getstat_int(id + 1), getstat_int(id + 2))

	#define _STAT(id) g_stat_##id
	#define REGISTER_STAT_2(id, T) \
		T _STAT(id); \
		/* T CAT(_STAT(id), _prev); */ \
		REGISTER(Stats, STAT_##id, m_id, new_pure(stat)) \
		{ \
			if (#T == "vector" || #T == "vectori") { \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, y); \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, z); \
			} \
		} \
		ACCUMULATE void stats_get() \
		{ \
			T it = getstat_##T(STAT_##id.m_id); \
			/* if (it != CAT(_STAT(id), _prev)) \
				CAT(_STAT(id), _prev) = */ _STAT(id) = it; \
		}
	#define REGISTER_STAT_3(x, T, expr) REGISTER_STAT_2(x, T)
#elif defined(SVQC)
    /** Internal use only */
    entity STATS;
	/** Add all registered stats, access with `STAT(ID, player)` or `.type stat = _STAT(ID); player.stat` */
	void stats_add() {}
	#define STAT(...) EVAL_STAT(OVERLOAD_(STAT, __VA_ARGS__))
    #define EVAL_STAT(...) __VA_ARGS__
    #define STAT_1(id) (RVALUE, STAT_2(id, STATS))
	#define STAT_2(id, cl) (cl)._STAT(id)

	#define addstat_int(id, fld) addstat(id, AS_INT, fld)
	#define addstat_bool(id, fld) addstat(id, AS_INT, fld)
	#define addstat_float(id, fld) addstat(id, AS_FLOAT, fld)
	#define addstat_vector(id, fld) MACRO_BEGIN \
		addstat_float(id + 0, fld##_x); \
		addstat_float(id + 1, fld##_y); \
		addstat_float(id + 2, fld##_z); \
	MACRO_END
	#define addstat_vectori(id, fld) MACRO_BEGIN \
		addstat_int(id + 0, fld##_x); \
		addstat_int(id + 1, fld##_y); \
		addstat_int(id + 2, fld##_z); \
	MACRO_END
	const int AS_STRING = 1;
	const int AS_INT = 2;
	const int AS_FLOAT = 8;

	.int __stat_null;
	STATIC_INIT(stats)
	{
	    STATS = new(stats);
	    // Prevent engine stats being sent
		int r = STATS_ENGINE_RESERVE;
		for (int i = 0, n = 256 - r; i < n; ++i) {
			#define X(_, name, id) if (i == id) continue;
			MAGIC_STATS(X, );
			#undef X
			addstat(r + i, AS_INT, __stat_null);
		}
	}

	#define _STAT(id) stat_##id
	#define REGISTER_STAT_2(id, T) \
		.T _STAT(id); \
		REGISTER(Stats, STAT_##id, m_id, new_pure(stat)) \
		{ \
			if (#T == "vector" || #T == "vectori") { \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, y); \
				REGISTRY_RESERVE(Stats, m_id, STAT_##id, z); \
			} \
		} \
		ACCUMULATE void stats_add() \
		{ \
			.T fld = _STAT(id); \
			addstat_##T(STAT_##id.m_id, fld); \
		}
	void GlobalStats_update(entity this) {}
    /** TODO: do we want the global copy to update? */
    #define REGISTER_STAT_3(id, T, expr) \
    	REGISTER_STAT_2(id, T); \
    	ACCUMULATE void GlobalStats_update(entity this) { STAT(id, this) = (expr); } \
    	STATIC_INIT(worldstat_##id) { entity this = STATS; STAT(id, this) = (expr); }
#else
	#define REGISTER_STAT_2(id, type)
    #define REGISTER_STAT_3(id, T, expr)
#endif

REGISTRY(Stats, 256 - STATS_ENGINE_RESERVE)
REGISTER_REGISTRY(Stats)
REGISTRY_SORT(Stats)
REGISTRY_CHECK(Stats)
STATIC_INIT(Stats_renumber)
{
	FOREACH(Stats, true, {
		it.m_id = STATS_ENGINE_RESERVE + i;
		MAGIC_STATS_FIX(it);
	});
}
#ifdef SVQC
STATIC_INIT(stats_add) { stats_add(); }
#endif
