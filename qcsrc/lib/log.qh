#ifndef LOG_H
#define LOG_H

#define _printferr(...)     error(sprintf(__VA_ARGS__))
#define _printfbt(...)      backtrace(sprintf(__VA_ARGS__))
#define printf(...)         print(sprintf(__VA_ARGS__))
#define dprintf(...)        dprint(sprintf(__VA_ARGS__))
#define _dprintf2(...)      do { if (autocvar_developer > 1) dprintf(__VA_ARGS__); } while (0)

#define assert(expr, ...)   do { if (!(expr)) LOG_WARNINGF(__VA_ARGS__); } while (0)

#define _LOG(f, level, s)   f("[::"level"] ["__FILE__":%s:%.0f] %s", __FUNC__, __LINE__, s)

#define  LOG_FATAL(...)     _LOG_FATAL(strcat("", __VA_ARGS__))
#define  LOG_FATALF(...)    _LOG_FATAL(sprintf(__VA_ARGS__))
#define _LOG_FATAL(s)       _LOG(_printferr, "FATAL", s)

#define  LOG_SEVERE(...)    _LOG_SEVERE(strcat("", __VA_ARGS__))
#define  LOG_SEVEREF(...)   _LOG_SEVERE(sprintf(__VA_ARGS__))
#define _LOG_SEVERE(s)      _LOG(_printfbt, "SEVERE", s)

#define  LOG_WARNING(...)   _LOG_WARNING(strcat("", __VA_ARGS__))
#define  LOG_WARNINGF(...)  _LOG_WARNING(sprintf(__VA_ARGS__))
#define _LOG_WARNING(s)     _LOG(printf, "WARNING", s)

#define  LOG_INFO(...)      do { if (autocvar_developer) _LOG_INFO(strcat("", __VA_ARGS__)); else print (__VA_ARGS__); } while (0)
#define  LOG_INFOF(...)     do { if (autocvar_developer) _LOG_INFO(sprintf(__VA_ARGS__));    else printf(__VA_ARGS__); } while (0)
#define _LOG_INFO(s)        _LOG(printf, "INFO", s)

#define  LOG_TRACE(...)     _LOG_TRACE(strcat("", __VA_ARGS__))
#define  LOG_TRACEF(...)    _LOG_TRACE(sprintf(__VA_ARGS__))
#define _LOG_TRACE(s)       _LOG(dprintf, "TRACE", s)

#define  LOG_DEBUG(...)     _LOG_DEBUG(strcat("", __VA_ARGS__))
#define  LOG_DEBUGF(...)    _LOG_DEBUG(sprintf(__VA_ARGS__))
#define _LOG_DEBUG(s)       _LOG(_dprintf2, "DEBUG", s)

// TODO: this sucks, lets find a better way to do backtraces?
#ifdef SVQC
void builtin_remove(entity);
#define _backtrace() builtin_remove(NULL)
#else
void remove(entity);
#define _backtrace() remove(NULL)
#endif

noref int autocvar_developer;
noref bool autocvar_prvm_backtraceforwarnings;

#define backtrace(msg) do { \
    int dev = autocvar_developer; \
    bool war = autocvar_prvm_backtraceforwarnings; \
    cvar_set("developer", "1"); \
    cvar_set("prvm_backtraceforwarnings", "1"); \
    print("\n--- CUT HERE ---\n", msg, "\n"); \
    _backtrace(); \
    print("\n--- CUT UNTIL HERE ---\n"); \
    cvar_set("developer", ftos(dev)); \
    cvar_set("prvm_backtraceforwarnings", ftos(war)); \
} while (0)

#endif
