#pragma once

// Transition from global 'self' to local 'this'

// Step 1: auto oldself
#if 1
    #define SELFPARAM() noref const entity this = self
#endif

// Step 2: const self
#if 1
    #define self (0, self)
    [[alias("self")]] entity __self;
    #define setself(s) (__self = s)
    #define WITHSELF(value, block) WITH(entity, __self, value, (0, block))
#endif

// Step 3: propagate SELFPARAM()
#if 1
    #undef self
    #define self (this, self)
#endif

// Step 4: kill unstructured setself
#if 0
    #undef setself
#endif

// Step 5: this should work
#if 0
    #define self (0, this)
#endif

// Step 6: Remove SELFPARAM in favor of a parameter

.void(entity this) selftouch;
void touch_self() { SELFPARAM(); this.selftouch(this); }
#define settouch(e, f) (e.touch = touch_self, e.selftouch = f)

//.void(entity this) selfuse;
//void use_self() { SELFPARAM(); this.selfuse(this); }
//#define setuse(e, f) (e.use = use_self, e.selfuse = f)

.void(entity this) selfthink;
void think_self() { SELFPARAM(); this.selfthink(this); }
#define setthink(e, f) (e.think = think_self, e.selfthink = f)
