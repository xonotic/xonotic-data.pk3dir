#pragma once

// Shared by panel/strafehud.qc and panel/physics.qc, since some hud elements require the same variables/calculations
// All PHYS_* macro calls are localised here
// All csqcplayer related calls are also localised here
// These variables are all recomputed every time HUD_Main is called, since they could change during any frame

void HUD_Physics_Init();

entity strafeplayer;
bool   islocal;
bool   csqc_and_strafe_player;
bool   predicted;

float  strafe_waterlevel;
vector movement_phys;
int    keys;
bool   jumpheld;
bool   real_onground;
bool   real_onslick;
bool   onground;
bool   onslick;
bool   swimming;
vector vel_phys; // NOTE: physics hud previously did this: vector vel = (csqcplayer ? csqcplayer.velocity : pmove_vel);
float  speed_phys;
float  speed3d_phys;
bool   immobile;
float  maxspeed_mod;
float  maxspeed_phys;
float  maxspeed;
float  maxaccel_phys;
float  maxaccel;
float  vel_angle;
float  view_angle;
float  airstopaccel;
float  onground_lasttime = 0;
bool   onslick_last      = false;
float  strafefriction;
bool   alive_player;

#define maxspeed_ground      PHYS_MAXSPEED(strafeplayer)
#define maxspeed_air         PHYS_MAXAIRSPEED(strafeplayer)
#define maxspeed_airstrafe   PHYS_MAXAIRSTRAFESPEED(strafeplayer)
#define maxaccel_ground      PHYS_ACCELERATE(strafeplayer)
#define maxaccel_air         PHYS_AIRACCELERATE(strafeplayer)
#define maxaccel_airstrafe   PHYS_AIRSTRAFEACCELERATE(strafeplayer)
#define stopspeed            PHYS_STOPSPEED(strafeplayer)
#define aircontrol           PHYS_AIRCONTROL(strafeplayer)
#define aircontrol_backwards PHYS_AIRCONTROL_BACKWARDS(strafeplayer)
#define aircontrol_power     PHYS_AIRCONTROL_POWER(strafeplayer)
#define aircontrol_penalty   PHYS_AIRCONTROL_PENALTY(strafeplayer)
#define airaccel_qw          PHYS_AIRACCEL_QW(strafeplayer)
#define friction_phys        PHYS_FRICTION(strafeplayer)
#define friction_slick       PHYS_FRICTION_SLICK(strafeplayer)
